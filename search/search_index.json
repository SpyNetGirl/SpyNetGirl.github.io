{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SpyNetGirl Blog","text":"<ul> <li> <p> Harden Windows Security PowerShell script</p> <p>PowerShell script that you can easily run directly from the GitHub repository to apply the hardening measures on any computer.</p> <p> Access the Resource</p> </li> <li> <p> Website Based on GitHub Readme</p> <p>An interactive beautiful website that displays the same content as the GitHub readme, offers easy search functionality and more!</p> <p> Access the Resource</p> </li> <li> <p> Harden Windows Security Module</p> <p>PowerShell module that can apply the hardening measures, evaluate the system compliance and remove the hardening measures applied on the system.</p> <p> Access the Resource</p> </li> <li> <p> WDACConfig</p> <p>An advanced PowerShell module built to facilitate the implementation of App Whitelisting on Windows using Windows Defender Application Control (App Control for Business policies)</p> <p> Access the Resource</p> </li> <li> <p> Privacy, Anonymity, Compartmentalization</p> <p>Explores the topics of Privacy, Anonymity and Compartmentalization. These concepts are interrelated and essential for protecting one's identity</p> <p> Access the Resource</p> </li> <li> <p> MS Edge Features</p> <p>A repository that lists Microsoft Edge insider Canary channel features before anyone else - Used by enthusiasts who are looking for trying out bleeding edge features first</p> <p> Access the Resource</p> </li> <li> <p> Official IANA IP blocks</p> <p>Grabs the latest lists from the 5 Global Registeries for each continent and creates country specific TEXT, CSV and JSON files based off them and stores them in this repository - runs every day at 22:00 UTC 00:00</p> <p> Access the Resource</p> </li> <li> <p> Microsoft Domains</p> <p>A repository that lists all active Microsoft root domains, no URLs and no sub-domains, for the purpose of Whitelisting in various systems and apps. It can facilitate the implementation of strict host-based firewall rules, for example, in a corporate environment.</p> <p> Access the Resource</p> </li> <li> <p> WinSecureDNSMgr Module</p> <p>This is a PowerShell module that can simplify setting up DNS over HTTPS in Windows for various scenarios. It can automatically identify the correct and active network adapter/interface and set Secure DNS settings for it based on parameters supplied by user.</p> <p> Access the Resource</p> </li> </ul>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/","title":"Clean Source principle, Azure and Privileged Access","text":""},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#clean-source-principle","title":"Clean Source principle","text":"<p>The clean source principle states that all security dependencies must be as trustworthy as the object being secured. The source of the control and/or trust must have an equal or higher level of trustworthiness and/or security than the destination.</p> <p>This article reveals the significance of the clean source principle, common short comings, and how it radically transforms the security architecture paradigm.</p> <p></p> <p></p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#a-case-study-of-using-bitlocker-and-tpm-with-nested-vms-in-azure","title":"A Case Study of Using BitLocker and TPM with Nested VMs in Azure","text":"<p>Now that you are generally aware of the Clean Source principle, you might want to try to make an architecture that is resistant to tamper/compromise from upstream systems or identities.</p> <p>We will examine a scenario that may appear very secure and advanced but is still susceptible to side channel attacks because of not adhering to the clean source principle. In this hypothetical scenario, the Global Admin account is compromised, and we want to safeguard our data from admin abuse.</p> <p>Let us assume that you create an Azure VM, which we will refer to as the \u201cHost VM\u201d. We will also create another virtual machine inside of the Host VM using Hyper-V. We will refer to this new guest VM as the \u201cNested VM\u201d. The nested VM\u2019s operating system volume is encrypted with BitLocker. You configure the Key Protectors to be Startup PIN, TPM and a recovery password. Only you have access to the PIN and recovery password of the BitLocker encrypted drive.</p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#how-to-use-bitlocker-in-azure","title":"How to Use BitLocker in Azure","text":"<p>You can utilize Bitlocker in Azure to encrypt the disks of the virtual machines. The service is called Azure Disk Encryption, and it employs Key Vault to store the key instead of a TPM.</p> <p>Key Vaults are extremely economical, and disk encryption does not incur any licensing fees, only Key Vault hosting, which is negligible.</p> <p></p> <p></p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#flaws-of-the-above-mentioned-scenario","title":"Flaws of the Above-Mentioned Scenario","text":"<p>None of the protections mentioned in the scenario can defend against a compromised admin which has gotten Host VM admin permissions. They can install Command and Control (C2) software using the Azure VM guest agent.</p> <p>Once the host VM is compromised, the C2 software can be used as a key logger to steal the startup PIN and authentication credentials of the Nested VM. After the PIN and/or the credentials are stolen, the threat actor can use \u202fPowerShell Direct\u202f to access the virtual machine through the host's hypervisor if it is already booted, or they can boot the Nested VM themselves using the PIN they skimmed.</p> <p>At this point, the nested virtual machine can be booted up, and no brute forcing is needed.</p> <p>Another attack path is if they download the Nested VM\u2019s disks, they can offline attack the VM once they gain access to the recovery key or the key that is stored in the vTPM of the Nested VM\u2019s hypervisor which is on the disk of the host VM. All software based KSPs just get decoded at runtime and there are tools to skim the decoded value.</p> <p>When the nested VM is running, the system sees the disk as plain text, not encrypted. BitLocker encryption is transparent drive encryption, not encryption in use. (For encryption in use, I recommend something like Microsoft Purview\u202fon the data itself.)</p> <p>BitLocker is not easy to brute force if the right algorithms are configured (XTS-AES-256) so they would not want to go that direction in most cases.</p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#what-if-you-deploy-a-signed-wdac-policy-on-the-host-vm","title":"What if You Deploy a Signed WDAC Policy on the Host VM?","text":"<p>You could, but what would prevent the threat actor from disabling it on the host? The host is controlled by the threat actor in this scenario and not having the private keys of the deployed signed policy won't matter.</p> <p></p> <p></p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#so-what-alternative-will-the-threat-actor-pursue","title":"So, What Alternative Will the Threat Actor Pursue?","text":"<p>They could simply download the VHDX of the main host (Azure virtual machine), extract the nested VHDX that pertains to the guest operating system, construct a new operating system with your data in it but devoid of security, upload that and await your login. You would remain oblivious to the tampering since the operating system is identical but bereft of security, or the threat actor can even deploy their own signed policy on the new operating system.</p> <p>Bear in mind, host compromise entails all security dependencies are also compromised. So, you must presume through some black magic that your guest is compromised. What happens if they alter Hyper-V's binaries to perform custom stuff?</p> <p>You can technically insert custom guest firmware. Custom firmware is not officially supported and is usually used by pirates to get ACPI tables altered to activate Windows for free.</p> <p></p> <p></p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#clean-source-and-assume-breach-principle-a-match-made-in-heaven","title":"Clean Source and Assume Breach Principle, a Match Made in Heaven","text":"<p>It is not only virtual machines that are mistaken to be secure, but also jump boxes (RDP) and session manager apps (PAM) are insufficiently secure. The problem with RDP and PAMs is session hijacking. You can use keyboard and mouse takeover capabilities to control anything downstream without having to install any malware, because the system that is running the RDP client / session manager app is technically in charge of the secure system.</p> <p>The control and/or trust that is being originated from hardware is insecure and propagated downstream through the remote-control apps. So, all insecure states can be transmitted onto the secure systems, and you do not even have to install anything on the remote systems to compromise them.</p> <p>Clean source done right will prevent session takeovers, because the system hosting the session will be as secure as the upstream system requires.</p> <p>However, on Azure, things are much superior. Azure is a hosting fabric that receives commands from an admin. The admin must be hosted on a secure system, which is where the PAW comes in. Azure fabric itself is more secure than anything you can provide.</p> <p>The guest has to abide by the rules of its host, and the host has to conform to the rules of Azure, and Azure adheres to the rules of the admins, so by proxy, the guest complies with the rules of the admins, because the chain of control/trust flows through the host virtual machine. Any type of direct guest guarding is futile.</p> <p></p> <p></p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#so-what-is-the-solution","title":"So, What Is the Solution?","text":"<p>What you desire is to create something that can remain protected in most hostile environment and preserve its integrity.</p> <p></p> <p></p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#introducing-privileged-access-workstations-paw","title":"Introducing Privileged Access Workstations (PAW)","text":"<p>PAW is the highest security configuration designed for extremely sensitive roles that would have a significant or material impact on the organization if their account was compromised. The PAW configuration includes security controls and policies that restrict local administrative access and productivity tools to minimize the attack surface to only what is absolutely needed for performing sensitive jobs or tasks.</p> <p>Often, the servers are considerably less secure than the PAW itself. Likewise with intermediaries, they are usually less secure than the PAW itself. Consequently, the session host and/or client is not the weakest chain link. Which also implies that the clean source principle is kept at least on the start of the chain.</p> <p>For more of a do-it-your-self experience, check out my harden windows security repository over at GitHub.</p> <p></p> <p></p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#azure-confidential-compute","title":"Azure Confidential Compute","text":"<p>Confidential computing is an industry term defined by the Confidential Computing Consortium (CCC) - a foundation dedicated to defining and accelerating the adoption of confidential computing. The CCC defines confidential computing as: The protection of data in use by performing computations in a hardware-based Trusted Execution Environment (TEE).</p> <p>Unlike Guarded hosts, Azure confidential compute VMs use Intel SGX or AMD's Secure Encrypted Virtualization-Secure Nested Paging, or SEV-SNP.</p> <p></p> <p></p>"},{"location":"Azure/Clean%20Source%20principle%2C%20Azure%20and%20Privileged%20Access%20Workstations/#conclusion","title":"Conclusion","text":"<p>In this article, we have explored the clean source principle, which states that all security dependencies must be as trustworthy as the object being secured. We have seen how this principle can help us design more secure architectures and avoid common pitfalls that can compromise our data and systems.</p> <p>We have also learned about some of the solutions that Microsoft offers to help us achieve clean source, such as Privileged Access Workstations (PAW) and Azure Confidential Compute. These solutions leverage advanced technologies such as Intel SGX and AMD SEV-SNP to protect our sensitive workloads from upstream attacks and side channel threats.</p> <p>By following the clean source principle and using these solutions, we can enhance our security posture and reduce our risk exposure in the cloud and beyond.</p> <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/","title":"How to Securely Connect to Azure VMs and Use RDP","text":""},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#what-are-azure-vms","title":"What Are Azure VMs","text":"<p>Azure Virtual Machines (VMs) run on Microsoft\u2019s cloud computing platform, Azure. They allow users to create, manage, and scale their own virtualized infrastructure in the cloud, without having to invest in physical hardware or deal with maintenance issues.</p> <p>To establish a secure connection to your Azure VM, you need to make some preparations. You can avoid exposing your VM\u2019s RDP port to the Internet, which reduces the risk of port scanning and brute force attacks.</p> <p>None of the methods described below require you to assign a public IP address or open inbound ports in your Azure VM. They only need a virtual network with a private IP address assigned to the Azure VM.</p> <p></p> <p></p> <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#bastion","title":"Bastion","text":"<p>Azure Bastion uses TLS encryption and firewall traversal for RDP connections, which means your traffic is more secure and less vulnerable to attacks. You also don\u2019t need to manage network security groups (NSGs) for your VM, as you can configure them to allow RDP only from Azure Bastion</p> <ul> <li> <p>What is Azure Bastion?</p> </li> <li> <p>Azure Bastion FAQ</p> </li> </ul> <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#there-are-many-ways-to-use-bastion-to-connect-to-your-azure-vm","title":"There Are Many Ways to Use Bastion to Connect to Your Azure VM","text":"<ul> <li> <p>Use your browser in Azure portal to access your VM using web technologies. Bastion from the web browser is as secure as using it with native client.</p> </li> <li> <p>With Shareable link, you just go to Bastion in Azure portal, select the Bastion instance, navigate to Shareable links and create a new link.</p> </li> <li> <p>Bastion and the Windows native client, the reason we use native client, in this article, is because it allows us to copy and paste files between our local computer and the Azure VM.</p> </li> <li> <p>And more...</p> </li> </ul> <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#lets-get-started-with-using-bastion-with-native-client","title":"Let's Get Started With Using Bastion with Native Client","text":"<ol> <li>First get the Bastion ready by Configuring it for native client connections</li> </ol>  Screenshots  <ol> <li>Install Azure CLI on your computer. There are many ways to do that but the easiest way is using Winget:</li> </ol> <pre><code>winget install -e --id Microsoft.AzureCLI\n</code></pre> <ol> <li>Log in to your Azure account, a web page will open.</li> </ol> <pre><code>az login\n</code></pre> <ol> <li> <p>Gather the following details needed for the next command</p> <ul> <li>Bastion name, you can find it by going to your Azure VM and search for \"Bastion\"</li> <li>Azure Resource Group name</li> <li>The VM's Resource ID. The Resource ID can be easily located in the Azure portal. Go to the Overview page for your VM and select the JSON View link to open the Resource JSON. Copy the Resource ID at the top of the page.</li> </ul> </li> <li> <p>Log into RDP, paste this in PowerShell</p> </li> </ol> <pre><code>az network bastion rdp --name \"&lt;BastionName&gt;\" --resource-group \"&lt;ResourceGroupName&gt;\" --target-resource-id \"&lt;VMResourceId&gt;\"\n</code></pre> <p></p> <p>You now have a secure connection to your Azure VM using Bastion Native Client.</p> <p></p> <p></p> <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#using-azure-vpn-gui-method","title":"Using Azure VPN - GUI Method","text":"<p>Azure VPN Gateway connects your on-premises networks to Azure, or connects Azure virtual networks together, through VPN setups such as Site-to-Site, Point-to-Site etc. The connectivity is secure and uses the industry-standard protocols such as SSTP, IKEv2, OpenVPN etc.</p> <p>We need a resource group first because we're going to need a few components: Azure Virtual Network, Azure Public IP address, Azure VPN Gateway. We can either install everything in a separate group or install them in the same resource group as Azure VMs. It will work either way. For this guide, all of the resources reside in the same location, which is UK South.</p> <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#create-a-resource-group","title":"Create a Resource Group","text":"<ul> <li>Create a new Resource Group named <code>ResourceGroup1</code></li> <li>Set its location to <code>UK South</code> (you can set it to somewhere else that is closer to your physical location).</li> </ul>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#create-a-virtual-network-with-subnets","title":"Create a Virtual Network With Subnets","text":"<ul> <li> <p>From Azure Portal &gt; Virtual Networks &gt; Create Virtual Network</p> </li> <li> <p>Name it <code>VirtualNetwork1</code></p> </li> <li> <p>Set the IP address space of the Virtual Network to something like <code>10.0.0.0/14</code></p> </li> <li> <p>Create a new subnet named <code>Default</code> and set its address range to <code>10.0.0.0/24</code></p> </li> <li> <p>Create another subnet named <code>GatewaySubnet</code>. Set its address range to <code>10.0.1.0/24</code>. This is for Azure Virtual Network Gateway.</p> </li> </ul>  Screenshots  <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#create-a-vm-skip-if-you-already-have-one","title":"Create a VM - Skip if You Already Have One","text":"<p>Create a VM in Azure and do not allow any open ports from Internet. Do not assign any public IP to the VM.</p> <p>In the Virtual Network section, choose the <code>VirtualNetwork1</code> for the VM and set its <code>Default</code> Subnet accordingly.</p> <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#create-a-virtual-network-gateway","title":"Create a Virtual Network Gateway","text":"<ul> <li> <p>From Azure Portal &gt; Virtual Network Gateways &gt; Create Virtual Network Gateway</p> </li> <li> <p>Name it <code>VNGateWay1</code></p> </li> <li> <p>Select a Generation 2 SKU such as <code>VpnGw2</code></p> </li> <li> <p>In the Virtual Network section, select the Virtual Network that we created earlier, called \"VirtualNetwork1\"</p> </li> <li> <p>Create a new Public IP address called <code>PublicIP1</code></p> </li> <li> <p>Configure Active-Active mode based on your preference. More info</p> <ul> <li>It provides redundancy and failover feature by establishing 2 simultaneous connections from your local machine to Azure network. The VPN Gateway will have 2 public IP addresses and your computer will connect to both of them at the same time.</li> </ul> </li> <li> <p>Create the Virtual Network Gateway now</p> </li> <li> <p>Wait for it to complete</p> </li> </ul>  Screenshot  <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#create-a-point-to-site-vpn-connection","title":"Create a Point-To-Site VPN Connection","text":"<ul> <li> <p>Go to the VNGateWay1, Access \"Point-to-site configuration\" under settings section</p> </li> <li> <p>Select Configure Now.</p> </li> <li> <p>Enter <code>20.20.0.0/16</code> in the Address pool.</p> </li> <li> <p>Set Tunnel type to <code>IKEv2 and SSTP</code>. The VPN will use secure built-in protocols in Windows without the need for any 3rd party software.</p> </li> <li> <p>Set Authentication Type to Azure Certificate.</p> </li> <li> <p>Create self-signed Root and Client certificates on your local computer if you don't already have the required certificates.</p> <ul> <li> <p>Use the PowerShell Code below to automate it.</p> </li> <li> <p>Generate and export certificates for point-to-site using PowerShell</p> </li> <li> <p>Step-By-Step: Creating an Azure Point-to-Site VPN</p> </li> <li> <p>Configure server settings for P2S VPN Gateway connections - certificate authentication - Azure portal</p> </li> </ul> </li> <li> <p>In the Root Certificates section, enter a name such as <code>RootCertificate1</code> and in the \"Public certificate data\" field enter the root certificate's <code>.cer</code> file content, by copying and pasting it from the file and excluding <code>-----BEGIN CERTIFICATE-----</code> and <code>-----END CERTIFICATE-----</code>.</p> <ul> <li> <p>Export the Root certificate from the Users Personal certificates store, without private keys, as <code>Base-64 encoded X.509 (.CER)</code>, and open it with Notepad.</p> </li> <li> <p>Export the Client certificate from the Users Personal certificates store, with private keys, as <code>PKCS #12 (.PFX)</code>. You need to install it on the computer that you're going to use to connect to the VPNGateway and Azure VM.</p> </li> </ul> </li> <li> <p>Save the configurations and wait for it to complete.</p> </li> <li> <p>Now access the VPNGateway again, navigate to the \"Point-to-site configuration\" section, Use the \"Download VPN Client\" button to download the required files.</p> </li> <li> <p>Run the VPN client on the same computer you install the <code>.pfx</code> certificate on.</p> </li> </ul>  Screenshot  <p></p> <p>You can connect to other VMs (using RDP) on the same subnet using their private IPs from inside a VM.</p> <p>When you don't assign a public IP to a VM, it will only have a private IP address; You can verify this from Control Panel inside the OS.</p>  Screenshots  <p></p> <p></p> <p></p>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#using-azure-vpn-cloud-powershell-method","title":"Using Azure VPN - Cloud PowerShell Method","text":""},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#run-on-azure-cloud-powershell","title":"Run on Azure Cloud PowerShell","text":"<pre><code># get all of the available location for Azure resources\nGet-AzLocation | Format-Table -Property Location, DisplayName\n\n# Create a new Resource Group\nNew-AzResourceGroup -Name 'ResourceGroup1' -Location uksouth\n\n# Create a new Virtual Network\nNew-AzVirtualNetwork -ResourceGroupName 'ResourceGroup1' -Location 'uksouth' -Name 'VirtualNetwork1' -AddressPrefix '10.0.0.0/14'\n\n# Get the virtual network we created\n$VirtualNetwork1 = Get-AzVirtualNetwork -ResourceGroupName 'ResourceGroup1' -Name 'VirtualNetwork1'\n\n# Add a new subnet to the virtual network named default\nAdd-AzVirtualNetworkSubnetConfig -Name 'Default' -AddressPrefix '10.0.0.0/24' -VirtualNetwork $VirtualNetwork1\n\n# Add the GateWay subnet to the virtual network\nAdd-AzVirtualNetworkSubnetConfig -Name 'GatewaySubnet' -AddressPrefix '10.0.1.0/24' -VirtualNetwork $VirtualNetwork1\n\n# Apply the configurations to the virtual network\n$VirtualNetwork1 | Set-AzVirtualNetwork\n\n# Create a public IP address\nNew-AzPublicIpAddress -Name 'PublicIP1' `\n    -ResourceGroupName 'ResourceGroup1' `\n    -Location 'uksouth' `\n    -AllocationMethod 'Static'\n\n# Get the Public IP address\n$PublicIP1 = Get-AzPublicIpAddress -Name 'PublicIP1' -ResourceGroupName 'ResourceGroup1'\n\n# Get the virtual network\n$VirtualNetwork1 = Get-AzVirtualNetwork -ResourceGroupName 'ResourceGroup1' -Name 'VirtualNetwork1'\n\n# Get the subnet that belongs to Virtual network Gateway from our Virtual Network\n$VN1GatewaySubnet = Get-AzVirtualNetworkSubnetConfig -Name 'GatewaySubnet' -VirtualNetwork $VirtualNetwork1\n\n# Specify the details of the IP Config for the Virtual Network Gateway\n$IpConfigurations1 = New-AzVirtualNetworkGatewayIpConfig -Name 'IpConfigurations1' -Subnet $VN1GatewaySubnet -PublicIpAddress $PublicIP1\n\n# Create the Virtual Network Gateway - This can take a few minutes to complete\nNew-AzVirtualNetworkGateway -Name 'VNGateWay1' `\n    -ResourceGroupName 'ResourceGroup1' `\n    -Location 'uksouth' `\n    -IpConfigurations $IpConfigurations1  `\n    -GatewayType 'Vpn' `\n    -VpnType 'RouteBased' `\n    -GatewaySku 'VpnGw2' `\n    -VpnGatewayGeneration 'Generation2'\n</code></pre>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#run-on-your-local-computer","title":"Run on Your Local Computer","text":"<pre><code># Create Root Certificate\n$RootCert = New-SelfSignedCertificate -Type Custom -KeySpec Signature `\n    -Subject 'CN=AzureVirtualGateway1RootCert' -KeyExportPolicy Exportable `\n    -HashAlgorithm sha512 -KeyLength 4096 `\n    -CertStoreLocation 'Cert:\\CurrentUser\\My' -KeyUsageProperty Sign -KeyUsage CertSign `\n    -NotAfter (Get-Date).AddYears(10)\n\n# Create Client Certificate\n$ClientCert = New-SelfSignedCertificate -Type Custom -DnsName 'AzureVirtualGateway' -KeySpec Signature `\n    -Subject 'CN=AzureVirtualGateway1ClientCert' -KeyExportPolicy Exportable `\n    -HashAlgorithm sha512 -KeyLength 4096 `\n    -CertStoreLocation 'Cert:\\CurrentUser\\My' `\n    -Signer $RootCert -TextExtension @('2.5.29.37={text}1.3.6.1.5.5.7.3.2') `\n    -NotAfter (Get-Date).AddYears(10)\n\n# Get the RAW content of the Root certificate for upload to Azure - will be copied to your clipboard\n[System.Convert]::ToBase64String($RootCert.RawData) | clip\n\n# Export the Client certificate with private keys as PFX file\nExport-PfxCertificate -Cert $ClientCert `\n-FilePath \".\\P2SClientCert.pfx\" `\n-Password $(ConvertTo-SecureString -String \"123\" -Force -AsPlainText) -CryptoAlgorithmOption AES256_SHA256 -Force\n</code></pre>"},{"location":"Azure/How%20to%20Securely%20Connect%20to%20Azure%20VMs%20and%20Use%20RDP/#run-on-azure-cloud-powershell_1","title":"Run on Azure Cloud PowerShell","text":"<pre><code>$p2srootcert = \"&lt;Root certificate's .cer file's content that is between -----BEGIN CERTIFICATE----- and -----END CERTIFICATE-----&gt;\"\n\n$RootCertificateAzure = New-AzVpnClientRootCertificate -PublicCertData $p2srootcert -Name 'VPNRootCertificate'\n\n$Gateway = Get-AzVirtualNetworkGateway -ResourceGroupName 'ResourceGroup1' -Name 'VNGateWay1'\n\nSet-AzVirtualNetworkGateway -VirtualNetworkGateway $Gateway `\n    -VpnClientRootCertificate $RootCertificateAzure `\n    -VpnClientAddressPool '20.20.0.0/16' `\n    -VpnAuthenticationType 'Certificate' `\n    -VpnClientProtocol 'SSTP', 'IkeV2'\n\n# Download the VPN client using Azure CLI command\naz network vnet-gateway vpn-client generate --resource-group ResourceGroup1 --name VNGateWay1\n</code></pre>  \u26a1 Click/Tap here for info about Cmdlets used in the PowerShell commands \u26a1  <ul> <li><p>Get-AzLocation</p> </li> <li><p>New-AzResourceGroup</p> </li> <li><p>New-AzVirtualNetwork</p> </li> <li><p>Get-AzVirtualNetwork</p> </li> <li><p>Add-AzVirtualNetworkSubnetConfig</p> </li> <li><p>Set-AzVirtualNetwork</p> </li> <li><p>New-AzVirtualNetworkGateway</p> </li> <li><p>New-AzVirtualNetworkGatewayIpConfig</p> </li> <li><p>Get-AzVirtualNetworkSubnetConfig</p> </li> <li><p>Get-AzPublicIpAddress</p> </li> <li><p>New-AzPublicIpAddress</p> </li> <li><p>New-AzVpnClientRootCertificate</p> </li> <li><p>Get-AzVirtualNetworkGateway</p> </li> <li><p>Set-AzVirtualNetworkGateway</p> </li> <li><p>New-SelfSignedCertificate</p> </li> <li><p>Export-PfxCertificate</p> </li> <li><p>az network vnet-gateway vpn-client</p> </li> </ul> <p></p>"},{"location":"GitHub/Cloning%20Personal%20and%20Enterprise%20Repositories%20Using%20GitHub%20Desktop/","title":"Cloning Personal and Enterprise Repositories Using GitHub Desktop","text":"<p>GitHub Desktop enables you to effortlessly clone and manage repositories using a user-friendly graphical interface. GitHub offers various types of repositories, such as personal, Enterprise Cloud and Enterprise Server (Self-Hosted). All of them can either be configured as public or private.</p> <p>Cloning a GitHub Enterprise Cloud repository differs from cloning a personal repository. GitHub personal repositories necessitate you to provide the clone URL or simply authenticate with your personal GitHub account credentials.</p> <p>GitHub Enterprise Cloud repositories, however, require SSO (Single Sign-On) claim to be added to GitHub Desktop before you can access those repositories. GitHub Desktop runs a loopback token collection server when you sign in.</p> <p>If you attempt to sign in without SSO claim, it will be absent from the GitHub Desktop app and you will not be able to clone GitHub Enterprise Cloud repositories.</p> <p>At this point, you have to:</p> <ol> <li>Sign out of GitHub Desktop</li> <li>Go to GitHub.com</li> <li>Use the \"Single Sign-on\" link at the top to sign in to your Enterprise Cloud</li> <li>Now go back again to GitHub Desktop -&gt; Options</li> <li>Use the Sign in button; The browser will be opened and this time when you sign in to GitHub Desktop, the SSO claim to your existing account that grants you access to Enterprise Cloud repositories will be appended as well.</li> </ol> <p></p>"},{"location":"GitHub/Git%20GitHub%20Desktop%20and%20Mandatory%20ASLR/","title":"Git GitHub Desktop and Mandatory ASLR","text":"<p>Git executables are among few poorly written programs that have problem with Mandatory ASLR (Address Space Layout Randomization) Exploit protection feature. When you turn on Mandatory ASLR in Microsoft Defender (which is off by default), those executables fail to run.</p> <p>The same Git executables are bundled with GitHub desktop app. In order to use Git in Visual Studio Code or use GitHub desktop app, we need to exclude Git executables from Mandatory ASLR and let them bypass it. Executables can be excluded from Mandatory ASLR rebootlessly.</p> <p>You can use the following PowerShell commands to automatically add all Git executables bundled with GitHub desktop or Git itself, to the exclusion for Mandatory ASLR</p> <p></p>"},{"location":"GitHub/Git%20GitHub%20Desktop%20and%20Mandatory%20ASLR/#for-github-desktop-git-binaries","title":"For GitHub desktop Git binaries","text":"<pre><code>Get-ChildItem -Recurse -Path \"C:\\Users\\$env:username\\AppData\\Local\\GitHubDesktop\\*\\resources\\app\\git\\*.exe\" | ForEach-Object -Process { Set-ProcessMitigation -Name $_.Name -Disable ForceRelocateImages }\n</code></pre>"},{"location":"GitHub/Git%20GitHub%20Desktop%20and%20Mandatory%20ASLR/#for-git-binaries-installed-using-standalone-installer","title":"For Git binaries installed using standalone installer","text":"<pre><code>Get-ChildItem -Recurse -File -Path 'C:\\Program Files\\Git\\*.exe' | ForEach-Object -Process { Set-ProcessMitigation -Name $_.Name -Disable ForceRelocateImages }\n</code></pre>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/","title":"Signed and Verified commits with GitHub desktop","text":"<p>Web commits, the commits you perform using GitHub website, are automatically verified, but the ones you do from GitHub desktop need to be manually signed.</p>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#signing-using-gpg-key","title":"Signing using GPG key","text":""},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#setting-up-gpg","title":"Setting up GPG","text":"<p>Download gpg4win from their official website</p> <p>(suggested by GitHub too)</p> <p>Begin the installation, choose to only install GnuPG and Kleopatra, don't need any other component.</p> <p></p> <p>After installation, open Kleopatra and create a new GPG key pair by selecting \"New Key Pair\"</p> <p></p> <p>Enter your real name and the email address that is added as one your verified email addresses in your GitHub account settings.</p> <p>Select advanced settings and here you can optionally check the box next to \"Authentication\" and also increase the validity period of your GPG key.</p> <p></p> <p>Choosing a passphrase is not mandatory.</p> <p>Export the public key by right-clicking on the GPG key and selecting Export. Open the exported file in Notepad or VS code, copy its content and paste it in your GitHub profile's GPG key section so it can be added as a new GPG key to your GitHub account.</p>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#configuring-gitconfig-file","title":"Configuring .gitconfig file","text":"<p>Assuming GitHub desktop is installed and logged in on your system, open the <code>.gitconfig</code> file, usually located in User's folder, and add the following items to it.</p> <p>Add this section to the end of the file</p> <pre><code>[commit]\n  gpgsign = true\n</code></pre> <p>And then add this to the <code>[user]</code> section</p> <pre><code>signingkey = YourGPGSigningkeyID\n</code></pre> <p>Replace <code>YourGPGSigningkeyID</code> with your actual GPG key ID. You can get it from Kleopatra GUI in Key-ID column (enter them without spaces in the <code>.gitconfig</code> file) or you can get it from your GPG keys section in GitHub account settings, Key ID will be visible for you after adding your GPG public key.</p> <p>You can set the validity period of your GPG certificate to unlimited, set/change/remove its passphrase and other modifications. You can publish it on the GPG server too so others can look it up and verify it.</p> <p>Make sure you backup your secret key using Kleopatra and store it in a safe place, you can import it again on another machine to continue signing your GitHub commits. Public key doesn't need to be backed up as you can regenerate it again by importing the secret GPG key on a different machine.</p> <p>Now every time you commit using GitHub desktop, your commits will be signed. If your GPG key has a passphrase, you will be asked to enter it before committing and pushing in GitHub desktop, otherwise signing will happen automatically. Your repository commit history on GitHub website will show verified badge next to them.</p> <p></p>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#how-to-restore-gpg-for-commit-signing-using-your-current-key-on-a-new-environment","title":"How to restore GPG for commit signing using your current key on a new environment","text":"<ol> <li>Install GitHub desktop and log in with your GitHub account</li> <li>Configure the .gitconfig file as explained above</li> <li>install gpg4win as explained above</li> <li>Open Kleopatra GUI and use the Import button to import your GPG secret key backup to the program. You can also double-click on your GPG secret key backup file and add it to the program that way.</li> <li>Start committing and pushing changes to your repository using GitHub desktop app, your commits will have a verified badge on GitHub website commit history.</li> </ol>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#official-resources","title":"Official resources","text":"<p>Telling Git about your signing key</p> <p></p> <p></p>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#signing-using-ssh-key","title":"Signing using SSH key","text":""},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#generating-the-key-pair","title":"Generating the key pair","text":"<p>Run this command to create a new SSH key pair, using the provided email as a label. It should be one of the emails added to your account as a verified emails.</p> <pre><code>ssh-keygen -t ed25519 -C \"spynetgirl@outlook.com\"\n</code></pre> <p>Replace spynetgirl@outlook.com with your own email address</p> <p>When asked, enter a file name, don't need to specify a file extension (such as .txt). 2 files will be created in User folder. The one with <code>.pub</code> extension contains your public key, the other one contains your private keys. Both of them must be backed up and stored in a safe place.</p> <p>Set a passphrase when asked, not mandatory so you can just press enter when asked for a passphrase.</p> <p></p>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#configuring-ssh-windows-service","title":"Configuring SSH Windows service","text":"<pre><code>Set-Service -Name ssh-agent -StartupType Automatic\nSet-Service -Name ssh-agent -Status Running\n</code></pre> <p>First make sure you've moved the generated SSH key pair from the default User folder location and stored them somewhere else, can be OneDrive's personal vault, and then run the following command to add the private key of your SSH key pair to the SSH agent.</p> <pre><code>ssh-add \"Path/To/SSH/Privatekey\"\n</code></pre> <p>If you set a passphrase for your private key from previous steps then you'll be asked to enter it, otherwise you will see the successful message saying \"Identity added\".</p> <p></p>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#add-your-ssh-public-key-to-github-account","title":"Add your SSH public key to GitHub account","text":"<p>Open the file containing your SSH public key, which has a <code>.pub</code> extension, using a text editor such as Notepad or VS code, copy its content and paste it in your GitHub account settings and save.</p> <p></p>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#configuring-gitconfig-file_1","title":"Configuring .gitconfig file","text":"<p>Add these new sections to the end of your <code>.gitconfig</code> file. It's usually located in User folder <code>C:\\Users\\YourUserName</code></p> <pre><code>[gpg]\n    format = ssh\n[commit]\n    gpgsign = true\n</code></pre> <p>and add this to the <code>[user]</code> section to define your SSH public key, it's a direct path to that file.</p> <pre><code>signingkey = \"Path/To/SSH/SSHKey.pub\"\n</code></pre> <p>You must replace all of the normal backward slashes <code>\\</code> to forward slash <code>/</code> in your path, otherwise GitHub desktop throws an error.</p> <p>Now every time you commit using GitHub desktop, your commits will be signed. If your SSH key has a passphrase, you will be asked to enter it before committing and pushing in GitHub desktop, otherwise signing will happen automatically. Your repository commit history on GitHub website will show verified badge next to them.</p> <p></p>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#how-to-restore-ssh-for-commit-signing-using-your-current-key-on-a-new-environment","title":"How to restore SSH for commit signing using your current key on a new environment","text":"<ol> <li>Install GitHub desktop and log in with your GitHub account</li> <li>Configure the .gitconfig file as explained above</li> <li>Turn on the <code>ssh-agent</code> Windows service</li> <li>Add your SSH private key to <code>ssh-agent</code> using <code>ssh-add \"Path/To/SSH/Privatekey\"</code> command</li> <li>Start committing and pushing changes to your repository, your commits will have a verified badge on GitHub website commit history.</li> </ol>"},{"location":"GitHub/Signed%20and%20Verified%20commits%20with%20GitHub%20desktop/#official-resources_1","title":"Official resources","text":"<p>Telling Git about your SSH key</p> <p>Key-based authentication in OpenSSH for Windows</p> <p>About commit signature verification</p> <p>Adding a new SSH key to your GitHub account</p> <p>Generating a new SSH key and adding it to the ssh-agent</p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/","title":"Harden Windows Security Module","text":"<p>It is a PowerShell module that can apply all of the hardening measures described in the readme. It also offers rigorous compliance verification and security assessment. It enables you to evaluate the conformity of your system based on the security standards and recommendations of this repository. The module employs various techniques such as Security Policy, PowerShell cmdlet and Registry keys to conduct the checks.</p> <p>It is also useful for security researchers and penetration testers who want to assess their system security posture. The module works with any system locale and language.</p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#automatic-updates","title":"Automatic Updates","text":"<p>The module checks for updates every time you run it and updates itself if there is a new version available, so you don't have to manually do anything.</p> <p></p> <p></p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#how-to-install-and-use","title":"How to Install and Use","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#install-the-harden-windows-security-module-from-powershell-gallery","title":"Install the Harden Windows Security Module from PowerShell Gallery","text":"<pre><code>Install-Module -Name 'Harden-Windows-Security-Module' -Force\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#use-the-gui-graphical-user-interface","title":"Use the GUI (Graphical User Interface)","text":"<pre><code>Protect-WindowsSecurity -GUI\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#apply-the-hardening-measures-described-in-the-readme","title":"Apply the Hardening measures described in the Readme","text":"<pre><code>Protect-WindowsSecurity\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#perform-compliance-check","title":"Perform Compliance Check","text":"<pre><code>Confirm-SystemCompliance\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#remove-the-hardening-measures-described-in-the-readme","title":"Remove the Hardening Measures Described in The Readme","text":"<pre><code>Unprotect-WindowsSecurity\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#uninstall-the-harden-windows-security-module","title":"Uninstall the Harden Windows Security Module","text":"<pre><code>Uninstall-Module -Name 'Harden-Windows-Security-Module' -Force -AllVersions\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#quick-demo","title":"Quick Demo","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#youtube-demo-of-the-modules-gui","title":"YouTube demo of the Module's GUI","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#protect-windowssecurity","title":"Protect-WindowsSecurity","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#syntax","title":"Syntax","text":"<pre><code>Protect-WindowsSecurity\n    [-GUI]\n    [-Categories &lt;String[]&gt;]\n    [-Log]\n    [-Offline]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#description","title":"Description","text":"<p>The <code>Protect-WindowsSecurity</code> cmdlet's hybrid design allows it to operate as a standalone script and as a module component. It allows it to operate with and without administrator privileges. You can use this cmdlet in both interactive and non-interactive modes.</p> <p>In Interactive mode, the cmdlet will ask you to confirm the changes before applying them. In non-interactive mode, you can pre-configure the hardening categories you want to apply and the cmdlet will apply them without asking for confirmation.</p> <p>It possesses the ability to operate entirely in isolation, useful for systems or servers that are disconnected from the Internet.</p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#parameters","title":"Parameters","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-gui","title":"-GUI","text":"<p>Shows a graphical user interface (GUI) that allows you to select the hardening categories you want to apply.</p>   | Type: |[SwitchParameter](https://learn.microsoft.com/en-us/dotnet/api/system.management.automation.switchparameter)| | :-------------: | :-------------: | | Position: | Named | | Default value: | None | | Required: | False | | Accept pipeline input: | False | | Accept wildcard characters: | False |"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-categories","title":"-Categories","text":"<p>Specify the hardening categories that you want to apply. This will tell the module to operate in non-interactive or headless/silent mode which won't ask for confirmation before running each selected categories.</p> <p>You can specify multiple categories by separating them with a comma. If you don't specify any category, the cmdlet will run in interactive mode. Use this parameter for deployments at a large scale.</p> <p>If a selected category requires Administrator privileges and the module is running with Standard privileges, that category is skipped.</p> <p>This parameter has automatic tab completion. You can press the <code>Tab</code> key to see the available categories.</p> Type: String[] Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-verbose","title":"-Verbose","text":"<p>Shows verbose messages on the console about what the cmdlet is doing.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-log","title":"-Log","text":"<p>Activates comprehensive logging by recording all the information shown on the screen and some additional data to a text file. It is strongly advised to use the -Verbose parameter when you want to enable logging.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-logpath","title":"-LogPath","text":"<p>The path to save the log file to. If not specified, the log file will be saved in the current working directory.</p> <p>Note</p> <p>Only available if the <code>-Log</code> switch is used.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-offline","title":"-Offline","text":"<p>Indicates that the module is being run in offline mode. Will not download any files from the internet. Will not check for updates. Using this parameter will make the following 3 parameters available and mandatory: <code>PathToLGPO</code>, <code>PathToMSFTSecurityBaselines</code> and <code>PathToMSFT365AppsSecurityBaselines</code>.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-pathtolgpo","title":"-PathToLGPO","text":"<p>The path to the 'LGPO.zip'. Make sure it's in the zip format just like it's downloaded from the Microsoft servers. File name can be anything. The parameter has argument completer so you can press tab and use the file picker GUI to select the zip file.</p> <p>Note</p> <p>Only available if the <code>-Offline</code> switch is used.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-pathtomsftsecuritybaselines","title":"-PathToMSFTSecurityBaselines","text":"<p>The path to the 'Windows Security Baseline.zip'. Make sure it's in the zip format just like it's downloaded from the Microsoft servers. File name can be anything. The parameter has argument completer so you can press tab and use the file picker GUI to select the zip file.</p> <p>Note</p> <p>Only available if the <code>-Offline</code> switch is used.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-pathtomsft365appssecuritybaselines","title":"-PathToMSFT365AppsSecurityBaselines","text":"<p>The path to the 'Microsoft 365 Apps for Enterprise zip'. Make sure it's in the zip format just like it's downloaded from the Microsoft servers. File name can be anything. The parameter has argument completer so you can press tab and use the file picker GUI to select the zip file.</p> <p>Note</p> <p>Only available if the <code>-Offline</code> switch is used.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p>Note</p> <p>You can further control the sub-categories of each category by using the following switch parameters. Pay attention to the naming convention of them. They are named after the category they belong to. For example, the switch parameter <code>-MSFTDefender_SAC</code> belongs to the <code>MicrosoftDefender</code> category. The switch parameters are dynamic and will only appear if you specify the corresponding category in the <code>-Categories</code> parameter. For example, if you don't specify the <code>MicrosoftDefender</code> category in the <code>-Categories</code> parameter, the switch parameters related to it won't appear. The following table shows the available switch parameters and their corresponding categories.</p> <p></p> Parameter Name Description Required Category -SecBaselines_NoOverrides Applies the Microsoft Security Baselines without the optional overrides MicrosoftSecurityBaselines -MSFTDefender_SAC Enables Smart App Control MicrosoftDefender -MSFTDefender_NoDiagData Will not enable optional diagnostics data required for Smart App Control (Does not have any effect if Smart App Control is already turned on) MicrosoftDefender -MSFTDefender_NoScheduledTask Will not create scheduled task for fast MSFT driver block rules MicrosoftDefender -MSFTDefender_BetaChannels Set Defender Engine and Intelligence update channels to beta MicrosoftDefender -LockScreen_CtrlAltDel Require CTRL + ALT + Delete at lock screen LockScreen -LockScreen_NoLastSignedIn Will not display the last signed in user at the lock screen LockScreen -UAC_NoFastSwitching Hide entry points for fast user switching UserAccountControl -UAC_OnlyElevateSigned Only elevate signed and validated executables UserAccountControl -CountryIPBlocking_OFAC Include the IP ranges of OFAC Sanctioned Countries in the firewall block rules CountryIPBlocking <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#what-if-you-dont-configure-the-sub-categories","title":"What if You Don\u2019t Configure the Sub-Categories?","text":"<p>If you do not specify any sub-categories using the switch parameters above, the following sub-category configuration will be applied when the corresponding category exists in the <code>-Categories</code> parameter.</p> <p></p> Indicator Sub-Category Status Is Applied Is Not Applied <p></p> <ul> <li>Windows Boot Manager Revocations</li> <li>Microsoft Security Baselines<ul> <li> Yes, With the Optional Overrides (Recommended)</li> <li> Yes</li> </ul> </li> <li>Microsoft 365 Apps Security Baselines</li> <li>Microsoft Defender<ul> <li> Smart App Control enablement</li> <li> Enable advanced diagnostic data if Smart App Control is on</li> <li> Scheduled task creation for fast weekly MSFT driver block list update</li> <li> Set engine and intelligence update channels to beta</li> </ul> </li> <li>Attack Surface Reduction Rules</li> <li>BitLocker Settings<ul> <li> Normal: TPM + Startup PIN + Recovery Password</li> <li> Enhanced: TPM + Startup PIN + Startup Key + Recovery Password</li> <li> Skip encryptions altogether</li> </ul> </li> <li>TLS Security</li> <li>Lock Screen<ul> <li> Don't display last signed-in</li> <li> Require CTRL + ALT + DEL on lock screen</li> </ul> </li> <li>User Account Control<ul> <li> Only elevate signed and validated executables</li> <li> Hide the entry points for Fast User Switching</li> </ul> </li> <li>Windows Firewall</li> <li>Optional Windows Features</li> <li>Windows Networking</li> <li>Miscellaneous Configurations</li> <li>Windows Update Configurations</li> <li>Edge Browser Configurations</li> <li>Certificate Checking Commands</li> <li>Country IP Blocking<ul> <li> Block State Sponsors of Terrorism IP blocks</li> <li> Block OFAC Sanctioned Countries IP blocks</li> </ul> </li> <li>Downloads Defense Measures</li> <li>Non-Admin Commands</li> </ul> <p></p> <p>Tip</p> <p>It is highly recommended to always include the Microsoft Security Baselines category and place it first as it forms the foundation of all subsequent categories.</p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#examples","title":"Examples","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#example-1","title":"Example 1","text":"<p>If you run the module like this without specifying any categories, the module will run in interactive mode and the usual beautiful prompts will be displayed to the user.</p> <pre><code>Protect-WindowsSecurity\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#example-2","title":"Example 2","text":"<p>If you run the module like this, the 2 categories will be executed automatically without requiring any user input. The results will be displayed on the console.</p> <pre><code>Protect-WindowsSecurity -Categories MicrosoftDefender, AttackSurfaceReductionRules\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#example-3","title":"Example 3","text":"<p>This example will apply the Microsoft Defender category with the Smart App Control sub-category, without the need for user interaction, and will show verbose messages.</p> <pre><code>Protect-WindowsSecurity -Categories MicrosoftDefender -MSFTDefender_SAC -Verbose\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#example-4","title":"Example 4","text":"<p>This example will apply the Microsoft Security Baselines, BitLocker, User Account Control, Lock Screen and Downloads Defense Measures categories. It will also apply the \"Only Elevate Signed and Validated Executables\" sub-category of the User Account Control category, and the \"Require CTRL + ALT + DEL on Lock Screen\" sub-category of the Lock Screen category.</p> <pre><code>Protect-WindowsSecurity -Categories MicrosoftSecurityBaselines,BitLockerSettings,UserAccountControl,LockScreen,DownloadsDefenseMeasures -UAC_OnlyElevateSigned -LockScreen_CtrlAltDel\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#example-5","title":"Example 5","text":"<p>This example instructs the cmdlet to run in offline mode and will not download any files from the internet. It also runs it in headless/silent mode by specifying which categories to automatically run. <code>-MSFTDefender_SAC</code> switch is used so the Smart App Control sub-category is also applied in the headless/silent mode. <code>-Log</code> switch is mentioned which will save the output of the cmdlet to a text file in the current working directory.</p> <pre><code>Protect-WindowsSecurity -Verbose -Offline -PathToLGPO 'C:\\Users\\Admin\\Desktop\\LGPO.zip' -PathToMSFTSecurityBaselines 'C:\\Users\\Admin\\Desktop\\Baselines.zip' -PathToMSFT365AppsSecurityBaselines 'C:\\Users\\Admin\\Desktop\\M365Baselines.zip' -Log -Categories MicrosoftSecurityBaselines,MicrosoftDefender -MSFTDefender_SAC\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#example-6","title":"Example 6","text":"<p>This will display a GUI (Graphical UI) allowing you to easily select various options and categories to apply.</p> <pre><code>Protect-WindowsSecurity -GUI\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#confirm-systemcompliance","title":"Confirm-SystemCompliance","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#syntax_1","title":"Syntax","text":"<pre><code>Confirm-SystemCompliance\n    [-ExportToCSV]\n    [-ShowAsObjectsOnly]\n    [-DetailedDisplay]\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#description_1","title":"Description","text":"<p>This cmdlet verifies and validates all of the applied security measures. It checks registry keys if the module uses Group Policy or registry, PowerShell cmdlets if the module invokes them and Security Group Policy if the module applies them.</p> <p>Compliance checking strictly follows the guidelines and security measures of this GitHub repository. Any minor deviation from them will result in a <code>false</code> value for the corresponding check.</p> <p>Note</p> <p>Based on the score that you get you will see a different ASCII art!</p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#parameters_1","title":"Parameters","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-exporttocsv","title":"-ExportToCSV","text":"<p>In addition to displaying the results on the screen, also exports them in a nicely formatted CSV for easier viewing. The CSV is fully compatible with GitHub too so you can upload it to GitHub and view it.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-showasobjectsonly","title":"-ShowAsObjectsOnly","text":"<p>Instead of displaying strings on the console, outputs actionable objects and properties. You can use this parameter for when you need to store the output of the function in a variable and use it that way. This provides a very detailed nested object and suppresses the normal string output on the console.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-detaileddisplay","title":"-DetailedDisplay","text":"<p>Shows the output on the PowerShell console with more details and in the list format instead of table format</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#unprotect-windowssecurity-cmdlet","title":"Unprotect-WindowsSecurity Cmdlet","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#syntax_2","title":"Syntax","text":"<pre><code>Unprotect-WindowsSecurity\n    [-OnlyProcessMitigations]\n    [-OnlyDownloadsDefenseMeasures]\n    [-Force]\n</code></pre>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#description_2","title":"Description","text":"<p>You can use this cmdlet to remove all of the applied hardening measures, with the following exceptions:</p> <ul> <li> <p>Bitlocker Encrypted drives are not decrypted when you invoke this cmdlet.</p> </li> <li> <p>Security features related to Device Guard that are activated by UEFI Lock remain enabled even after you execute this cmdlet. Learn more here</p> </li> <li> <p>Windows optional features that are enabled or disabled by <code>Protect-WindowsSecurity</code> cmdlet are not affected.</p> </li> </ul>"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#parameters_2","title":"Parameters","text":""},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-onlyprocessmitigations","title":"-OnlyProcessMitigations","text":"<p>Indicates that the cmdlet will only remove Process Mitigations (Exploit Protection) settings and doesn't change anything else.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"Harden-Windows-Security-Module/Harden-Windows-Security-Module/#-onlydownloadsdefensemeasures","title":"-OnlyDownloadsDefenseMeasures","text":"<p>Indicates that the cmdlet will only remove the Downloads Defense Measures WDAC policy from the system and doesn't change anything else.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p> <p></p> <p>Any feedback or suggestions? Please use GitHub issues or discussions</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/","title":"About TLS, DNS, Encryption and OPSEC concepts","text":"<p>The contents here are for beginners, to learn the basics of TLS, encrypted connections and some preliminary OPSEC (Operational security) concepts.</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#dns","title":"DNS","text":"<p>Let's talk about DNS first. Whether you are using Secure DNS such as DNS over HTTPS or using plain text DNS (Default port: 53), the domain name is the only piece of information that the DNS server provider will see. DNS does not deal with URLs, only domain names.</p> <p>E.g., in this URL, anything after the first <code>/</code> is inaccessible to the DNS server.</p> <pre><code>Github.com/HotCakeX/Harden-Windows-Security\n</code></pre> <p>The DNS provider will know that you are accessing GitHub.com but won't know which repository on GitHub.com you are visiting.</p> <ul> <li> <p>DNS doesn't resolve URLs, only enables the DNS client to find the IP Address of the server part of the URL, the rest is handled by HTTP protocol/request. The part before the slash is the DNS-provided hostname or an ordinary IP address. The part after the slash indicates the application on that host. DNS does not deal with anything after the slash at all.</p> </li> <li> <p>Anything in the URL that is not domain name is encrypted as part of the HTTP request, which uses TLS for encryption and that's why it's HTTPS. They are invisible to the DNS server and anyone else other than the webserver hosting the website you are visiting.</p> </li> <li> <p>Extra info</p> </li> <li> <p>Extra info</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#about-dns-leak-in-plain-text-dns","title":"About DNS Leak in plain text DNS","text":"<p>When you are using VPN or proxies, it's important to make sure there is no DNS leakage. Properly implemented and configured VPNs/Proxies don't have this problem.</p> <p>The most practical way to see if you have DNS leak while using a VPN/Proxy is to use Wireshark to monitor your outbound connections on the edge of your network. Simply type <code>dns</code> in the Wireshark's display filter bar and observe the results. If you are using a proper VPN/Proxy or if you are using Secure DNS such as DoH or DoT, then you shouldn't see any results because that keyword only displays plain text DNS over the default port 53.</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#dns-security","title":"DNS Security","text":"<p>DNSSEC by itself without using DoH/DoT can be downgraded. If you're using DoH or DoT you must be safe as long as you are using a trusted DNS provider and your certificate authority storage is not poisoned/compromised.</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#certificates-and-tls","title":"Certificates and TLS","text":"<p>Certain countries with dictatorship or theocracy governments make people install their own root certificate to perform TLS-termination and view their data in plain-text even when HTTPS is being used. One example is what happened in Kazakhstan.</p> <p>Certain applications install root certificates, such as 3rd party antiviruses. They are all equally dangerous and must be avoided.</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#dns-privacy","title":"DNS Privacy","text":"<p>Using DNS-over-TLS or DNS-over-HTTPS mitigates some privacy leaks, because now the ISP won't have the domain you are visiting, but only the IP address. It's possible that more than one site uses the same IP address, so in some cases, it's not possible to say for sure that you are visiting SiteA.com when SiteB.com shares the same IP (Unless you are using TLS v1.2 which leaks Certificate's common name, more on that later), and high-traffic sites usually employ a CDN (content delivery network) to distribute traffic, and the IP they use are not the site's IP, but an IP belonging to the CDN (like CloudFlare or Akamai).</p> <p>Website owners use CDNs like Cloudflare for two purposes:</p> <ol> <li> <p>Best user response time by using the nearest server.</p> </li> <li> <p>Load-balancing in case of the nearest server being overloaded (DDoS and more) and then pointing to the next-nearest server.</p> </li> </ol> <p>Browsers such as Microsoft Edge only support DNS over HTTPS. Windows supports DNS over HTTPS and DNS over TLS.</p> <p>DNS over HTTPS is preferred because by default it uses the same port 443 as the rest of the HTTPS traffic on the Internet, that makes it harder to be detected and blocked. DNS over TLS on the other hand uses TCP port 853 by default and a filter on that port would block DNS over TLS entirely, whereas blocking port 443 is impractical as it essentially cripples the entire Internet.</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#dns-caching","title":"DNS Caching","text":"<p>DNS caches, just like DNS itself, only map domain names to values ('A' records), never the other way around.</p> <p>Both the DNS cache, and the DNS system as a whole, only care that bing.com points to 1.2.3.4, not that the address \"points\" back.</p> <p>Entries in the DNS cache look exactly like entries in authoritative DNS servers, with domain name as the lookup key.</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#tls-security-in-windows","title":"TLS Security in Windows","text":"<p>Windows components (Tested on Windows 11 22H2) rely on TLS 1.2, and that makes them dependent on ECC Curves. So, when enforcing TLS 1.3 only for Schannel, Windows components stop working.</p> <p>TLS 1.3 cipher suites don't require ECC curves.</p> <p>NistP256 ECC curve is a must have, otherwise Windows update won't work.</p> <p>nistP521 is the best ECC curve in terms of security, but curve25519 is also the best non-Nist one, which is also secure and popular.</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#certificates","title":"Certificates","text":"<p>Handshake messages contain the certificates (both from server and client), and they are encrypted in TLS 1.3, which means that you cannot see these without breaking the encryption.</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#sni","title":"SNI","text":"<p>SNI, which is part of the handshake, is still unencrypted even in TLS v1.3. The only way to encrypt SNI is to use ECH (Encrypted Client Hello).</p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#opsec","title":"OPSEC","text":"<p>Assuming you are operating in a hostile country (E.g, China, Russia, Iran), you must be aware of the following information to keep your digital footprint minimal.</p> <p>There are 4 pieces of information that can reveal which websites/apps/services you use, to the ISP/government.</p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#dns_1","title":"DNS","text":"<p>Avoid using plain text DNS as much as you can. Use DNS over HTTPS for security and anonymity. Governments can block well-known servers quickly, you can however self-host on a private cloud or use a serverless DNS to have access to a new endpoint for DoH over a newly setup domain.</p> <p>If plain text DNS over port 53 is used, and you are not using a proper VPN like OpenVPN or WireGuard, or you are using proxy, then eavesdropper can see the website domain/sub-domain you are visiting. If you use secure DNS like DNS over HTTPS, then DNS becomes fully encrypted and all they can see is the domain name of the Secure DNS server as well as the IP addresses of the websites you connect to.</p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#certificate-common-name-etc","title":"Certificate (common name etc.)","text":"<p>Use TLS v1.3. When using TLS v1.3, the certificate part of the HTTPS connection is encrypted and none of its details are visible to the eavesdropper. TLS v1.2 handshakes do not encrypt the certificates, resulting in the common name and the website you are visiting to be revealed to the eavesdropper.</p> <p>Read more</p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#url","title":"URL","text":"<p>The full path to a web page or web resource is sent over HTTP protocol, so if website uses HTTPS, it's all encrypted.</p> <p>When using\u202fHTTPS, the path and query string (everything after TLD and slash /) is encrypted and not available to anybody but the client and server, the answer is encrypted as well.</p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#sni-server-name-indication-or-client-hello","title":"SNI (Server Name Indication or Client Hello)","text":"<p>This is the most important part. Even after using:</p> <ol> <li> <p>HTTPS to encrypt the full URL path</p> </li> <li> <p>DoH to encrypt the DNS</p> </li> <li> <p>TLS v1.3 to encrypt the certificate</p> </li> </ol> <p>If you don't use a proper VPN, SNI can still reveal the domain and sub-domain of the website you are visiting to the eavesdropper. To secure that, the browser and the website must support ECH (Encrypted Client Hello) or use proper VPN like OpenVPN or WireGuard.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/About%20TLS%2C%20DNS%2C%20Encryption%20and%20OPSEC%20concepts/#wireshark","title":"Wireshark","text":"<p>Interesting and useful columns to add to the Wireshark GUI for better visibility into your network connections:</p> <ul> <li> <p>Use <code>tls.handshake.type == 11</code> to filter certificates, only works for TLS v1.2 and below since they don't encrypt that part of the handshake.</p> </li> <li> <p>Use <code>ssl.handshake.extension.type == \"server_name\"</code> to filter SNI or Server Name Indication. More info (When using VPN, you either shouldn't be seeing any SNI at all or only see the SNI that belongs to the VPN server's domain.)</p> </li> <li> <p>Cipher Suites is also an interesting column to add to your Wireshark profile.</p> </li> </ul>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/","title":"BitLocker, TPM and Pluton","text":""},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#introduction","title":"Introduction","text":"<p>The optimal kind of security measure is imperceptible to the user during deployment and usage. Whenever there is a potential delay or difficulty due to a security feature, there is a high probability that users will attempt to circumvent security. This situation is particularly prevalent for data protection, and that is a scenario that organizations need to prevent. Whether intending to encrypt entire volumes, removable devices, or individual files, Windows satisfies these requirements by providing streamlined, usable solutions. BitLocker Device Encryption safeguards the system by seamlessly implementing device-wide data encryption.</p> <p></p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#bitlocker-and-virtual-hard-disks-such-as-vhdx","title":"BitLocker and Virtual Hard Disks such as VHDX","text":"<p>When using VHDX native boot, you can employ BitLocker to encrypt the drives that reside in it, they will be equally secure. In the native VHDX boot scenario, the decryption keys are still retained in the TPM, precluding an offline attack against the stored data. BitLocker still operates the same as it does on a normal installed system.</p> <p></p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#a-discourse-on-the-modes-and-methods-of-protection-from-physical-intrusions","title":"A Discourse on the Modes and Methods of Protection from Physical Intrusions","text":""},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#bitlocker-with-tpm","title":"BitLocker With TPM","text":"<p>BitLocker with TPM only, uses PCRs, if the hashes are the same the decryption key is released. With TPM only mode, a threat actor can access the secret data when it is released and can obtain the decryption key when the TPM releases it automatically.</p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#bitlocker-with-tpm-and-startup-key","title":"BitLocker With TPM and Startup Key","text":"<p>With a Startup PIN, a PIN is required before the secret material is released. This thwarts a jumper cable attack where a threat actor can directly access the secret material from the TPM. Therefore, the only security benefit a PIN would provide during the boot sequence is a physical attack prevention.</p> <p>If you are a threat actor and the system lacks a Startup PIN, the disk remains encrypted even when you boot it to the logon screen where authentication is required via Windows Hello credential providers. Conversely, when you use a Startup PIN and enter it correctly, the disk stays encrypted until you authenticate at the logon screen.</p> <p>When BitLocker is activated, the disk is constantly encrypted. It is irrelevant whether you utilize a Startup PIN, or you operate in TPM only mode or you employ a smart card to unlock it. However, a Startup PIN is invariably recommended as a deterrent mechanism against physical attacks.</p> <p></p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#the-power-of-bitlocker-and-tpm-against-offline-and-side-channel-attacks","title":"The Power of BitLocker and TPM Against Offline and Side Channel Attacks","text":"<p>Now there is the in-band versus out of band security system paradigm we need to discuss. For instance, Windows login screen is in-band and TPM is out of band.</p> <p>The TPM is used to deter side channel attacks while login screen is to deter brute force/cryptographic attacks. Windows Hello, which is a very robust system, is TPM backed just like BitLocker.</p> <p>BitLocker is to prevent offline attacks primarily, secondarily it is to prevent data loss. If you can alter the Windows operating system files while it is offline, it has no means to protect itself. That is why BitLocker exists to impede tampering while the system is offline. Most people assume it is used for data loss prevention; in reality the primary defense capability is tampering with OS files.</p> <p>I can guarantee breach into any operating system that has an unencrypted disk, and I don\u2019t have to use any zero days or exploit code.</p> <p>BitLocker is a transparent drive encryption technology operating below the file system level and BitLocker encrypted disks always remain encrypted even after Windows Hello authentication and unlocking the OS.</p> <p></p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#how-do-the-bitlocker-key-protectors-work","title":"How Do The BitLocker Key Protectors Work?","text":"<p>BitLocker key protectors safeguard the encryption key, which encrypts and decrypts the data on the disk. BitLocker provides various key protectors and allows using multiple key protectors simultaneously. However, some key protectors must be combined with other key protectors to attain the required level of security.</p> <p>Suppose you want your BitLocker encrypted drive to demand a PIN at Startup, need TPM for verification, and also necessitate a USB flash drive to be plugged in. In this document, you can see there is a <code>-StartupKeyProtector</code> option for the USB flash drive, <code>-TPMProtector</code> option for TPM, and a <code>-Pin</code> option for the PIN.</p> <p>Using those parameters individually will not mandate all 3 key protectors to be used concurrently. It will only oblige one of them to be used. So you will have to either enter the PIN, have the disk connected to the same computer (TPM) or have the USB flash drive plugged in, but all 3 of them are not enforced.</p> <p>If you want to enforce a multifactor authentication, you need to use the following command</p> <pre><code>Add-BitLockerKeyProtector -MountPoint C: -TpmAndPinAndStartupKeyProtector\n</code></pre> <p>This time, all 3 key protectors are essential to unlock the drive. You will have to enter the PIN, have the disk connected to the same computer (TPM), and have the USB flash drive plugged in.</p> <p></p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#pluton-the-ultimate-security-chip","title":"Pluton, The Ultimate Security Chip","text":"<p>One of the most formidable technologies that is impervious to tampering, jumper cable or other vulnerabilities is the Pluton chip. The same technology that has been employed in Xbox to stop even the most sophisticated physical attacks.</p> <p>Pluton is a dedicated physical chip that runs on Azure sphere architecture. It is very much out of band and is technically physically on the same die as the CPU, but the CPU has no control over it at all because it has its own dedicated self-maintaining operating system.</p> <p>A firmware based TPM is reliant on the CPU to emulate it, Pluton is not dependent on the CPU to emulate it or run it. Pluton is completely self-sufficient which implies that it is out of band. dTPM (discrete TPMs) are usually more susceptible than fTPMs (Firmware based TPMs).</p> <p>Pluton addresses security needs like booting an operating system securely even against firmware threats and storing sensitive data safely even against physical attacks.</p> <p></p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#conclusion","title":"Conclusion","text":"<p>We learned how important it is to use BitLocker and protect our data at rest. The Harden Windows Security repository employs BitLocker to encrypt the operation system drive and optionally any other drives that user chooses to. It utilizes the most secure configuration and military grade encryption algorithm, XTS-AES-256, TPM 2.0 and Start-up PIN.</p> <p></p>"},{"location":"Miscellaneous/BitLocker%2C%20TPM%20and%20Pluton%20What%20Are%20They%20and%20How%20Do%20They%20Work/#continue-reading","title":"Continue Reading","text":"<ul> <li>Overview of BitLocker device encryption</li> <li>BitLocker FAQ</li> <li>Personal Data Encryption (PDE)</li> </ul>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/","title":"Comparison of security benchmarks","text":"<p>I conducted a thorough analysis of some of the prominent security benchmarks/guidelines for my GitHub repository and I discovered some fascinating insights. By analysis, I mean that I examined every single recommendation in them and compared them with my own suggestions and Microsoft Security Baselines.</p> <p>The majority of the recommendations in the security benchmarks align with the Microsoft Security Baselines, which are a set of best practices for securing various products and services. Only a small fraction of the recommendations deviate from the baselines, and they are either additional enhancements (rarely), redundant suggestions or erroneous advice that undermine security!</p> <p>For my reviews I used the latest available version of each benchmark.</p> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#some-of-the-pitfalls-of-relying-on-third-party-benchmarks","title":"Some of the Pitfalls of Relying on Third-Party Benchmarks","text":""},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#clipboard-sharing-from-guest-to-host","title":"Clipboard sharing from guest to host !","text":"<p>CIS 18.10.44.5 (L1) recommends allowing clipboard operation from an isolated session to the host, i.e. guest to host redirection, which is a highly insecure and irrational suggestion!</p> <p>These are their precise official words:</p> <p>Rationale: The primary purpose of Microsoft Defender Application Guard is to present a \"sandboxed container\" for visiting untrusted websites. If the host clipboard is made available to Microsoft Defender Application Guard, a compromised Microsoft Defender Application Guard session will have access to its content, potentially exposing sensitive information to a malicious website or application. However, the risk is reduced if the Microsoft Defender Application Guard clipboard is made accessible to the host, and indeed that functionality may often be necessary from an operational standpoint</p> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#renaming-built-in-administrator-and-guest-accounts","title":"Renaming built-in administrator and guest accounts !","text":"<p>Both CIS and STIG suggest altering the name of the built-in administrator and guest accounts as a security measure.</p> <p>This is futile as those built-in accounts can be readily identified by PowerShell, regardless of any modifications to its name or description (which I have done).</p> <p>For example, the <code>BUILTIN\\Administrator</code> account always has a relative identifier (RID) of <code>500</code>.</p> <pre><code>Get-LocalUser | Where-Object -FilterScript {$_.SID -like 'S-1-5-*-500'}\n</code></pre> <p>Thanks Elliot Huffman for suggesting the shorter command!</p> <pre><code>Add-Type -AssemblyName System.DirectoryServices.AccountManagement\n$principalContext = New-Object System.DirectoryServices.AccountManagement.PrincipalContext([System.DirectoryServices.AccountManagement.ContextType]::Machine)\n$userPrincipal = New-Object System.DirectoryServices.AccountManagement.UserPrincipal($principalContext)\n$searcher = New-Object System.DirectoryServices.AccountManagement.PrincipalSearcher\n$searcher.QueryFilter = $userPrincipal\n$searcher.FindAll() | Where-Object { $_.Sid -Like \"*-500\" } | Select-Object SamAccountName&lt;/details&gt;\n</code></pre> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#disabling-windows-hello-pin-and-using-traditional-passwords-instead","title":"Disabling Windows Hello PIN and using traditional passwords instead !","text":"<p>These benchmarks recommend disabling Windows Hello PIN and opting for passwords instead. Stig V-253423 and CIS 18.9.27.4.</p> <p>They argue that this is for domain accounts</p> <p>Their rationale, which is very wrong, is</p> <p>A PIN is created from a much smaller selection of characters than a password, so in most cases a PIN will be much less robust than a password.</p> <p>It is a grave security lapse to propose such a policy and then label the benchmark/guideline as \u201cCIS Microsoft Windows 11 Stand-alone Benchmark\u201d, highlighting that it is intended for stand-alone computers, while simultaneously suggesting to disable PIN for domain-joined devices. This is a glaring inconsistency and a perilous practice.</p> <p>The guideline/benchmark is fundamentally flawed if it presupposes that the computer is domain-joined, despite the label indicating that it is stand-alone. It also neglects to consider that some users may actually be stand-alone (home users that account for the majority of the users) or use Microsoft Entra ID, and this policy is nonsensical for them.</p> <p>STIG commits the same error, as it only provides a generic Windows 11 guideline/benchmark and recommends disabling Windows Hello PIN, without taking into account the factors mentioned above.</p> <p>You can read this Microsoft document to find out why a PIN is better than an online password</p> <p>There are proper policies regarding anti-hammering features that can enhance the security of PINs over passwords. I utilize them in my module and you can find them here.</p> <p>The benchmarks/guidelines seem to be uninformed of the fact that Windows allows multi-factor unlock, which can enforce a combination of PIN and biometric factors (plus more), to enforce PIN + Facial recognition OR PIN + Fingerprint etc.</p> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#bad-configuration-for-early-launch-anti-malware","title":"Bad configuration for Early Launch Anti Malware","text":"<p>CIS in 18.9.13.1</p> <p>The recommended state for this setting is: Enabled: Good, unknown and bad but critical</p> <p>That's not even a recommendation, that's the default value! If you use Harden Windows Security module it sets it to Good Only, which is the correct recommendation for a secure environment.</p> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#disabling-windows-error-reporting","title":"Disabling Windows Error reporting !","text":"<p>Their rationale is:</p> <p>...There is no benefit to the corporation to report these errors directly to Microsoft...</p> <p>Indeed, the corporation that uses the software benefits from it by reporting the problems. This exact way of thinking that leads to making such a policy is the reason why problems remain unsolved, because they are not reported to Microsoft and the IT staff of the companies are simply unable to resolve the problem themselves, since they are not the ones developing the OS.</p> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#disabling-cloud-protection","title":"Disabling Cloud Protection!","text":"<p>CIS 18.10.43.5.2 (L2), suggests disabling Cloud Protection of Microsoft Defender. This is precisely the kind of security measure that Threat Actors and advanced persistent threats (APTs) seek to disable and then CIS is suggesting to disable it, astonishing.</p> <p>This is an extremely important security feature that should never be disabled and there is no rationale that justifies disabling it. This feature also uses the Intelligent Security Graph (ISG).</p> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#not-enabling-important-attack-surface-reduction-rules","title":"Not enabling important Attack Surface Reduction rules","text":"<p>CIS in 18.10.43.6.1.2 (L1) intentionally leaves out very important ASR rules</p> <ol> <li>Use advanced protection against ransomware</li> <li>Block executable files from running unless they meet a prevalence, age, or trusted list criterion</li> <li>Block process creations originating from PSExec and WMI commands</li> </ol> <p>Rule #2 has the potential to prevent zero-days!</p> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#to-be-continued","title":"To be continued...","text":"<p>These benchmarks or guidelines have numerous flaws and I have only examined two of them. There are many other benchmarks, standards, guidelines, etc. that may also contain errors or inconsistencies and are totally unsafe to implement them.</p> <p></p>"},{"location":"Miscellaneous/Comparison%20of%20Security%20Benchmarks/#aspects-that-are-lacking","title":"Aspects that are lacking","text":"<p>The benchmarks omit many new security features that the Harden Windows Security module implements.</p> <p>Everything in the repository is carefully researched, evaluated and tested. The module ensures that nothing is redundant or incompatible with the latest version of Windows. Older versions of the OS are obsolete and insecure, and should be avoided in any environment that requires protection. Threat actors can exploit vulnerabilities and use PoCs even on the same day that an update is released, this applies to any OS.</p> <p>The security measures in the Harden Windows Security repository are also perfectly suitable for regular home users.</p> <p>There are many security measures that are missing from the benchmarks/guidelines, such as the ones I use in:</p> <ul> <li> <p>Microsoft Defender category</p> </li> <li> <p>Miscellaneous Category</p> </li> <li> <p>Edge Browser category</p> </li> <li> <p>TLS Security category</p> </li> <li> <p>Lock screen category</p> </li> <li> <p>And more</p> </li> </ul> <p>The benchmarks/guidelines suggest using application control or whitelisting, but that's just it, a suggestion, no comprehensive guide about how to do it.</p> <p></p> <p> </p> <p></p>"},{"location":"Miscellaneous/Create%20Bootable%20USB%20flash%20drive%20with%20no%203rd%20party%20tools/","title":"Create Bootable flash drive no 3rd party tools","text":""},{"location":"Miscellaneous/Create%20Bootable%20USB%20flash%20drive%20with%20no%203rd%20party%20tools/#create-bootable-usb-flash-drive-with-no-3rd-party-tools","title":"Create Bootable USB flash drive with no 3rd party tools","text":""},{"location":"Miscellaneous/Create%20Bootable%20USB%20flash%20drive%20with%20no%203rd%20party%20tools/#steps-to-create-bootable-usb-flash-drive-with-no-3rd-party-tools","title":"Steps to create Bootable USB flash drive with no 3rd party tools","text":"<ol> <li> <p>Plug in a USB flash drive that has at least 8GB capacity.</p> </li> <li> <p>Delete all partitions on the USB flash drive either using Disk Management \u00b9 \u00b2 or using Windows Settings =&gt; System =&gt; Storage =&gt; Advanced Storage Settings =&gt; Disks &amp; Volumes</p> </li> <li> <p>Using either of the methods above, create a 1GB <code>FAT32</code> partition, let's name it <code>BOOT</code>\ud83d\udfe8</p> </li> <li> <p>Create a 2nd partition on the USB flash drive with the rest of the remaining unused space, formatted as <code>NTFS</code>, let's name this one <code>DATA</code>\ud83d\udfe9</p> </li> <li> <p>Mount your Windows ISO file by double clicking on it.</p> </li> <li> <p>Select all and Copy everything from Windows ISO file to the <code>NTFS</code> partition (DATA partition\ud83d\udfe9)</p> </li> <li> <p>Copy everything from Windows ISO file, except for the \"sources\" folder, to the <code>FAT32</code> partition (BOOT partition\ud83d\udfe8)</p> </li> <li> <p>Create a new folder in the <code>FAT32</code> partition (BOOT partition\ud83d\udfe8), and name it <code>sources</code></p> </li> <li> <p>copy the <code>boot.wim</code> from the \"sources\" folder inside the Windows ISO file to the newly created \"sources\" folder in the FAT32 partition (BOOT partition\ud83d\udfe8).</p> </li> <li> <p>That's it, your USB flash drive is ready and bootable.</p> </li> </ol>"},{"location":"Miscellaneous/Device%20Guard%20and%20Virtualization%20Based%20Security%20in%20Windows/","title":"Device Guard","text":"<p>Most of the Device Guard and Virtualization-Based Security features are Automatically enabled by default on capable and modern hardware. The rest of them will be enabled and configured to the most secure state after you apply the Microsoft Security Baselines 23H2 or later.</p> <p>The Harden Windows Security Module has a feature that is accessible through <code>confirm-SystemCompliance</code> cmdlet. It will let you scan your system and verify the implementations of the Device Guard policies.</p> <ul> <li>Check out Secured-Core PC requirements.</li> </ul> <p></p>"},{"location":"Miscellaneous/Device%20Guard%20and%20Virtualization%20Based%20Security%20in%20Windows/#about-uefi-lock","title":"About UEFI Lock","text":"<p>UEFI locked security measures are rooted in Proof of Physical Presence and they can't be disabled by modifying Group Policy, registry keys or other Administrative tasks.</p> <p>The only way to disable UEFI locked security measures is to have physical access to the computer, reboot and access the UEFI settings, supply the credentials to access the UEFI, turn off Secure Boot, reboot the system and then you will be able to disable those security measures with Administrator privileges.</p> <p></p>"},{"location":"Miscellaneous/Device%20Guard%20and%20Virtualization%20Based%20Security%20in%20Windows/#device-guard-controls-and-policies","title":"Device Guard Controls and Policies","text":"<ul> <li> <p>Virtualization-Based Security + UEFI Lock CSP</p> <ul> <li>Validate enabled Windows Defender Device Guard hardware-based security features</li> </ul> </li> <li> <p>Secure boot (without requiring DMA protection) for Virtualization-Based Security CSP</p> <ul> <li>This is in accordance with Microsoft's recommendation. This option provides Secure Boot with as much protection as is supported by a given computer\u2019s hardware. A computer with input/output memory management units (IOMMUs) will have Secure Boot with DMA protection. A computer without IOMMUs will simply have Secure Boot enabled.</li> <li>Secure boot has 2 parts, part 1 is enforced using the Group Policy by this module, but for part 2, you need to enable Secure Boot in your UEFI firmware settings if it's not enabled by default (which is the case on older hardware).</li> <li>(Kernel) DMA protection hardware requirements</li> </ul> </li> <li> <p>Virtualization-based protection of Code Integrity + UEFI Lock  CSP</p> </li> <li> <p>Require UEFI Memory Attributes Table (MAT) CSP</p> </li> <li> <p>Windows Defender Credential Guard + UEFI Lock CSP</p> <ul> <li>Windows Defender Device Guard and Windows Defender Credential Guard hardware readiness tool</li> <li>Windows Defender Credential Guard requirements</li> </ul> </li> <li> <p>System Guard Secure Launch and SMM protection (Firmware Protection) CSP</p> <ul> <li>How to verify System Guard Secure Launch is configured and running</li> </ul> </li> <li> <p>Kernel Mode Hardware Enforced Stack Protection</p> </li> <li> <p>Local Security Authority (LSA) process Protection + UEFI Lock  CSP</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Device%20Guard%20and%20Virtualization%20Based%20Security%20in%20Windows/#device-protection-in-windows-security-gives-you-one-of-these-4-hardware-scores","title":"Device Protection in Windows Security Gives You One of These 4 Hardware Scores","text":"<ol> <li>Standard hardware security not supported</li> <ul> <li>This means that your device does not meet at least one of the requirements of Standard Hardware Security.</li> </ul> <li>Your device meets the requirements for Standard Hardware Security. </li> <ul> <li>TPM 2.0</li> <li>Secure boot</li> <li>DEP</li> <li>UEFI MAT</li> </ul> <li>Your device meets the requirements for Enhanced Hardware Security</li> <ul> <li>TPM 2.0</li> <li>Secure boot</li> <li>DEP</li> <li>UEFI MAT</li> <li>Memory Integrity</li> </ul> <li>Your device has all Secured-core PC features enabled</li> <ul> <li>TPM 2.0</li> <li>Secure boot</li> <li>DEP</li> <li>UEFI MAT</li> <li>Memory Integrity</li> <li>System Management Mode (SMM)</li> </ul> </ol>"},{"location":"Miscellaneous/Device%20Guard%20and%20Virtualization%20Based%20Security%20in%20Windows/#additional-resources","title":"Additional Resources","text":"<ul> <li>Memory integrity and VBS enablement</li> </ul>"},{"location":"Miscellaneous/Event%20Viewer/","title":"Event Viewer","text":""},{"location":"Miscellaneous/Event%20Viewer/#event-viewer","title":"Event Viewer","text":""},{"location":"Miscellaneous/Event%20Viewer/#windows-event-viewer","title":"Windows Event Viewer","text":"<p>This document is dedicated to offering various ways to use Event logs to achieve different purposes.</p> <p></p>"},{"location":"Miscellaneous/Event%20Viewer/#how-to-identify-which-windows-firewall-rule-is-responsible-for-a-blocked-packet","title":"How to identify which Windows Firewall rule is responsible for a blocked packet","text":"<p>I've mostly considered this for the Country IP Blocking category, but you can use it for any purpose.</p> <p>Before doing this, you need to activate one of the system Audits.</p> <p>I suggest doing it using GUI because it will have a permanent effect:</p> <p></p> <p></p> <p>Or you can activate that Audit using this command, but it will only temporarily activate it and it'll be disabled again after you restart Windows.</p>"},{"location":"Miscellaneous/Event%20Viewer/#for-systems-with-english-locale-only","title":"For Systems With English Locale Only","text":"<pre><code>Auditpol /set /category:\"System\" /SubCategory:\"Filtering Platform Packet Drop\" /success:enable /failure:enable\n</code></pre>"},{"location":"Miscellaneous/Event%20Viewer/#for-systems-with-any-locale","title":"For Systems With Any Locale","text":"<pre><code>Auditpol /set /category:\"{69979848-797A-11D9-BED3-505054503030}\" /SubCategory:\"{0CCE9225-69AE-11D9-BED3-505054503030}\" /success:enable /failure:enable\n</code></pre> <p>After the Audit is activated, running this PowerShell code will generate an output showing you blocked packets (if any).</p> <p>For example, if you visit a website or access a server that is hosted in one of the countries you blocked, or a connection was made from one of those countries to your device, it will generate an event log that will be visible to you once you run this code.</p>"},{"location":"Miscellaneous/Event%20Viewer/#link-to-the-get-blockedpackets-function","title":"\u27a1\ufe0f Link to the <code>Get-BlockedPackets</code> Function","text":"<ul> <li>Audit Filtering Platform Packet Drop</li> <li>Filter origin audit log improvements</li> <li>Audit object access</li> </ul>"},{"location":"Miscellaneous/Event%20Viewer/#how-to-get-event-logs-in-real-time-in-powershell","title":"How to Get Event Logs in Real Time in PowerShell","text":"<p>This code assumes you've already used the Harden Windows Security Module and the event logs custom views exist on your machine.</p> <p>In this example, any logs generated for Exploit Protection is displayed in real time on PowerShell console. You can modify and improve the displayed output more according to your needs.</p>"},{"location":"Miscellaneous/Event%20Viewer/#link-to-the-get-eventdata-function","title":"\u27a1\ufe0f Link to the <code>Get-EventData</code> Function","text":"<p>If you don't want the real time mode and just want to get the logs one time, you can use the following code</p> <pre><code># Load the XML content from a file or a string\n$xml = [xml](Get-Content -Path 'C:\\ProgramData\\Microsoft\\Event Viewer\\Views\\Hardening Script\\Exploit Protection Events.xml')\n\n# Get the QueryList element using XPath\n$queryList = $xml.SelectSingleNode(\"//QueryList\")\n\n# Convert the QueryList element to a string\n$queryListString = $queryList.OuterXml\n\n$Events = Get-WinEvent -FilterXml $queryListString -Oldest\n$Events | Format-Table -AutoSize\n</code></pre> <p></p>"},{"location":"Miscellaneous/Group%20Policy/","title":"Group Policy usage in this GitHub repository","text":""},{"location":"Miscellaneous/Group%20Policy/#microsoft-security-compliance-toolkit","title":"Microsoft Security Compliance Toolkit","text":"<p>This set of tools allows enterprise security administrators to download, analyze, test, edit and store Microsoft-recommended security configuration baselines for Windows and other Microsoft products, while comparing them against other security configurations.</p> <p>Microsoft Security Compliance Toolkit includes multiple files and useful programs that are required for the Harden Windows Security Module to operate.</p> <ul> <li> <p>Official link to download Microsoft Security Compliance Toolkit</p> </li> <li> <p>Microsoft Security Compliance Toolkit 1.0 - How to use</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#microsoft-security-baseline","title":"Microsoft Security Baseline","text":"<p>Microsoft is dedicated to providing its customers with secure operating systems, such as Windows and Windows Server, and secure apps, such as Microsoft 365 apps for enterprise and Microsoft Edge. In addition to the security assurance of its products, Microsoft also enables you to have fine control over your environments by providing various configuration capabilities.</p> <p>Even though Windows and Windows Server are designed to be secure out-of-the-box, many organizations still want more granular control over their security configurations. Continue reading more in the Microsoft website</p> <p>When you unzip the Microsoft Security Baseline file, you will find this folder structure:</p> <ol> <li>Documentation  - contains PDF and Excel files describing the differences between the previous baseline release and the new settings that were added. contains the default <code>policyrules</code> file, which is used with the Security Compliance Toolkit, you can view it using Policy Analyzer program.</li> <li>GP Reports - contains reports in HTML format, describes the GPO settings that can be applied for each category.</li> <li>GPOs \u2013 contains GPO objects for different scenarios, these are the actual policies that will be applied.</li> <li>Scripts - contains multiple PowerShell scripts for different scenarios and helps us easily import GPO settings to our system. The most important PowerShell script here is <code>Baseline-LocalInstall.ps1</code>.</li> <li>Templates \u2013 contains additional Group Policy Object templates that are not available by default on Windows, such as <code>MSS-legacy.admx</code>, these are in <code>ADMX</code> and <code>ADML</code> formats. They will be copied to <code>C:\\Windows\\PolicyDefinitions</code>, where they belong, so that the new Security Baselines GPOs can be interpreted.</li> </ol> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#lgpo","title":"LGPO","text":"<p>Quoting from the PDF file supplied by LGPO:</p> <p>LGPO.exe is a command-line utility that is designed to help automate management of Local Group Policy. It can import and apply settings from Registry Policy (Registry.pol) files, security templates, Advanced Auditing backup files, as well as from formatted \"LGPO text\" files and Policy Analyzer '.PolicyRules' XML files.</p> <p>It can export local policy to a GPO backup. It can export the contents of a Registry Policy file to the 'LGPO textformat' that can then be edited, and can build a Registry Policy file from an LGPO text file. (The syntax for LGPO text files is described later in this document.)</p> <p>LGPO.exe has four command-line forms: for importing and applying settings to local policy \u2013 including to Multiple Local Group Policy Objects (MLGPO)1 ; for creating a GPO backup; for parsing a Registry Policy file and outputting \"LGPO\" text; for producing a Registry Policy file from an LGPO text file.</p> <p>All output is written to LGPO.exe's standard output, and all diagnostic and error information is written to its standard error. Both can be redirected to files using standard command shell operations. To support batch file use, LGPO.exe's exit code is 0 on success and non-zero on any error.</p> <p></p> <p><code>LGPO</code> is the most crucial program for our workflow, it is part of the Security Compliance Toolkit (SCT)</p> <p>What is the Local Group Policy Object (LGPO) tool?</p> <p>LGPO.exe - Local Group Policy Object Utility</p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#how-to-manually-back-up-group-policy-objects-from-a-system-using-lgpoexe","title":"How to Manually Back up Group Policy Objects From a System Using LGPO.exe","text":"<p>Use this command to back up the currently set local group policies to drive <code>C</code></p> <pre><code>.\\LGPO.exe /b C:\n</code></pre>"},{"location":"Miscellaneous/Group%20Policy/#how-to-import-group-policy-objects-from-a-backup-created-using-lgpoexe-to-the-local-system","title":"How to Import Group Policy Objects From a Backup, Created Using LGPO.exe, to the Local System","text":"<pre><code>.\\LGPO.exe /g 'Path to the backup'\n</code></pre> <p>Example:</p> <pre><code>.\\LGPO.exe /g 'C:\\{841474E6-33EC-418C-B884-EA0F7C8195DB}'\n</code></pre>"},{"location":"Miscellaneous/Group%20Policy/#how-to-import-only-the-settings-from-a-registry-policy-file-into-computer-machine-configuration","title":"How to Import Only the Settings From a Registry Policy File Into Computer (Machine) Configuration","text":"<p>(This only contains everything in Computer (Machine) Configuration -&gt; Administrative Templates and some policies in Computer Configuration -&gt; Windows Settings)</p> <p>Registry Policy File Format</p> <pre><code>.\\LGPO.exe /m &lt;Path to registry.pol file&gt;\n</code></pre>"},{"location":"Miscellaneous/Group%20Policy/#how-to-import-only-the-security-policies-file-into-computer-machine-configuration","title":"How to Import only the Security policies file into Computer (Machine) Configuration","text":"<p>(This only contains everything in Computer (Machine) Configuration -&gt; Windows Settings =&gt; Security Settings =&gt; everything in the subfolders except for the Advanced Audit Policy Configuration)</p> <p>Security policy settings</p> <pre><code>.\\LGPO.exe /s \".\\GPOX\\DomainSysvol\\GPO\\Machine\\microsoft\\windows nt\\SecEdit\\GptTmpl.inf\"\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#policy-analyzer","title":"Policy Analyzer","text":"<p>Quoting from the PDF file supplied by Policy Analyzer:</p> <p>Policy Analyzer is a lightweight utility for analyzing and comparing sets of Group Policy Objects (GPOs). It can highlight when a set of Group Policies has redundant settings or internal inconsistencies and can highlight the differences between versions or sets of Group Policies.</p> <p>It can also compare one or more GPOs against local effective state. You can export all its findings to a Microsoft Excel spreadsheet.</p> <p>Policy Analyzer lets you treat a set of GPOs as a single unit, and represents all settings in one or more GPOs in a single \".PolicyRules\" XML file. You can also use .PolicyRules files with LGPO.exe v3.0 to apply those GPOs to a computer's local policy, instead of having to copy GPO backups around.</p> <p>What is the Policy Analyzer tool?</p> <p>Policy Analyzer Tool</p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#about-compare-to-effective-state","title":"About Compare to Effective State","text":"<p>In Policy Analyzer, there is an option called <code>Compare to Effective State</code>. Quoting from the PDF file that ships with Policy Analyzer program regarding that option:</p> <p>Enable one or more of the Policy Rule sets' checkboxes and click \"Compare to Effective State\" to compare the selected baselines against the local computer's current configured state. The operation will require UAC elevation if any of the selected baselines include security template or advanced auditing settings that require elevation to retrieve.</p> <p>The Policy Viewer will show the combined settings from all the selected Policy Rule sets in one column under the heading \"Baseline(s),\" and the corresponding current settings on the local computer and the logged-on user in a separate column under the heading \"Effective state.\"</p> <p>The effective state settings are also saved to a new .PolicyRules file with a name combining \"EffectiveState_,\" the current computer name, and the current date and time in the format \"yyyyMMdd- HHmmss.\" For example, \"EffectiveState_WKS51279_20200210-183947.PolicyRules.\"</p> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#how-are-group-policies-used-by-the-harden-windows-security-module","title":"How Are Group Policies Used by the Harden Windows Security Module?","text":"<ol> <li> <p>The module downloads the official Microsoft Security Baselines from Microsoft servers and applies them to the system.</p> </li> <li> <p>It then downloads Group Policies from this GitHub repository, which represent the configurations explained in the main Readme page, and applies them to the system, on top of Microsoft Security Baselines, so where there is a conflict of policy, the module will replace the configurations set by Microsoft Security Baselines.</p> </li> <li> <p>When applying the Microsoft Security Baselines, you have the option to apply the optional overrides too, you can find the details of those overrides in here,, they are required to be applied if you are using Harden Windows Security Module in Azure VMs and highly recommended in general.</p> </li> </ol> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#how-are-group-policies-for-the-module-created-and-maintained","title":"How Are Group Policies for the Module Created and Maintained?","text":""},{"location":"Miscellaneous/Group%20Policy/#how-i-created-them-for-the-first-time","title":"How I Created Them for the First Time","text":"<ol> <li> <p>Installed the newest available Windows build on a fresh Hyper-V VM, fully updated it, created a standard checkpoint.</p> </li> <li> <p>Opened Group Policy editor and started applying security measures described in the Readme page.</p> </li> <li> <p>After completing each category, used <code>LGPO.exe /b C:</code> to backup Group Policies of the system by creating a full GPO.</p> </li> <li> <p>Then I took only files needed from the backup, <code>registry.pol</code> and <code>GptTmpl.inf</code> and put them in a zip file, renamed it to <code>Security-Baselines-X.zip</code></p> </li> </ol>"},{"location":"Miscellaneous/Group%20Policy/#how-i-maintain-them","title":"How I Maintain Them","text":"<ol> <li> <p>As long as the VM is still using the latest available build of Windows, I use the standard checkpoint I had created to revert the VM back to that new state. If there is a newer build of Windows available, I delete that old VM, download the new Windows ISO file from Microsoft servers, then I create a fresh Hyper-V VM using it.</p> </li> <li> <p>I copy the Group Policy files, <code>registry.pol</code> or <code>GptTmpl.inf</code> to the VM, import them by using <code>.\\LGPO.exe /m \"path\"</code> for <code>registry.pol</code> files or <code>.\\LGPO.exe /s \"path\"</code> for <code>GptTmpl.inf</code> files.</p> </li> <li> <p>Open Group Policy editor and change anything that is needed, once I'm done, I create a full backup of the Group Policies of the system using <code>LGPO.exe /b C:</code> command, again take out the modified file, either <code>registry.pol</code> or <code>GptTmpl.inf</code>.</p> </li> <li> <p>Use <code>PolicyAnalyzer</code> to double check everything by comparing the old file with the new one and making sure the correct changes are applied.</p> </li> <li> <p>Replace the old Group Policy file with the new file and create a new <code>Security-Baselines-X</code> to upload to the GitHub repository.</p> </li> </ol> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#we-can-use-policy-analyzer-for-verification-and-comparison","title":"We Can Use Policy Analyzer for Verification and Comparison","text":""},{"location":"Miscellaneous/Group%20Policy/#to-verify-the-settings-are-applied-correctly-by-the-module","title":"To Verify the Settings Are Applied Correctly by The Module","text":"<ol> <li> <p>Use folder options in Control Panel or File Explorer to show hidden files and folder.</p> </li> <li> <p>Open Policy Analyzer program, Navigate to Add -&gt; File -&gt; Add files from GPO(s)... -&gt; Browser for this folder \"C:\\Windows\\System32\\GroupPolicy\", Select the folder -&gt; Import -&gt; save the Policy Rules file in <code>\\Documents\\PolicyAnalyzer\\</code></p> </li> <li> <p>Back at the main window, use View/Compare button to view applied Group Policies. The result that you will see is all of the Group Policies that are applied to your system.</p> </li> </ol> <p>Another way to verify the applied Group Policies is to perform the 3 tasks above; What it will give you is the Policy Rules file which is generated from Group Policy state after using the module. If we take this policy rules file to a different machine where we just clean installed Windows and use Policy Analyzer to compare it to the Effective State of the system, we will see what Group Policy settings have changed as a result of using the module.</p> <p></p> <p>Note: At first, when we clean install Windows, the Group Policy folder <code>C:\\Windows\\System32\\GroupPolicy</code> is empty, it will get populated with empty folders and a <code>1kb</code> file that contains only 1 word when we first open the local Group Policy editor. It will get more populated with actual policies once we start modifying any group policies.</p> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#how-to-verify-security-baselines-xzip-file-and-100-trust-it","title":"How to verify <code>security-baselines-x.zip</code> file and 100% trust it?","text":"<ol> <li>Download the security-baselines-x.zip file, extract it.</li> <li>Open Policy Analyzer, Navigate to Add -&gt; File -&gt; Select either <code>Add User Configuration (registry.pol)</code> or <code>Add Security Template (*.inf)</code> -&gt; Browser for the folder that was extracted from the <code>security-baselines-x.zip</code>, navigate to the category you want.</li> <li> <p>Select either <code>.pol</code> or <code>.inf</code> file, Import it, give it a name, save it in <code>\\Documents\\PolicyAnalyzer\\</code></p> </li> <li> <p>Back at the main window, use \"Compare to Effective State\" button to view what policies are included in the file.</p> </li> <li> <p>As you will see, everything is according to what has been explicitly stated in the GitHub's Readme page.</p> </li> </ol> <p>You can also use Virus Total website to scan <code>security-baselines-x.zip</code> without downloading it first</p> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Group%20Policy/#using-configuration-service-providers-csps-and-provisioning-packages-work-in-progress","title":"Using Configuration Service Providers (CSPs) and Provisioning Packages (Work in Progress)","text":"<p>This command gets the information about all installed provisioning packages on your system.</p> <pre><code>Get-ProvisioningPackage -AllInstalledPackages\n</code></pre> <p>Configuration service providers for IT pros</p> <p>Settings changed when you uninstall a provisioning package</p> <p>Why Intune and CSPs are the future of Windows management instead of Group Policy</p> <p>Link to Microsoft Employee's comment</p> <p>Download Windows Configuration Designer from Microsoft Store or from Windows ADK or from Windows insiders ADK, to easily create provisioning packages for your device(s)</p> <p>You can use gpresult to see more info about Group Policies on your computer</p> <pre><code># What policies are applied to your computer:\ngpresult /z\n# or\ngpresult /v\n\n# What policies are applied to the current user:\ngpresult /scope user /v\n</code></pre> <p>We can manually backup and restore Group Policy settings by copying this folder and all of its content:</p> <p><code>C:\\Windows\\System32\\GroupPolicy</code></p> <p></p>"},{"location":"Miscellaneous/How%20to%20Detect%20Changes%20in%20User%20and%20Local%20Machine%20Certificate%20Stores%20in%20Real%20Time%20Using%20PowerShell/","title":"How to Detect Changes in User and Local Machine Certificate Stores in Real Time Using PowerShell","text":"<p>Here is a PowerShell script that can display the changes in User and Local Machine Certificate Stores in Real Time. It performs the check every 3 seconds. The script is published to PowerShell Gallery and you can easily install it using the following command:</p> <pre><code>Install-Script -Name Certificates-Change-Detection -Force\n</code></pre> <p></p>"},{"location":"Miscellaneous/How%20to%20Detect%20Changes%20in%20User%20and%20Local%20Machine%20Certificate%20Stores%20in%20Real%20Time%20Using%20PowerShell/#the-code-used-in-the-script","title":"The Code used in the script","text":"<pre><code>#Requires -RunAsAdministrator\n#Requires -Version 7.3\n\n# Custom colors\n[scriptblock]$WritePink = { Write-Output \"$($PSStyle.Foreground.FromRGB(255,192,203))$($PSStyle.Blink)$($args[0])$($PSStyle.Reset)\" }\n[scriptblock]$WriteMintGreen = { Write-Output \"$($PSStyle.Foreground.FromRGB(152,255,152))$($PSStyle.Blink)$($args[0])$($PSStyle.Reset)\" }\n\n# Create variables to store the initial certificates for both locations\n$InitialLocal = Get-ChildItem Cert:\\LocalMachine\\* -Recurse\n$InitialUser = Get-ChildItem Cert:\\CurrentUser\\* -Recurse\n\n# Create a loop that runs indefinitely\nwhile ($true) {\n    # Create variables to store the current certificates for both locations\n    $CurrentLocal = Get-ChildItem Cert:\\LocalMachine\\* -Recurse\n    $CurrentUser = Get-ChildItem Cert:\\CurrentUser\\* -Recurse\n\n    # Compare the variables and check if there is any difference in certificates for LocalMachine\n    $DifferenceLocal = Compare-Object $InitialLocal $CurrentLocal\n\n    # Compare the variables and check if there is any difference in certificates for CurrentUser\n    $DifferenceUser = Compare-Object $InitialUser $CurrentUser\n\n    # If there is any difference in certificates for LocalMachine, display it and update the initial variable\n    if ($DifferenceLocal) {\n        foreach ($Diff in $DifferenceLocal) {\n            # Check if the change is an addition or a removal based on the side indicator\n            if ($Diff.SideIndicator -eq '=&gt;') {\n                &amp;$WritePink \"Certificate Added to LocalMachine at $(Get-Date -Format 'MM/dd/yyyy HH:mm:ss K')\"\n                $PSStyle.Formatting.FormatAccent = \"$($PSStyle.Foreground.FromRGB(255,192,203))\"\n                $Diff.InputObject | Format-List -Property PSPath, EnhancedKeyUsageList, DnsNameList, SendAsTrustedIssuer, FriendlyName, HasPrivateKey, NotAfter, NotBefore, SerialNumber, Thumbprint, Issuer, Subject\n            }\n            elseif ($Diff.SideIndicator -eq '&lt;=') {\n                &amp;$WriteMintGreen \"Certificate Removed from LocalMachine at $(Get-Date -Format 'MM/dd/yyyy HH:mm:ss K')\"\n                $PSStyle.Formatting.FormatAccent = \"$($PSStyle.Foreground.FromRGB(152,255,152))\"\n                $Diff.InputObject | Format-List -Property PSPath, EnhancedKeyUsageList, DnsNameList, SendAsTrustedIssuer, FriendlyName, HasPrivateKey, NotAfter, NotBefore, SerialNumber, Thumbprint, Issuer, Subject\n            }\n        }\n        $InitialLocal = $CurrentLocal\n    }\n\n    # If there is any difference in certificates for CurrentUser, display it and update the initial variable\n    if ($DifferenceUser) {\n        foreach ($Diff in $DifferenceUser) {\n            # Check if the change is an addition or a removal based on the side indicator\n            if ($Diff.SideIndicator -eq '=&gt;') {\n                &amp;$WritePink \"Certificate Added to CurrentUser at $(Get-Date -Format 'MM/dd/yyyy HH:mm:ss K')\"\n                $PSStyle.Formatting.FormatAccent = \"$($PSStyle.Foreground.FromRGB(255,192,203))\"\n                $Diff.InputObject | Format-List -Property PSPath, EnhancedKeyUsageList, DnsNameList, SendAsTrustedIssuer, FriendlyName, HasPrivateKey, NotAfter, NotBefore, SerialNumber, Thumbprint, Issuer, Subject\n            }\n            elseif ($Diff.SideIndicator -eq '&lt;=') {\n                &amp;$WriteMintGreen \"Certificate Removed from CurrentUser at $(Get-Date -Format 'MM/dd/yyyy HH:mm:ss K')\"\n                $PSStyle.Formatting.FormatAccent = \"$($PSStyle.Foreground.FromRGB(152,255,152))\"\n                $Diff.InputObject | Format-List -Property PSPath, EnhancedKeyUsageList, DnsNameList, SendAsTrustedIssuer, FriendlyName, HasPrivateKey, NotAfter, NotBefore, SerialNumber, Thumbprint, Issuer, Subject\n            }\n        }\n        $InitialUser = $CurrentUser\n    }\n\n    # Wait for 3 seconds before repeating the loop\n    Start-Sleep -Seconds 3\n}\n</code></pre>"},{"location":"Miscellaneous/How%20to%20compact%20your%20OS%20and%20free%20up%20extra%20space/","title":"How to compact your OS and free up extra space","text":""},{"location":"Miscellaneous/How%20to%20compact%20your%20OS%20and%20free%20up%20extra%20space/#how-to-compact-your-os-and-free-up-extra-space","title":"How to compact your OS and free up extra space","text":""},{"location":"Miscellaneous/How%20to%20compact%20your%20OS%20and%20free%20up%20extra%20space/#run-the-following-commands-in-an-elevated-powershell","title":"Run the following commands in an elevated PowerShell","text":"<p>To turn on CompactOS:</p> <pre><code>Compact.exe /CompactOS:always\n</code></pre> <p>To turn off CompactOS:</p> <pre><code>Compact.exe /CompactOS:never\n</code></pre> <p>To Query whether CompactOS is on or off:</p> <pre><code>Compact.exe /CompactOS:Query\n</code></pre> <p></p> <p>Source</p>"},{"location":"Miscellaneous/Hyper%20V/","title":"Hyper-V Tips and Tricks","text":""},{"location":"Miscellaneous/Hyper%20V/#how-to-import-and-export-tpm-enabled-hyper-v-vm-certificates-with-powershell","title":"How to Import and Export TPM-enabled Hyper-V VM certificates with PowerShell","text":"<p>TPM requirement, which is a great security feature, was added to Windows 11. On the host, it is managed by the OS and UEFI, but when you create a Virtual Machine (VM) that runs an OS like Windows 11, you have to know how to manage it properly so that your VM will stay secure everywhere and you will maintain your access to your VM even if you import/export it to a different Hyper-V host or reinstall your host OS.</p> <p>Here is a screenshot of my Hyper-V VM on Windows 11 with the following security features enabled:</p> <ol> <li>Secure Boot</li> <li>Trusted Platform Module (TPM)</li> </ol> <p></p> <p></p> <p>When a VM uses TPM, Windows creates 2 certificates in the <code>Local Machine Certificate Store =&gt; Shielded VM Local Certificates =&gt; Certificates</code></p> <p>One of them is for encryption and the other one is for signing. They both contain private keys. If these 2 certificates don't exist in that folder in the Local Machine Certificate store of a Hyper-V host, your VM won't be able to start</p> <p>What you need to do is to export those 2 certificates (with private keys) and store them in a safe place (such as OneDrive's personal Vault) as a backup.</p> <p>If you completely reinstall Windows or move the VMs to a different Hyper-V host and Import the certificates, you will be able to continue using your VMs, but when you create new TPM enabled VMs on the new host, 2 more certificates will be added  to the <code>Local Machine Certificate Store =&gt; Shielded VM Local Certificates =&gt; Certificates</code>, so you will have 4 certificates in total, 2 of which are tied to your old VMs and the other 2 are tied to the new VMs. Each generated certificate has 10 years expiry date from the time it was created.</p> <p></p> <p>You can Import/Export the certificates using GUI, but here I'm going to show how to automate it using PowerShell:</p>"},{"location":"Miscellaneous/Hyper%20V/#export-all-the-available-host-guardian-service-certificates-with-private-keys-and-extended-properties","title":"Export all the available Host Guardian service certificates with private keys and extended properties","text":"<pre><code>$CertificatePassword = ConvertTo-SecureString -String \"hotcakex\" -Force -AsPlainText\nGet-Item \"Cert:\\LocalMachine\\Shielded VM Local Certificates\\*\" | ForEach-Object {\nExport-PfxCertificate -Cert $_ -FilePath \".\\$($_.Issuer)-$($_.Thumbprint).pfx\" -Password $CertificatePassword -CryptoAlgorithmOption AES256_SHA256}\n</code></pre>"},{"location":"Miscellaneous/Hyper%20V/#import-the-certificates-with-private-keys","title":"Import the certificates with private keys","text":"<pre><code>$ShieldedCertsPath = 'Cert:\\LocalMachine\\Shielded VM Local Certificates'\nif (-NOT (Test-Path $ShieldedCertsPath)) { New-Item -Path $ShieldedCertsPath -Force }\n$CertificatePassword = 'hotcakex' | ConvertTo-SecureString -AsPlainText -Force\nGet-Item \"C:\\Users\\$($env:USERNAME)\\OneDrive\\Desktop\\Hyper-V Guardian certificates\\*.pfx\" | Import-PfxCertificate -CertStoreLocation $ShieldedCertsPath -Password $CertificatePassword -Exportable\n</code></pre> <p>You should change the values for <code>$CertificateLocation</code> and <code>$CertificatePassword</code> varaibles according to your own needs and environment.</p> <ul> <li> <p>You can find more info about those commands here:</p> </li> <li> <p>Import-PfxCertificate</p> </li> <li>Export-PfxCertificate</li> </ul> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#how-to-enable-nested-virtualization-for-all-the-vms-on-the-hyper-v-host","title":"How to Enable Nested Virtualization for All the VMs on the Hyper-V Host","text":"<p>Use the following command to enable Nested Virtualization for a single VM</p> <pre><code>Set-VMProcessor -VMName &lt;VMName&gt; -ExposeVirtualizationExtensions $true\n</code></pre> <p></p> <p>Use the following command to automatically enable Nested Virtualization for all VMs</p> <pre><code>(Get-VM).name | ForEach-Object {Set-VMProcessor -VMName $_ -ExposeVirtualizationExtensions $true}\n</code></pre> <p>All of the VMs must be in Off state when enabling nested virtualization for them</p> <p></p> <p>This is how to verify Nested Virtualization is enabled for all of your VMs</p> <pre><code>(Get-VM).name | ForEach-Object {get-VMProcessor -VMName $_} | Select-Object -Property VMName,ExposeVirtualizationExtensions\n</code></pre> <p></p> <ul> <li>Source</li> </ul> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#confidential-computing-on-azure","title":"Confidential Computing on Azure","text":"<p>Azure confidential computing makes it easier to trust the cloud provider, by reducing the need for trust across various aspects of the compute cloud infrastructure. Azure confidential computing minimizes trust for the host OS kernel, the hypervisor, the VM admin, and the host admin.</p>"},{"location":"Miscellaneous/Hyper%20V/#continue-reading","title":"Continue reading","text":"<ul> <li> <p>Confidential Computing on Azure</p> </li> <li> <p>Azure confidential computing</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#shielded-vms-are-deprecated-concepts","title":"Shielded VMs are deprecated concepts","text":"<p>They are deprecated starting with Windows Server 2022. They were prone to modern attacks such as side-channel.</p> The following details about Shielded VMs are old and no longer valid <ul> <li><p>Shielded VMs can't be simply moved to another Hyper-V host and used there, nor can they be de-shielded in another host, if the certificate is not in place on the new host. This results in the error \"the key protector could not be unwrapped\", which is desired.</p> </li> <li><p>Shielding a VM is for keeping bad actors or malware out of the VM, not for keeping malware inside VM. i.e., Shielding a VM is for keeping the VM secure, not for keeping the host secure.</p> </li> <li><p>You can use the command below to get details about your Hyper-V host, including checks whether your host runs in local/standalone mode or is part of a Guarded Fabric</p> </li> </ul> <pre><code>HgsClientConfiguration\n</code></pre> <p>Note that this configuration is for standalone systems. an actual shielded virtual machine is a lot more secure because the host's security and health is properly attested in a Guarded Fabric, using Host Guardian Service (HGS) on a Windows Server.</p> <ul> <li><p>Here is an official video about the feature and how it protects your VMs:</p> <ul> <li><p>Introduction to Shielded Virtual Machines in Windows Server 2016 - YouTube</p> </li> <li><p>Microsoft Mechanics</p> </li> </ul> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#scenario-hyper-v-enhanced-session-mode-no-authentication-in-the-vms-os","title":"Scenario: Hyper-V, Enhanced session mode, no authentication in the VM's OS","text":"<p>When you create a VM in Hyper-V that doesn't have any authentication method for login such as Password or PIN, and use Enhanced session-mode to connect to it, there might be an issue where the RDP disconnects once after each restart of the VM and Hyper-V virtual machine connection asks you to connect to the VM again by clicking/tapping on the connect button. To fix this, set a local password for the user account of the OS in VM.</p> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#native-boot-hyper-v-vms-vhdx","title":"Native boot Hyper-V VMs, VHDX","text":"<p>There are guides for native booting a VHDX and it's very easy to do. If you already have a Hyper-V VM, you can add it to the Windows boot manager so that during a reboot you will have the option to boot the VHDX.</p>"},{"location":"Miscellaneous/Hyper%20V/#you-need-to-pay-attention-to-a-few-things-though","title":"You need to pay attention to a few things though:","text":"<ol> <li> <p>The VHDX should be on a drive that is NTFS formatted, for now booting from ReFS is not supported.</p> </li> <li> <p>The drive that hosts the VHDX file must have more free space than the assigned size of the VHDX. The size you see in the file explorer is not the same as the size of the disk you assigned to the VHDX when creating it. It's easier if you have a fixed size VHDX instead of a dynamically expanding one. To find the real size of the VHDX, you can boot it in Hyper-V and check the drives inside it.</p> </li> <li> <p>Merge all checkpoints and delete them before attempting to native boot VHDX.</p> </li> </ol> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#vhdx-native-booting-is-very-easy-and-flexible-you-can-do-it-even-if","title":"VHDX native booting is very easy and flexible, you can do it even if:","text":"<ol> <li> <p>Your host has Secure boot enabled</p> </li> <li> <p>You use Signed WDAC policies</p> </li> <li> <p>Your VM wasn't SysPrepped before natively booting it on physical machine</p> </li> <li> <p>VM has secure boot and TPM</p> </li> </ol> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#how-to-make-the-vhdx-bootable","title":"How to make the VHDX bootable:","text":"<ol> <li>Double-click/tap on the VHDX file to mount it</li> <li>Run this in CMD or PowerShell</li> </ol> <pre><code>bcdboot D:\\Windows /d\n</code></pre> <p>Bcdboot</p> <p>Use the /d option to preserve the existing boot order.</p> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#verify-the-change-by-running-this-command","title":"Verify the change by running this command","text":"<pre><code>bcdedit /enum\n</code></pre> <p>Bcdedit</p> <p></p> <p>The description of the boot entry is the same one you see during OS selection menu. You can change it with this command in PowerShell:</p> <pre><code>bcdedit /set '{default}' description 'VHDX Boot'\n</code></pre> <p>or in CMD:</p> <pre><code>bcdedit /set {default} description 'VHDX Boot'\n</code></pre> <p>If <code>{default}</code> is not the correct identifier, then change it according to the result of the <code>bcdedit /enum</code></p> <p>There are three different identifiers: The chosen default OS has identifier {default}, the current OS you are signed in at the moment is {current}. All other entries have a long hexadecimal identifier.</p> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Hyper%20V/#some-hyper-v-nested-virtualization-screenshots","title":"Some Hyper-v Nested Virtualization Screenshots","text":"<p>To display how optimized and powerful Hyper-V hypervisor is (including any feature that runs on it such as Windows Sandbox, WSL, WSA, MDAG and more), here are some screenshots taken on a very old hardware, hardware that is not even officially supported by Windows 11, yet you can virtualize 5 operation systems nested in each other, and the last nested virtualized OS still has full functionality including direct file copy from host to guest, full Internet connectivity, ability to listen to music, do tasks and so on.</p>"},{"location":"Miscellaneous/Hyper%20V/#hardware-specs-all-from-2016-2017-couldnt-find-any-older-to-test","title":"Hardware specs - All from 2016-2017, couldn't find any older to test","text":"<ol> <li>CPU: Intel Core I7 7700k</li> <li>RAM: 16GB</li> <li>GPU: N/A (Intel IGPU)</li> <li>SSD: 256 GB M.2</li> </ol>  Click/Tap here to see the screenshots"},{"location":"Miscellaneous/Hyper%20V/#important-hyper-v-related-documents","title":"Important Hyper-V Related Documents","text":"<ul> <li> <p>Hyper-V Integration Services</p> </li> <li> <p>High Level Overview of Nested Virtualization</p> </li> <li> <p>Virtual Secure Mode</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/","title":"Optional overrides for Microsoft Security Baseline","text":"<p>Since Microsoft Security Baselines are geared towards Enterprise level security, some functionalities that home users might require are disabled. Use the following overrides in the Harden Windows Security module to bring back those functionalities. Some of these are necessary when using the module in Azure VMs.</p> <p>Tip</p> <p>All of the features and functionalities listed below are enabled by default in Windows.</p> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#1-windows-game-recording-and-broadcasting","title":"1. Windows Game Recording and Broadcasting","text":"<p>This setting enables or disables the Windows Game Recording and Broadcasting features. If you disable this setting, Windows Game Recording will not be allowed. If the setting is enabled or not configured, then Recording and Broadcasting (streaming) will be allowed.</p> <p>Policy path:</p> <pre><code>Computer Configuration\\Administrative Templates\\Windows Components\\Windows Game Recording and Broadcasting\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#2-prohibit-use-of-internet-connection-sharing-on-your-dns-domain-network","title":"2. Prohibit use of Internet Connection Sharing on your DNS domain network","text":"<p>Determines whether administrators can enable and configure the Internet Connection Sharing (ICS) feature of an Internet connection and if the ICS service can run on the computer.</p> <p>ICS lets administrators configure their system as an Internet gateway for a small network and provides network services, such as name resolution and addressing through DHCP, to the local private network.</p> <p>If you enable this setting, ICS cannot be enabled or configured by administrators, and the ICS service cannot run on the computer. The Advanced tab in the Properties dialog box for a LAN or remote access connection is removed. The Internet Connection Sharing page is removed from the New Connection Wizard. The Network Setup Wizard is disabled.</p> <p>If you disable this setting or do not configure it and have two or more connections, administrators can enable ICS. The Advanced tab in the properties dialog box for a LAN or remote access connection is available. In addition, the user is presented with the option to enable Internet Connection Sharing in the Network Setup Wizard and Make New Connection Wizard. (The Network Setup Wizard is available only in Windows XP Professional.)</p> <p>By default, ICS is disabled when you create a remote access connection, but administrators can use the Advanced tab to enable it. When running the New Connection Wizard or Network Setup Wizard, administrators can choose to enable ICS.</p> <p>Note: Internet Connection Sharing is only available when two or more network connections are present.</p> <p>Note: When the \"Prohibit access to properties of a LAN connection,\" \"Ability to change properties of an all user remote access connection,\" or \"Prohibit changing properties of a private remote access connection\" settings are set to deny access to the Connection Properties dialog box, the Advanced tab for the connection is blocked.</p> <p>Note: Non-administrators are already prohibited from configuring Internet Connection Sharing, regardless of this setting.</p> <p>Note: Disabling this setting does not prevent Wireless Hosted Networking from using the ICS service for DHCP services. To prevent the ICS service from running, on the Network Permissions tab in the network's policy properties, select the \"Don't use hosted networks\" check box.</p> <p>Policy path:</p> <pre><code>Computer Configuration\\Administrative Templates\\Network\\Network Connections\\Prohibit use of Internet Connection Sharing on your DNS domain network\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#3-firewall-local-rule-merging","title":"3. Firewall local rule merging","text":"<p>This can prevent Hyper-V default switch from working properly, please see this forum post on Microsoft Tech Community for more info:</p> <p>The Group policy that we change back to default values are located in: Computer Configuration -&gt; Windows Settings -&gt; Security Settings -&gt; Windows Firewall with Advanced Security -&gt; Windows Firewall with Advanced Security -&gt; Windows Firewall Properties -&gt; Public Profile Tab -&gt; Settings (select Customize) -&gt; Rule merging, \"Apply local connection security rules:\" to \"No\".</p> <p>Here is a screenshot:</p> <p></p> <p></p> <p>Policy path:</p> <pre><code>Computer Configuration\\Windows Settings\\Security Settings\\Windows Defender Firewall with Advanced Security\\\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#4-deny-write-access-to-removable-drives-not-protected-by-bitlocker","title":"4. Deny write access to removable drives not protected by BitLocker","text":"<p>Disabling this policy because it can cause inconvenience and if your flash drive is BitLocker encrypted, it can't be used as a bootable Windows installation USB flash drive.</p> <p>Policy path:</p> <pre><code>Computer Configuration\\Administrative Templates\\Windows Components\\BitLocker Drive Encryption\\Removable Data Drives\\Deny write access to removable drives not protected by BitLocker\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#5-set-the-status-of-these-4-xbox-services-back-to-their-default-states","title":"5. Set the status of these 4 Xbox services back to their default states","text":"<p><code>XboxGipSvc</code>, <code>XblAuthManager</code>,<code>XblGameSave</code>,<code>XboxNetApiSvc</code></p> <p>Microsoft Security Baseline sets their status to disabled.</p> <p>Policy path:</p> <pre><code>Computer Configuration\\Windows Settings\\\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#6-enable-clipboard-and-drive-redirection-when-using-remote-desktop-connection","title":"6. Enable Clipboard and Drive redirection when using Remote Desktop connection","text":"<p>It is necessary when using Hyper-V VM Enhanced session mode and you want to copy items between guest and host OS.</p> <p>Policy path:</p> <pre><code>Computer Configuration\\Administrative Templates\\Windows Components\\Remote Desktop Services\\Remote Desktop Session Host\\Device and Resource Redirection\\\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#7-enable-the-xblgamesave-standby-task","title":"7. Enable the XblGameSave Standby Task","text":"<p>The scheduled task is disabled as a result of applying the Microsoft Security Baselines. Using the optional overrides, it will be enabled and its status will be set back to the default state. The task syncs Xbox game saves on PC.</p> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#8-enable-microsoft-defender-exclusion-lists-to-be-visible-to-local-admins","title":"8. Enable Microsoft Defender exclusion lists to be visible to Local Admins","text":"<p>This policy is located in the following Group Policy path</p> <pre><code>Computer Configuration\\Administrative Templates\\Windows Components\\Microsoft Defender Antivirus\\Control whether or not exclusions are visible to Local Admins\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#9-disabled-turn-off-microsoft-consumer-experiences","title":"9. Disabled \"Turn off Microsoft Consumer Experiences\"","text":"<p>It disables some important features in Windows Settings -&gt; Bluetooth &amp; Devices -&gt; Mobile Devices</p> <p>More info in this PR</p> <pre><code>Computer Configuration\\Administrative Templates\\Windows Components\\Cloud Content\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#10-disabled-configure-password-backup-directory","title":"10. Disabled \"Configure password backup directory\"","text":"<p>Microsoft Security Baselines set its value to \"Active Directory\", but since the Harden Windows Security module does not apply to computers managed by domain controllers or Entra ID, there is no need for this policy to be active.</p> <pre><code>Computer Configuration\\Administrative Templates\\System\\LAPS\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"Miscellaneous/Overrides%20for%20Microsoft%20Security%20Baseline/#11-enabled-apply-uac-restrictions-to-local-accounts-on-network-logons","title":"11. Enabled \"Apply UAC restrictions to local accounts on network logons\"","text":"<p>A Security feature that is enabled by default and should stay enabled.</p> <pre><code>Computer Configuration\\Administrative Templates\\MS Security Guide\n</code></pre> <p></p>"},{"location":"Miscellaneous/Things%20to%20do%20for%20clean%20installing%20Windows/","title":"Things to do when clean installing Windows","text":"<p>There are certain tasks that need to be performed for a proper Windows clean installation. Not all of the items below apply to all hardware.</p> <p></p>"},{"location":"Miscellaneous/Things%20to%20do%20for%20clean%20installing%20Windows/#bitlocker","title":"BitLocker","text":"<p>Suspend the protection of the OS drive and make sure you have the recovery password of all other non-OS drives so that you will be able to unlock them after clean installation of the OS.</p> <p></p>"},{"location":"Miscellaneous/Things%20to%20do%20for%20clean%20installing%20Windows/#intel-vmd-drivers-varies-by-device","title":"Intel VMD Drivers (Varies by device)","text":"<p>If you use a modern hardware that uses Intel\u00ae Volume Management Device (Intel\u00ae VMD) technology, you will need to download the VMD drivers on a flash drive and load them during Windows OS installation so that the OS installer will be able to detect the internal SSD and its partitions. You can download the VMD drivers from your hardware manufacturer's website.</p> <ul> <li>How to Enable Intel\u00ae VMD Capable Platforms for RAID or Intel\u00ae Optane\u2122 Memory Configuration with the Intel\u00ae RST Driver</li> </ul> <p></p>"},{"location":"Miscellaneous/Things%20to%20do%20for%20clean%20installing%20Windows/#clear-the-tpm-varies-by-device","title":"Clear the TPM (Varies by device)","text":"<p>Not all devices have this capability in the UEFI. If your UEFI has the option to clear the TPM, use it prior to clean installation of the OS.</p> <ul> <li> <p>Clear all the keys from the TPM</p> </li> <li> <p>How Windows uses the Trusted Platform Module</p> </li> <li> <p>Read more about TPM 2.0 specifications</p> </li> </ul> <p></p>"},{"location":"Miscellaneous/Things%20to%20do%20for%20clean%20installing%20Windows/#formatdelete-the-following-partitions","title":"Format/Delete the following partitions","text":"<ul> <li>Format/delete your C drive</li> <li>Format/delete the EFI partition</li> <li>Format/delete the Recovery partition</li> </ul> <p>Let Windows recreate them during clean installation process</p> <p></p> <p></p>"},{"location":"Miscellaneous/Things%20to%20do%20for%20clean%20installing%20Windows/#how-to-create-a-bootable-usb-drive-without-3rd-party-tools","title":"How to create a bootable USB drive without 3rd party tools","text":"<p>Refer to this Wiki post</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/","title":"Basic PowerShell tricks and notes Part 2","text":"<p>This page is part 2 of the Basic PowerShell tricks and notes series. You can find the part 1 here.</p> <p>Designed for beginners and newcomers to PowerShell who want to quickly learn the essential basics, the most frequently used syntaxes, elements and tricks. It should help you jump start your journey as a PowerShell user.</p> <p>The main source for learning PowerShell is Microsoft Learn websites. There are extensive and complete guides about each command/cmdlet with examples.</p> <p>PowerShell core at Microsoft Learn</p> <p>Also Use Bing Chat for your PowerShell questions. The AI is fantastic at creating code and explaining everything.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#view-all-predictive-intellisense-suggestions-based-on-past-history","title":"View All Predictive Intellisense Suggestions Based on Past History","text":"<p>Press F2 to see the complete list of the Predictive IntelliSense suggestions as you type on the PowerShell console.</p> <p>More info</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#where-is-the-powershell-command-history-stored","title":"Where Is the Powershell Command History Stored?","text":"<p>In this directory</p> <pre><code>$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\n</code></pre> <p>There is a file called <code>ConsoleHost_history.txt</code> and it contains the history of all the commands you've ever typed in PowerShell on your device. If you want to clear it, open the file, delete all of its content. If PowerShell is already open, close and reopen it to see the change.</p> <p></p> <p>You can open the file with this command</p> <pre><code>Invoke-Item -Path \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\"\n</code></pre> <p></p> <p>You can use the following command to set the maximum remembered history to 1</p> <pre><code>Set-PSReadLineOption -MaximumHistoryCount 1\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-clear-the-automatic-error-variable-in-powershell","title":"How to Clear the Automatic Error Variable in Powershell","text":"<pre><code>$error.clear()\n</code></pre>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-get-the-last-error-type-in-powershell","title":"How to Get the Last Error Type in Powershell","text":"<pre><code>$Error[0].Exception.GetType().FullName\n</code></pre>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-display-all-environment-variables-and-their-values-in-powershell","title":"How to Display All Environment Variables and Their Values in Powershell","text":"<pre><code>gci env:\n</code></pre> <ul> <li> <p>The <code>env:</code> drive is a PowerShell provider that exposes the environment variables as a hierarchical file system.</p> </li> <li> <p>The <code>gci</code> command is an alias for the <code>Get-ChildItem</code> cmdlet.</p> </li> </ul> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#list-all-mscs-and-cpls-for-microsoft-management-console-and-control-panels-in-powershell","title":"List All MSCs and CPLs for Microsoft Management Console and Control Panels in Powershell","text":"<pre><code>Get-ChildItem -Path C:\\Windows\\system32\\* -Include *.msc, *.cpl | Sort-Object -Property Extension | Select-Object -Property Name | Format-Wide -Column 2\n</code></pre>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-mount-the-efi-system-partition","title":"How to Mount the EFI System Partition?","text":"<pre><code>mountvol u: /s\n</code></pre> <p>This isn't a native PowerShell cmdlet, it uses mountvol CLI.</p> <p>With that command you can mount the EFI partition and assign the letter <code>U</code> to it, it will appear in This PC. You can browse it in PowerShell as admin.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-check-if-a-file-is-in-use-in-powershell","title":"How to Check if a File Is in Use in Powershell?","text":"<p>Here is an example function that tries to rename files given to it with the same names and if it was successful, it will consider that file not in use.</p> <pre><code>function IsFileAccessible {\n    param ([System.String]$FullFileName)\n    [System.Boolean]$IsAccessible = $false\n    try {\n        Rename-Item $FullFileName $FullFileName -ErrorVariable LockError -ErrorAction Stop\n        $IsAccessible = $true\n    }\n    catch {\n        $IsAccessible = $false\n    }\n    return $IsAccessible, $FullFileName\n}\n</code></pre> <p>You can use it like this:</p> <pre><code>(Get-ChildItem -Path 'C:\\Program Files\\Windows Defender' -Filter '*.exe*').FullName | ForEach-Object { IsFileAccessible -FullFileName $_ }\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#choosing-between-powershell-and-powershell-preview","title":"Choosing Between Powershell and Powershell Preview","text":"<p>Use PowerShell Preview if you want to test new features and don't need to call PowerShell with its alias, pwsh, from CMD. If you do need to call it like that, use PowerShell stable.</p> <p>Use cases for it are when you need to use <code>pwsh.exe</code> in Windows Task Scheduler.</p> <p>PowerShell Preview by default doesn't set its <code>pwsh.exe</code> available system wide, the path to that file isn't added to the system environment variables, only PowerShell stable does that, but of course if you want to use PowerShell preview you can manually modify the PATH environment variable to have <code>pwsh.exe</code> of PowerShell Preview be available system wide.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#variable-types-in-powershell","title":"Variable Types in Powershell","text":"<p>PowerShell variables can have types and type accelerator. The following command lists all of the types and their equivalent type accelerators. The fully qualified type names replace implicit with explicit.</p> <pre><code>[PSObject].Assembly.GetType('System.Management.Automation.TypeAccelerators')::Get\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#success-codes-and-error-codes","title":"Success Codes and Error Codes","text":"<p>In PowerShell, or for programming languages in general, 0 = success, 1 or anything else means failure/error.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-get-the-names-and-appids-of-installed-apps-of-the-current-user-in-powershell","title":"How to Get the Names and AppIDs of Installed Apps of the Current User in Powershell?","text":"<pre><code>Get-StartApps\n</code></pre> <p>More info</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#difference-between-async-and-sync","title":"Difference Between Async and Sync","text":"<p>Async is faster than Sync</p> <ul> <li> <p>Sync = waits for the previous task to finish before starting a new one</p> </li> <li> <p>Async = starts multiple tasks simultaneously</p> </li> </ul> <p>PowerShell supports sync/async commands workflows, also known as parallel.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-enable-a-disabled-event-log-using-powershell","title":"How to Enable a Disabled Event Log Using Powershell","text":"<p>First we create a new\u202f<code>EventLogConfiguration</code>\u202fobject and pass it the name of the log we want to configure, then we set it to enabled and save the changes.</p> <pre><code>$logName = 'Microsoft-Windows-DNS-Client/Operational'\n\n$log = New-Object System.Diagnostics.Eventing.Reader.EventLogConfiguration $logName\n$log.IsEnabled=$true\n$log.SaveChanges()\n</code></pre> <p>We can confirm the change by running this command:</p> <pre><code>Get-WinEvent -ListLog Microsoft-Windows-DNS-Client/Operational | Format-List *\n</code></pre> <p>Using the same method we can configure many other options of the log file, just take a look at the\u202f<code>EventLogConfiguration</code> Class\u202ffor a list of configurable properties.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#find-the-current-users-username-in-powershell","title":"Find the Current User\u2019s Username in Powershell","text":"<pre><code>[Environment]::UserName\n</code></pre> <pre><code>$env:username\n</code></pre> <pre><code>whoami\n</code></pre> <pre><code>[System.Security.Principal.WindowsIdentity]::GetCurrent().Name\n</code></pre> <p>Most secure way</p> <p>Example</p> <pre><code>$UserSID = [System.Security.Principal.WindowsIdentity]::GetCurrent().user.value\n(Get-LocalUser | where-object {$_.SID -eq $UserSID}).name\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-access-properties-of-an-object-in-powershell","title":"How to Access Properties of an Object in Powershell","text":"<p>For example, you can first assign the entire object to a variable:</p> <pre><code>$Preferences = Get-MpPreference\n</code></pre> <p>Then call properties of that variable</p> <pre><code>$Preferences.PUAProtection\n</code></pre> <p>Another method is this:</p> <pre><code>$(Get-MpPreference).puaprotection\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#dot-sourcing","title":"Dot-Sourcing","text":"<p>To dot-source a PowerShell function in the same script file, you can use the dot operator <code>.</code> followed by the path of the script file containing the function. The path can be relative or absolute. Here's an example:</p> <pre><code># Contents of MyFunctions.ps1\nfunction MyFunction {\n    Write-Host \"Hello World!\"\n}\n\n# Contents of Main.ps1\n. ./MyFunctions.ps1\nMyFunction\n</code></pre> <p>In this example, <code>Main.ps1</code> dot-sources <code>MyFunctions.ps1</code> using the dot operator and then calls <code>MyFunction</code>. When you run <code>Main.ps1</code>, it will output <code>Hello World!</code> to the console.</p> <p>The dot operator tells PowerShell to execute the script file in the current scope instead of a new scope. This means that any functions or variables defined in the script file will be available in the current scope.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#a-custom-script-to-generate-random-words-in-powershell","title":"A Custom Script to Generate Random Words in Powershell","text":"<pre><code># Generate four variables with random names\n$TotallyRandomNamesArray = @() # Create an empty array to store the names\nfor ($i = 0; $i -lt 4; $i++) {\n    # Loop four times\n    $Chars = [CHAR[]](Get-Random -Minimum 97 -Maximum 123 -Count 11) # Generate random English letters\n    $Chars[0] = [CHAR]::ToUpper($Chars[0]) # Change the first character to upper-case\n    $TotallyRandomNamesArray += -join $Chars # Add the name to the array\n}\n# Assign the names from the Names array to the individual variables\n$TotallyRandomName1, $TotallyRandomName2, $TotallyRandomName3, $TotallyRandomName4 = $TotallyRandomNamesArray\n</code></pre>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-see-all-the-shared-folders-and-drives","title":"How to See All the Shared Folders and Drives","text":"<pre><code>Get-CimInstance -Class Win32_Share\n</code></pre> <p>There are other ways that are not native PowerShell cmdlets, such as</p> <pre><code>net view \\\\$env:computername /all\n</code></pre> <p>And</p> <pre><code>net share\n</code></pre> <p>Also visible from Computer =&gt; System Tools =&gt; Shared Folders =&gt; Shares</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#an-example-of-using-f-format-operator","title":"An Example of Using -F Format Operator","text":"<pre><code>Write-output(\"The drivername {0} is vulnerable with a matching SHA256 hash of {1}\" -f $Filename, $SHA256)\n</code></pre> <p>More info</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-list-all-of-the-positional-parameters-of-a-cmdlet","title":"How to List All of the Positional Parameters of a Cmdlet","text":"<p>In this example we use the</p> <pre><code>Get-Help -Name \"Get-ChildItem\" -Parameter * |\nSort-Object -Property position |\nSelect-Object -Property name, position\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-get-the-number-of-fans-and-details-about-them-in-powershell","title":"How to Get the Number of Fans and Details About Them in Powershell","text":"<pre><code>(Get-CimInstance -Namespace root/CIMV2 -ClassName Win32_Fan).count\nGet-CimInstance -Namespace root/CIMV2 -ClassName Win32_Fan\n</code></pre> <p>P.S VMs don't have fans.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-get-the-last-reboot-time-in-powershell","title":"How to Get the Last Reboot Time in Powershell","text":"<pre><code>[datetime](Get-CimInstance -ClassName win32_operatingsystem -ComputerName $_.Name).LastBootUpTime\n</code></pre>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-add-a-ps-custom-object-to-another-ps-custom-object","title":"How to Add a PS Custom Object to Another PS Custom Object","text":"<p>You can use the <code>Add-Member</code> cmdlet with the <code>-InputObject</code> parameter. The <code>-InputObject</code> parameter specifies the custom object that you want to add a property to, and the <code>-Value</code> parameter specifies the custom object that you want to add as a property. For example, you can use this code to add the <code>$CustomObject</code> to another custom object called <code>$ParentObject</code>:</p> <pre><code>$HashTable = @{\n    Name = 'Alice'\n    Age = 25\n    Occupation = 'Teacher'\n}\n$CustomObject = [PSCustomObject]$HashTable\n\n# Create another custom object\n$ParentObject = [PSCustomObject]@{\n    ID = 123\n    Location = 'London'\n}\n\n# Add the $CustomObject as a property to the $ParentObject\nAdd-Member -InputObject $ParentObject -MemberType NoteProperty -Name Child -Value $CustomObject\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#some-best-practices-for-powershell-code","title":"Some Best Practices for Powershell Code","text":"<ol> <li>Specify variable types explicitly</li> <li>Use Single quotes instead of double quotes for strings whenever possible, for example when the string value isn't interpolated.</li> </ol> <p>You can access the settings page of PowerShell extension in VS Code and enable options that automatically apply the aforementioned best practices when you format your code with (CTRL + Shift + F) shortcut.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#use-crlf-instead-of-lf-for-end-of-line-characters","title":"Use CRLF Instead of LF for End of Line Characters","text":"<p>In Visual Studio Code for example, you can see at the bottom right corner whether your end of line sequence is set to CRLF or LF, Windows uses CRLF.</p> <p>When you upload a PowerShell script to GitHub you need to make sure it's set to CRLF. PowerShell codes that are signed have big signature blocks at the end of them. PowerShell expects CRLF when doing authenticode signatures. You can also add those scripts to a <code>.gitattribute</code> config to your repo so that PowerShell files are uploaded with CRLF and not with LF.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-securely-get-the-temp-directorys-path","title":"How to Securely Get the Temp Directory's Path","text":"<pre><code>[System.IO.Path]::GetTempPath()\n</code></pre> <p>A less secure way is this</p> <pre><code>$env:Temp\n</code></pre> <p>The problem with the 2nd method is that if the path is long, contains too many spaces or contains non-English characters, it might lead to pattern matching using <code>~1</code>.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-securely-get-the-user-directorys-path","title":"How to Securely Get the User Directory's Path","text":"<p>The Get-CimInstance cmdlet can query the Win32_UserProfile class and filter by the current user\u2019s SID to get the LocalPath property, which is the path of the current user\u2019s profile directory. This method is more accurate than using the environment variable.</p> <pre><code>(Get-CimInstance Win32_UserProfile -Filter \"SID = '$([System.Security.Principal.WindowsIdentity]::GetCurrent().User.Value)'\").LocalPath\n</code></pre> <p></p> <p>A less secure or accurate way is this</p> <pre><code>$env:USERPROFILE\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-run-multiple-kernel-drivers-in-powershell","title":"How to Run Multiple Kernel Drivers In PowerShell","text":"<p>If you have a folder full of <code>.bin</code> driver files, you can use the following command to create a kernel service and run them one by one.</p> <p>This can be useful for testing drivers against a deployed WDAC policy.</p> <pre><code>(Get-ChildItem \"C:\\drivers\").FullName | ForEach-Object -begin {$global:i=1} -Process {\n    sc create \"DriverTest$global:i\" type=kernel binpath=\"$_\"\n    Start-Sleep -Seconds 1\n    Start-Service -Name \"DriverTest$global:i\" -ErrorAction SilentlyContinue\n    $global:i++\n}\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%202/#how-to-run-powershell-code-in-cmdbatch","title":"How to Run PowerShell Code in CMD/Batch","text":"<p>Example, the code has no double quotes inside it</p> <pre><code>powershell.exe -Command \"$UserSID = [System.Security.Principal.WindowsIdentity]::GetCurrent().user.value;(Get-LocalUser | where-object {$_.SID -eq $UserSID}).name\"\n</code></pre> <p></p> <p>Example, the code has double quotes inside it. We have to escape double quotes with <code>\\\"</code></p> <pre><code>powershell.exe -Command \"$UserSID = [System.Security.Principal.WindowsIdentity]::GetCurrent().user.value;$UserName = (Get-LocalUser | where-object {$_.SID -eq $UserSID}).name;Get-Process | where-object {$_.path -eq \"\\\"C:\\Users\\$UserName\\AppData\\Local\\Microsoft\\Edge SxS\\Application\\msedge.exe\\\"\"} | ForEach-Object {Stop-Process -Id $_.id -Force -ErrorAction SilentlyContinue}\"\n</code></pre> <p></p> <p>A good related answer from StackOverflow</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%203/","title":"Basic PowerShell Tricks and Notes Part 3","text":"<p>This page is part 3 of the Basic PowerShell tricks and notes series.</p> <ul> <li>part 1 here</li> <li>part 2 here</li> </ul> <p>Designed for beginners and newcomers to PowerShell who want to quickly learn the essential basics, the most frequently used syntaxes, elements and tricks. It should help you jump start your journey as a PowerShell user.</p> <p>The main source for learning PowerShell is Microsoft Learn websites. There are extensive and complete guides about each command/cmdlet with examples.</p> <p>PowerShell core at Microsoft Learn</p> <p>Also Use Bing Chat for your PowerShell questions. The AI is fantastic at creating code and explaining everything.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%203/#how-to-get-unique-items-from-a-list-of-objects-based-on-a-specific-property-only","title":"How to Get Unique Items From a List of Objects Based on a Specific Property Only","text":"<p>Let's create some dummy data first</p> <pre><code># Create an array of 10 objects with 4 properties each\n$objects = @()\nfor ($i = 1; $i -le 10; $i++) {\n    $object = New-Object -TypeName PSObject -Property @{\n        \"Name\" = \"Person$i\"\n        \"Age\" = Get-Random -Minimum 20 -Maximum 40\n        \"Gender\" = Get-Random -InputObject @(\"Male\", \"Female\")\n        \"Occupation\" = Get-Random -InputObject @(\"Teacher\", \"Engineer\", \"Doctor\", \"Lawyer\", \"Journalist\", \"Chef\", \"Artist\", \"Writer\", \"Student\", \"Manager\")\n        \"RandomNumber\" = Get-Random -InputObject @(\"694646152\",\"9846152\",\"3153546\")\n    }\n    $objects += $object\n}\n</code></pre> <p>Then we can display that data like this in a table</p> <pre><code>$objects | Format-Table -AutoSize\n</code></pre> <p></p> <p>Now we want to filter the result to get the unique values, but the uniqueness should be based on a specific property, which here is \"RandomNumber\". We don't want more than 1 object with the same \"RandomNumber\" property.</p> <p>To do that, we use this method in PowerShell</p> <pre><code>$objects | Group-Object -Property RandomNumber | ForEach-Object { $_.Group[0] } | Format-Table -AutoSize\n</code></pre> <p></p> <p>You can use the Group-Object cmdlet to group the objects by the property you want to filter, and then select the first object from each group. This way, you will get one object for each \"RandomNumber\" property with all the properties intact. Using other methods such as <code>Get-Unique</code> or <code>Select-Object -Unique</code> won't work in this particular case.</p> <p>You can find more information about the Group-Object cmdlet and its parameters in this article.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes%20Part%203/#install-big-powershell-modules-system-wide","title":"Install Big Powershell Modules System Wide","text":"<p>Modules such as Az or Microsoft.Graph.Beta are big, can have thousands of files and take more than 1GB space after installation.</p> <p>By default modules are installed in the Documents directory and when you use OneDrive, everything in there is synced automatically.</p> <p>You can install such modules system wide so that they won't be stored in the <code>Documents\\PowerShell</code> directory and instead will be stored in <code>C:\\Program Files\\PowerShell\\Modules</code> (for PowerShell core). This will also improve security since Administrator privileges will be required to change module files.</p> <p>To do this, you need to use the <code>-Scope AllUsers</code> parameter.</p> <pre><code>Install-Module Az -Scope AllUsers\n\nInstall-Module Microsoft.Graph.Beta -Scope AllUsers\n</code></pre> <ul> <li>Parameter Info</li> </ul> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/","title":"Basic PowerShell tricks and notes","text":"<p>This page is designed for beginners and newcomers to PowerShell who want to quickly learn the essential basics, the most frequently used syntaxes, elements and and tricks. It should help you jump start your journey as a PowerShell user.</p> <p>The main source for learning PowerShell is Microsoft Learn websites. There are extensive and complete guides about each command/cmdlet with examples.</p> <p>PowerShell core at Microsoft Learn</p> <p>Also Use Bing Chat for your PowerShell questions. The AI is fantastic at creating code and explaining everything.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#pipeline-variable","title":"Pipeline Variable","text":"<p><code>$_</code>  is the variable for the current value in the pipeline.</p> <p>Examples</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#filtering-with-where-object","title":"Filtering With Where-Object","text":"<p><code>?</code> which is an alias for <code>Where-Object</code>, is used to filter all the data given to it.</p> <p>Where-Object</p> <p>Example</p> <pre><code>Get-PSDrive | ?{$_.free -gt 1}\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#show-the-properties-of-an-object-selectively","title":"Show the Properties of an Object Selectively","text":"<p><code>Select</code> or <code>Select-Object</code> show the properties that we want to see from an object</p> <p>If we use <code>*</code> then all of the properties will be shown and from there we can choose which properties to add.</p> <p>Example:</p> <pre><code>Get-PSDrive | ?{$_.free -gt 1} | select *\n\nGet-PSDrive | ?{$_.free -gt 1} | select root, used, free\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#looping-using-foreach-object","title":"Looping Using Foreach-Object","text":"<p><code>ForEach-Object { }</code></p> <p>The <code>ForEach-Object</code> cmdlet performs an operation on each item in a collection of input objects. The input objects can be piped to the cmdlet or specified using the InputObject parameter.</p> <p>i.e. For every item in the pipe, run this line.</p> <p>Examples:</p> <pre><code>Get-PSDrive | ?{$_.free -gt 1} | select root, used, free | ForEach-Object{\"zebra\"}\n</code></pre> <pre><code>Get-PSDrive | ?{$_.free -gt 1} | select root, used, free | ForEach-Object{ Write-Host \"Free Space for \" $_.Root \"is\" ($_.free/1gb )}\n</code></pre> <p>The parenthesis, <code>($_.free/1gb )</code> must be there if we want to modify one of the output strings.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#to-get-online-help-about-any-cmdlet","title":"To Get Online Help About Any Cmdlet","text":"<p>Opens the webpage for the specified command</p> <p><code>Get-help cmdlet \u2013online</code></p> <p>Example:</p> <p><code>Get-Help ForEach-Object \u2013online</code></p> <p><code>Get-Help dir \u2013online</code></p> <p>Shows the full help on the PowerShell console</p> <p><code>Get-help get-service -full</code></p> <p>Opens a new window showing the full help content and offers other options such as Find</p> <p><code>Get-help get-service -ShowWindow</code></p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#to-query-windows-services","title":"To Query Windows Services","text":"<p>This gets any Windows service that has the word \"Xbox\" in it.</p> <p><code>Get-service \"*xbox*\"</code></p> <p>This gets any Windows service that has the word \"x\" in it.</p> <p><code>Get-service \"*x*\"</code></p> <p>Putting <code>*</code> around the word or letter finds anything that contains it.</p> <p><code>Get-service \"*x*\" | sort-object status</code></p> <p>Example syntax:</p> <pre><code>Get-Service [[-Name] &lt;System.String[]&gt;] [-ComputerName &lt;System.String[]&gt;] [-DependentServices] [-Exclude &lt;System.String[]&gt;] [-Include &lt;System.String[]&gt;] [-RequiredServices] [&lt;CommonParameters&gt;]\n</code></pre> <p>In this part</p> <pre><code>Get-Service [[-Name] &lt;System.String[]&gt;]\n</code></pre> <p>The <code>-Name</code> Parameter accepts <code>&lt;System.String[]&gt;</code>, which is a StringList, and when [] is included, that means there can be multiple inputs/strings, separated by comma <code>,</code>.</p> <p>So <code>[[-Name] &lt;System.String[]&gt;]</code> can be used like this:</p> <pre><code>Get-Service -Name WinRM,BITS,*Xbox*\n</code></pre> <p>Also in another similar example syntax:</p> <pre><code>Get-Service [-ComputerName &lt;System.String[]&gt;] [-DependentServices] -DisplayName &lt;System.String[]&gt; [-Exclude &lt;System.String[]&gt;] [-Include &lt;System.String[]&gt;] [-RequiredServices] [&lt;CommonParameters&gt;]\n</code></pre> <p>Everything is inside a bracket except for -DisplayName, that means it is mandatory. If a parameter is inside a bracket, that means it is optional.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#how-to-suppress-errors-in-powershell","title":"How to Suppress Errors in Powershell","text":"<pre><code>-ErrorAction SilentlyContinue\n</code></pre> <p>Everything you wanted to know about exceptions</p> <p>Try/Catch will only 'trigger' on a terminating exception. Most cmdlets in PowerShell, by default, won't throw terminating exceptions. You can set the error action with the\u202f-ErrorAction\u202for -ea parameters:</p> <pre><code>Do-Thing 'Stuff' -ErrorAction Stop\n</code></pre> <p>Careful when using <code>-ErrorAction Stop</code>, If using it in loops like with <code>ForEach-Object</code>, then it will stop the entire loop after the first encounter of error.</p> <p>Handling Errors the PowerShell Way</p> <p>Tip: If you set</p> <pre><code>$ErrorActionPreference = 'Stop'\n</code></pre> <p>In your PowerShell code, either locally or globally for the entire script, <code>Write-Error</code> will cause the script to stop because it will be like throwing an error.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#get-file-signature-of-all-the-files-in-a-folder","title":"Get File Signature of All the Files in a Folder","text":"<p>This will check all of the files in the current directory and show an error for folders, you can add <code>-ErrorAction SilentlyContinue</code> to the <code>Get-AuthenticodeSignature</code> cmdlet to ignore the errors.</p> <pre><code>Get-ChildItem | ForEach-Object -Parallel {Get-AuthenticodeSignature $_.Name}\n</code></pre> <p>This will recursively check only the files in the current directory and sub-directories, no folder is piped.</p> <pre><code>Get-ChildItem -Recurse -File | ForEach-Object -Parallel {Get-AuthenticodeSignature $_.Name}\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#write-output-to-a-file-or-string","title":"Write Output to a File or String","text":"<pre><code>&gt; output.txt\n</code></pre> <p>Example:</p> <pre><code>ipconfig /all &gt; mynetworksettings.txt\n</code></pre> <p>about_Redirection</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#how-to-add-delaypause-to-the-execution-of-powershell-script","title":"How to Add Delay/Pause to the Execution of Powershell Script","text":"<p>To sleep a PowerShell script for 5 seconds, you can run the following command</p> <pre><code>Start-Sleep -Seconds 5\n</code></pre> <p>You can also use the <code>-milliseconds</code> parameter to specify how long the resource sleeps in milliseconds.</p> <pre><code>Start-Sleep -Milliseconds 25\n</code></pre> <p>Start-Sleep</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#how-to-stopkill-a-a-process-or-exe-executable-in-powershell","title":"How to Stop/Kill a a Process or (.exe) Executable in Powershell","text":"<p>Using native PowerShell cmdlet</p> <pre><code>Stop-Process -Name \"Photoshop\"\n</code></pre> <p>Stop-Process</p> <p>Using <code>taskkill.exe</code></p> <pre><code>taskkill /IM \"photoshop app.exe\" /F\n</code></pre> <p>taskkill</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#automatically-answer-yes-to-a-prompt-in-powershell","title":"Automatically Answer \u201cYes\u201d to a Prompt in Powershell","text":"<p>Use <code>\u2013force</code> at the end of the command</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#displays-all-information-in-the-current-access-token","title":"Displays All Information in the Current Access Token","text":"<p>The command below displays all information in the current access token, including the current user name, security identifiers (SID), privileges, and groups that the current user belongs to.</p> <pre><code>whoami /all\n</code></pre> <p>whoami</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#display-all-the-tcp-and-udp-ports-on-which-the-computer-is-listening","title":"Display All the Tcp and Udp Ports on Which the Computer Is Listening","text":"<pre><code>netstat -a\n</code></pre> <p>netstat</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#copy-the-result-of-a-command-to-clipboard-automatically","title":"Copy the Result of a Command to Clipboard Automatically","text":"<p>Add <code>| clip</code> at the end the command</p> <p>Example:</p> <pre><code>Get-TimeZone | clip\n</code></pre> <p>Example:</p> <pre><code>rg -i -F URL: | clip\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#how-to-scan-2-text-files-for-differences-and-pipe-the-difference-to-a-third-file","title":"How to Scan 2 Text Files for Differences and Pipe the Difference to a Third File","text":"<pre><code>$File1 = \"C:\\Scripts\\Txt1.txt\"\n$File2 = \"C:\\Scripts\\Txt2.txt\"\n$Location = \"C:\\Scripts\\Txt3.txt\"\n\nCompare-Object (get-content $File1) (get-content $File2) | format-list | Out-File $Location\n</code></pre> <p>Compare-Object</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#difference-between-strings-and-stringlists","title":"Difference Between Strings and StringLists","text":"<p>This is Stringlist in PowerShell:</p> <p><code>[String[]]</code></p> <p>And this is a string</p> <p><code>[String]</code></p> <p>When we define Stringlist in a parameter, then the argument will keep asking for multiple values instead of 1, if we want to stop adding arguments for the parameter, we have to enter twice.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#how-to-run-a-powershell-ps1-script","title":"How to Run a Powershell (.PS1) Script ?","text":"<ul> <li>Method 1:</li> </ul> <pre><code>&amp;\"Path\\To\\PS\\Script.ps1\"\n</code></pre> <p>Using the <code>&amp;</code> Call operator</p> <ul> <li>Method 2:</li> </ul> <pre><code>Set-Location 'Path\\To\\Folder\\OfThe\\Script'\n.\\Script.ps1\n</code></pre> <ul> <li>Method 3</li> </ul> <pre><code>pwsh.exe -File 'Path\\To\\Folder\\OfThe\\Script.ps1'\n</code></pre> <p>This example uses PowerShell Core</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#enclosing-strings-that-have-a-lot-of-single-and-double-quotation-marks","title":"Enclosing Strings That Have a Lot of Single and Double Quotation Marks","text":"<pre><code>$string =@\"\n\nSome string text\n\n\"@\n\n$string\n</code></pre> <p>the markers <code>@\"</code> and <code>\"@</code> indicating the beginning and end of the string must be on separate lines.</p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#how-to-find-the-type-of-the-output-of-a-command-in-powershell","title":"How to Find the Type of the Output of a Command in Powershell?","text":"<p>Using <code>GetType()</code></p> <p>Examples:</p> <pre><code>(Get-BitlockerVolume -MountPoint \"C:\").KeyProtector.keyprotectortype.GetType()\n</code></pre> <pre><code>(get-nettCPConnection).GetType()\n</code></pre> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#make-sure-to-use-pascal-case-for-variable-names","title":"Make Sure to Use Pascal Case for Variable Names","text":"<p>Pascal Case requires variables made from compound words and have the first letter of each appended word written with an uppercase letter.</p> <p>Example: <code>$Get-CurrentTime</code></p> <p></p>"},{"location":"PowerShell/Basic%20PowerShell%20tricks%20and%20notes/#some-popular-resources-and-cmdlets","title":"Some Popular Resources and Cmdlets","text":"<ul> <li> <p>Out-Null</p> </li> <li> <p>Test-Path</p> </li> <li> <p>Add-Content</p> </li> <li> <p>New-Item</p> </li> <li> <p>Everything you wanted to know about arrays</p> </li> <li> <p>about_Split</p> </li> <li> <p>Start-Process</p> </li> <li> <p>about_Parsing</p> </li> <li> <p>about_Quoting_Rules</p> </li> <li> <p>about_PowerShell_exe</p> </li> <li> <p>about_Comparison_Operators</p> </li> <li> <p>Everything you wanted to know about hashtables</p> </li> <li> <p>about_Hash_Tables</p> </li> <li> <p>about_Operators</p> </li> <li> <p>ForEach-Object</p> </li> <li> <p>about_Foreach</p> </li> <li> <p>Set-Acl</p> </li> <li> <p>Set-Content</p> </li> <li> <p>icacls</p> </li> <li> <p>Get-Process</p> </li> <li> <p>about_Environment_Variables</p> </li> <li> <p>Everything you wanted to know about the if statement</p> </li> <li> <p>Tee-Object</p> </li> <li> <p>about_Signing</p> </li> <li> <p>CIM Classes (WMI)</p> </li> <li> <p>Get-CimInstance</p> </li> <li> <p>ConvertFrom-Json</p> </li> <li> <p>PowerShell scripting performance considerations</p> </li> <li> <p>Creating Get-WinEvent queries with FilterHashtable</p> </li> <li> <p>Checkpoint-Computer</p> </li> <li> <p>Restore Point Description Text</p> </li> <li> <p>Get-ComputerRestorePoint</p> </li> <li> <p>Pop-Location</p> </li> <li> <p>Invoke-Expression</p> </li> <li> <p>about_Script_Blocks</p> </li> <li> <p>about_Functions_Advanced_Parameters</p> </li> <li> <p>about_Functions_CmdletBindingAttribute</p> </li> <li> <p>Add-Computer</p> </li> <li> <p>Get-Unique</p> </li> <li> <p>Sort-Object</p> </li> <li> <p>about_Comment_Based_Help</p> </li> <li> <p>Get-Date</p> </li> <li> <p>about_Parameters_Default_Values</p> </li> <li> <p>about_Parameter_Sets</p> </li> <li> <p>about_Automatic_Variables</p> </li> <li> <p>about_Functions_Argument_Completion</p> </li> <li> <p>Using tab-completion in the shell</p> </li> <li> <p>about_Continue</p> </li> <li> <p>Trim Your Strings with PowerShell</p> </li> </ul> <p></p>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/","title":"EKUs in WDAC, App Control for Business, Policies","text":""},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#introduction","title":"Introduction","text":"<p>EKU stands for Extended Key Usage, which is an extension of X.509 certificates that delineates the functions for which the public key of the certificate can be employed. EKUs are designated by Object Identifiers (OIDs), which are sequences of digits that distinctly characterize a kind of usage.</p> <p>The EKUs extension can be either critical or non-critical. If the extension is critical, it implies that the certificate must be utilized solely for the functions indicated by the EKUs. If the extension is non-critical, it implies that the certificate can be employed for other functions as well, provided that they are not prohibited by other extensions or policies.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#a-detailed-analysis-of-object-identifiers-and-their-usage","title":"A Detailed Analysis of Object Identifiers and Their Usage","text":"<p>Let's consider <code>1.3.6.1.4.1.311.61.4.1</code> as an example which is an OID accountable for ELAM EKU. An Object Identifier (OID) is a method of denominating distinguishing objects in a hierarchical fashion. OIDs are frequently employed in cryptography, security, and networking protocols to indicate various kinds of data or algorithms.</p> <p>Each cluster of digits in an OID is termed an arc. The arcs are separated by dots and constitute a tree structure. The first arc is the root of the tree, and the last arc is the leaf. The arcs in between are denoted as nodes. Each arc has a designation and a numeral, which are allocated by different authorities or standards organizations.</p> <ul> <li><code>1</code>: This is the root arc, and it is attributed to the International Organization for Standardization (ISO).</li> <li><code>3</code>: This signifies that the object pertains to the identified-organization branch of the ISO tree, which encompasses OIDs attributed to various organizations.</li> <li><code>6</code>: This is the third arc, and it is attributed to the US Department of Defense (DoD), which is the executive branch department accountable for the military and national security of the United States.</li> <li><code>1</code>: This is the fourth arc, signifies that the object pertains to the internet sub-branch, which encompasses OIDs pertaining to internet protocols and standards.</li> <li><code>4</code>: This is the fifth arc, signifies that the object pertains to the private sub-branch, which encompasses OIDs allocated to private enterprises and organizations.</li> <li><code>1</code>: This signifies that the object pertains to the enterprise sub-branch, which encompasses OIDs assigned to specific enterprises by IANA (Internet Assigned Numbers Authority). Each enterprise can devise its own sub-tree under its assigned OID.</li> <li><code>311</code>: This is the Microsoft arc, which is employed for Microsoft-specific purposes.</li> <li><code>61</code>: This is the Windows System Component Verification arc, which is employed for Windows system components that necessitate special verification.</li> <li><code>4.1</code>: This is the Early Launch EKU arc, which is employed for the Extended Key Usage (EKU) of Early Launch Anti-Malware (ELAM) drivers. ELAM drivers are special drivers that can load prior to other drivers and verify their integrity and signatures. They are mandated to be signed by Microsoft and have a certificate that contains this EKU.</li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#ekus-in-wdac-policies","title":"EKUs in WDAC Policies","text":"<p>EKUs are employed in WDAC policies to indicate the functions for which a certificate can be employed. Consider EKUs as a whitelist of permitted functions. If a certificate does not encompass any of the EKUs indicated in the WDAC policy, it will be discarded. They can be employed to confine the range of a certificate to a specific function.</p> <p>For instance, if a certificate is issued to an individual or an organization solely for code signing functions, it cannot be employed for high-value operations such as Early Launch AntiMalware (ELAM) driver signing. To have the capacity to sign ELAM drivers, the certificate must encompass the ELAM EKU which is only attained by fulfilling specific requirements demonstrated by Microsoft.</p> <p>We can readily verify this in the subsequent example. Let's assume you have deployed the DefaultWindows template policy on a machine, and now you want to enable a 3rd party application such as OBS to be allowed to run. You create a supplemental policy by scanning the components of the OBS software. If we now open the generated XML file, we can observe that there are signer rules in there.</p> <p></p> <p></p> <p></p> <p></p> <p>And if we open the properties of one of those signed files, we can observe that they are signed by a certificate that was issued to an individual for Code Signing function only.</p> <p></p> <p></p> <p></p> <p></p> <p>If we append an EKU that is not supported by this certificate, such as ELAM, to one of the signer rules in the supplemental policy, the OBS software will no longer be permitted by the Code Integrity to run because the certificate the components of the OBS software are signed with does not encompass the ELAM EKU.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#how-to-obtain-the-oid-of-an-eku-by-knowing-its-friendly-name-and-vice-versa","title":"How to Obtain the OID of an EKU by Knowing Its Friendly Name and Vice Versa","text":"<p>If you know the OID or the friendly name of an EKU, you can readily obtain the other one by using the following PowerShell command</p> <pre><code>[Security.Cryptography.Oid]::new($OIDOrFriendlyName)\n</code></pre> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#how-to-convert-an-oid-to-hexadecimal-format-for-wdac-policies","title":"How to Convert an OID to Hexadecimal Format for WDAC Policies","text":"<p>In a WDAC Policy XML file, each EKU must be defined in the <code>EKUs</code> node. For each EKU, there are 3 available attributes, 2 of which are mandatory and 1 is optional. The mandatory attributes are <code>ID</code> and <code>Value</code>, and the optional attribute is <code>FriendlyName</code>.</p> <ul> <li>The <code>ID</code> attribute is a unique identifier for the EKU and should begin with <code>ID_EKU_</code>.</li> <li>The <code>Value</code> attribute is the hexadecimal representation of the OID of the EKU.</li> <li>The <code>FriendlyName</code> attribute is a human-readable name for the EKU.</li> </ul>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#we-can-convert-the-oid-of-an-eku-to-its-hexadecimal-representation-by-using-the-following-powershell-function","title":"We can convert the OID of an EKU to its hexadecimal representation by using the following PowerShell function:","text":"<pre><code># Import the System.Formats.Asn1 namespaces\nusing namespace System.Formats.Asn1\nFunction Convert-OIDToHex {\n  [CmdletBinding()]\n  Param (\n    [Parameter(Mandatory = $true, ValueFromPipeline = $true)]\n    [ValidateNotNullOrEmpty()][System.String]$OID\n  )\n  &lt;#\n.SYNOPSIS\n  Converts an OID to a hexadecimal string\n.PARAMETER OID\n  The OID to convert\n.EXAMPLE\n  Convert-OIDToHex -OID '1.3.6.1.4.1.311.10.3.5'\n.INPUTS\n  System.String\n.OUTPUTS\n  System.String\n  #&gt;\n\n  # Create an AsnWriter object with the default encoding rules\n  [AsnWriter]$AsnWriter = New-Object -TypeName AsnWriter -ArgumentList ([AsnEncodingRules]::BER)\n  # Write the OID as an ObjectIdentifier\n  $AsnWriter.WriteObjectIdentifier(\"$OID\")\n  # Get the encoded bytes as an array\n  [System.Byte[]]$NumArray = $AsnWriter.Encode()\n  # Check if the first byte is 6, otherwise throw an exception\n  if ($NumArray[0] -ne 6) {\n    throw 'Invalid OID encoding'\n  }\n  # Change the first byte to 1\n  $NumArray[0] = 1\n  # Create a StringBuilder to store the hexadecimal value\n  [System.Text.StringBuilder]$StringBuilder = New-Object -TypeName System.Text.StringBuilder -ArgumentList ($NumArray.Length * 2)\n\n  # Loop through the bytes and append them as hex strings\n  for ($Index = 0; $Index -lt $NumArray.Length; $Index++) {\n    # Convert each byte to a two-digit hexadecimal string using the invariant culture\n    # The invariant culture is a culture that is culture-insensitive and independent of the system settings\n    # This ensures that the hexadecimal string is consistent across different locales and platforms\n    # The 'X2' format specifier indicates that the byte should be padded with a leading zero if necessary\n    # The ToString method returns the hexadecimal string representation of the byte\n    [System.String]$Hex = $NumArray[$Index].ToString('X2', [System.Globalization.CultureInfo]::InvariantCulture)\n    # Append the hexadecimal string to the StringBuilder object\n    # The StringBuilder class provides a mutable string buffer that can efficiently concatenate strings\n    # The Out-Null cmdlet suppresses the output of the Append method, which returns the StringBuilder object itself\n    $StringBuilder.Append($Hex) | Out-Null\n  }\n\n  # Return the hexadecimal value as string\n  return [System.String]$StringBuilder.ToString().Trim()\n}\n</code></pre> <ul> <li>OBJECT IDENTIFIER</li> <li>System.Formats.Asn1 Namespace</li> <li>AsnWriter Class</li> </ul>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#how-to-convert-the-hexadecimal-format-to-an-oid-for-wdac-policies","title":"How to Convert the Hexadecimal Format to an OID for WDAC Policies","text":"<p>The following PowerShell function does the exact opposite of the previous function. It converts the hexadecimal representation of an OID to the OID itself.</p> <pre><code># Import the System.Formats.Asn1 namespaces\n# This allows you to use the AsnReader and AsnWriter classes\nusing namespace System.Formats.Asn1\n\nFunction Convert-HexToOID {\n  [CmdletBinding()]\n  [OutputType([System.String])]\n  Param (\n    [Parameter(Mandatory = $true, ValueFromPipeline = $true)]\n    [ValidateNotNullOrEmpty()][System.String]$Hex\n  )\n  &lt;#\n.SYNOPSIS\n  Converts a hexadecimal string to an OID\n.DESCRIPTION\n  Used for converting hexadecimal values found in the EKU sections of the WDAC policies to their respective OIDs.\n.PARAMETER Hex\n  The hexadecimal string to convert to an OID\n.EXAMPLE\n  Convert-HexToOID -Hex '010a2b0601040182374c0301'\n\n  Returns '1.3.6.1.4.1.311.76.3.1'\n.INPUTS\n  System.String\n.OUTPUTS\n  System.String\n  #&gt;\n\n  begin {\n    # Convert the hexadecimal string to a byte array by looping through the string in pairs of two characters\n    # and converting each pair to a byte using the base 16 (hexadecimal) system\n    [System.Byte[]]$NumArray = for ($Index = 0; $Index -lt $Hex.Length; $Index += 2) {\n      [System.Convert]::ToByte($Hex.Substring($Index, 2), 16)\n    }\n  }\n\n  process {\n    # Change the first byte from 1 to 6 because the hexadecimal string is missing the tag and length bytes\n    # that are required for the ASN.1 encoding of an OID\n    # The tag byte indicates the type of the data, and for an OID it is 6\n    # The length byte indicates the number of bytes that follow the tag byte\n    # and for this example it is 10 (0A in hexadecimal)\n    $NumArray[0] = 6\n\n    # Create an AsnReader object with the default encoding rules\n    # This is a class that can read the ASN.1 BER, CER, and DER data formats\n    # BER (Basic Encoding Rules) is the most flexible and widely used encoding rule\n    # CER (Canonical Encoding Rules) is a subset of BER that ensures a unique encoding\n    # DER (Distinguished Encoding Rules) is a subset of CER that ensures a deterministic encoding\n    # The AsnReader object takes the byte array as input and the encoding rule as an argument\n    [AsnReader]$AsnReader = New-Object -TypeName AsnReader -ArgumentList ($NumArray, [AsnEncodingRules]::BER)\n\n    # Read the OID as an ObjectIdentifier\n    # This is a method of the AsnReader class that returns the OID as a string\n    # The first two numbers are derived from the first byte of the encoded data\n    # The rest of the numbers are derived from the subsequent bytes using a base 128 (variable-length) system\n    [System.String]$OID = $AsnReader.ReadObjectIdentifier()\n  }\n\n  End {\n    # Return the OID value as string\n    return $OID\n  }\n}\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#common-ekus-in-wdac-policies","title":"Common EKUs in WDAC Policies","text":"<pre><code>&lt;EKU ID=\"ID_EKU_WINDOWS\" FriendlyName=\"Windows System Component Verification - 1.3.6.1.4.1.311.10.3.6\" Value=\"010A2B0601040182370A0306\" /&gt;\n&lt;EKU ID=\"ID_EKU_WHQL\" FriendlyName=\"Windows Hardware Quality Labs (WHQL) - 1.3.6.1.4.1.311.10.3.5\" Value=\"010A2B0601040182370A0305\" /&gt;\n&lt;EKU ID=\"ID_EKU_ELAM\" FriendlyName=\"Early Launch Anti Malware - 1.3.6.1.4.1.311.61.4.1\" Value=\"010A2B0601040182373D0401\" /&gt;\n&lt;EKU ID=\"ID_EKU_HAL_EXT\" FriendlyName=\"HAL Extension - 1.3.6.1.4.1.311.61.5.1\" Value=\"010A2B0601040182373D0501\" /&gt;\n&lt;EKU ID=\"ID_EKU_RT_EXT\" FriendlyName=\"Windows RT - 1.3.6.1.4.1.311.10.3.21\" Value=\"010a2b0601040182370a0315\" /&gt;\n&lt;EKU ID=\"ID_EKU_STORE\" FriendlyName=\"Windows Store - 1.3.6.1.4.1.311.76.3.1\" Value=\"010a2b0601040182374c0301\" /&gt;\n&lt;EKU ID=\"ID_EKU_DCODEGEN\" FriendlyName=\"Dynamic Code Generation - 1.3.6.1.4.1.311.76.5.1\" Value=\"010A2B0601040182374C0501\" /&gt;\n&lt;EKU ID=\"ID_EKU_AM\" FriendlyName=\"AntiMalware - 1.3.6.1.4.1.311.76.11.1\" Value=\"010a2b0601040182374c0b01\" /&gt;\n</code></pre>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#oids-for-common-microsoft-ekus","title":"OIDs for Common Microsoft EKUs","text":"<ul> <li>Microsoft OIDs start with <code>1.3.6.1.4.1.311</code></li> <li>Protected Process Light Verification: <code>1.3.6.1.4.1.311.10.3.22</code></li> <li>Windows TCB Component: <code>1.3.6.1.4.1.311.10.3.23</code></li> <li>Code Signing OID (generic): <code>1.3.6.1.5.5.7.3.3</code></li> </ul>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#how-ekus-are-used-by-the-wdac-engine-for-validation","title":"How EKUs Are Used by the WDAC Engine for Validation","text":"<p>Regarding the incorporation of EKUs in file validation, WDAC verifies that the file's leaf certificate (File's signer) possesses identical EKUs as the signer element's EKUs. Regardless of whether the Signer's CertRoot (TBS value) and name (CN of the certificate) match with file's root, intermediate or leaf certificates, the EKUs only need to match with the leaf certificate.</p> <p>For example, in the Default Windows template policy, the <code>Kernel32.dll</code> is authorized by the following signer:</p> <pre><code>&lt;Signer ID=\"ID_SIGNER_WINDOWS_PRODUCTION\" Name=\"Microsoft Product Root 2010 Windows EKU\"&gt;\n  &lt;CertRoot Type=\"Wellknown\" Value=\"06\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_WINDOWS\" /&gt;\n&lt;/Signer&gt;\n</code></pre> <p></p> <ul> <li> <p><code>Microsoft Product Root 2010 Windows EKU</code>: Matches the common name of the file's root certificate (<code>Microsoft Root Certificate Authority 2010</code>) through well known roots.</p> </li> <li> <p><code>CertRoot</code>: Matches the TBS and Common name of the file's root certificate using well known roots.</p> </li> <li> <p><code>CertEKU</code>: Only requires the file's signer, the leaf certificate, to have an EKU with the OID of <code>1.3.6.1.4.1.311.10.3.6</code>.</p> </li> </ul> <p></p>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#you-can-see-the-details-in-the-screenshots-below","title":"You can see the details in the screenshots below","text":""},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#the-placement-of-the-certeku-elements","title":"The Placement of the CertEKU Elements","text":"<p>In every Signer, the <code>CertEKU</code> node should only be placed directly after <code>CertRoot</code>. It is against the Code Integrity schema for any other nodes to exist between them. Below is a example of such configuration</p> <pre><code>&lt;Signer ID=\"ID_SIGNER_F_1\" Name=\"Microsoft Windows Production PCA 2011\"&gt;\n  &lt;CertRoot Type=\"TBS\" Value=\"TBS Hash\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_WINDOWS\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_RT_EXT\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_ELAM\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_WHQL\" /&gt;\n  &lt;CertPublisher Value=\"Microsoft Windows\" /&gt;\n  &lt;FileAttribRef RuleID=\"ID_FILEATTRIB_F_1\" /&gt;\n&lt;/Signer&gt;\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"WDAC/EKUs%20in%20WDAC%2C%20App%20Control%20for%20Business%2C%20Policies/#continue-reading","title":"Continue Reading","text":"<ul> <li>WDAC Policy for BYOVD Kernel Mode Only Protection</li> <li>WDAC Notes</li> <li>WDACConfig Module</li> </ul>"},{"location":"WDAC/Fast%20and%20Automatic%20Microsoft%20Recommended%20Driver%20Block%20Rules%20updates/","title":"Fast and Automatic Microsoft Recommended Driver Block Rules updates","text":"<p>The blocklist is updated with each new major release of Windows, typically 1-2 times per year, but you can deploy the recommended driver block rules policy more frequently.</p> <p>This is the GitHub source for the XML content shown on the Microsoft document website. You can see when the last time it was changed was, read the change history and commit messages. The script below automates the required steps explained on the document to download and deploy the recommended driver block rules. Make sure you are using the latest version of Windows.</p>"},{"location":"WDAC/Fast%20and%20Automatic%20Microsoft%20Recommended%20Driver%20Block%20Rules%20updates/#use-the-wdacconfig-module","title":"Use the WDACConfig Module","text":"<p>You can use the WDACConfig Module to create a scheduled task in Windows that will automatically run the script below every 7 days.</p> <pre><code>Install-Module -Name WDACConfig -Force\nNew-WDACConfig -SetAutoUpdateDriverBlockRules\n</code></pre> The script <pre><code>try {\n    Invoke-WebRequest -Uri 'https://aka.ms/VulnerableDriverBlockList' -OutFile VulnerableDriverBlockList.zip -ErrorAction Stop\n}\ncatch {\n    exit 1\n}\nExpand-Archive -Path .\\VulnerableDriverBlockList.zip -DestinationPath 'VulnerableDriverBlockList' -Force\nRename-Item -Path .\\VulnerableDriverBlockList\\SiPolicy_Enforced.p7b -NewName 'SiPolicy.p7b' -Force\nCopy-Item -Path .\\VulnerableDriverBlockList\\SiPolicy.p7b -Destination \"$env:SystemDrive\\Windows\\System32\\CodeIntegrity\"\ncitool --refresh -json\nRemove-Item -Path .\\VulnerableDriverBlockList -Recurse -Force\nRemove-Item -Path .\\VulnerableDriverBlockList.zip -Force\nexit 0\n</code></pre> <p></p> <p>Microsoft recommended driver block rules that are enforced as a result of using either memory integrity (also known as hypervisor-protected code integrity or HVCI), Smart App Control, or S mode, are saved in a file called <code>driversipolicy.p7b</code> in the <code>%windir%\\system32\\CodeIntegrity</code> directory. The file you will be downloading from Microsoft document is called <code>SiPolicy.p7b</code> and it won't overwrite the <code>driversipolicy.p7b</code> but it will take precedence over the <code>driversipolicy.p7b</code> when deployed, because it has newer version and you can verify it after using CiTool by observing the Code Integrity event logs as described in the document.</p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/","title":"Create and Deploy Signed WDAC Windows Defender Policy","text":""},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#introduction","title":"Introduction","text":"<ul> <li> <p>By deploying a Signed Windows Defender Application Control policy, a system will be secure and resistant to any form of tampering (if coupled with Bitlocker and other built-in security features), in a way that even the system administrator can't tamper or disable this security policy.</p> </li> <li> <p>The only way for this security feature to be turned off, modified, updated or disabled will be to have access to the certificate and certificate's private keys used to sign it.</p> </li> <li> <p>Refer to Microsoft's website or my other wiki posts If you want to learn about WDAC itself and how to create a customized WDAC policy for your own environment.</p> </li> <li> <p>Always test and deploy your WDAC policy in Audit mode first to make sure it works correctly, before deploying the Signed version of it.</p> <ul> <li>The WDACConfig module has an optional parameter called <code>-TestMode</code> that will deploy the policies with Boot Audit on Failure and Advanced Boot Options Menu policy rule options.</li> </ul> </li> <li> <p>Keep the xml file(s) of the deployed base policy(s) in a safe place, they are needed if you decide to disable the signed deployed WDAC policy later on.</p> </li> </ul> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#video-guide","title":"Video Guide","text":""},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#tldr-short-version","title":"TL;DR (Short version)","text":"<ol> <li>Install the latest Windows Server, Install AD/DS and AD/CS roles on it. (\u224815 mins depending on hardware and if downloaded ISO or VHDX)</li> <li>Use the Enterprise CA's code signing template to create a customized certificate template for WDAC Signing (\u22485 minutes)</li> <li>Generate the certificate and use it to sign the WDAC Policy (\u22483 minutes)</li> </ol> <p>That's essentially everything we have to do. So, if you are already familiar with the concepts, you can go straight to the bottom of this page and use the resources section to refer to Microsoft guides to create and deploy the Signed WDAC policy.</p> <p>But if you aren't familiar, keep reading as I've thoroughly explained every step to set up Windows Server, generate signing certificate and sign the WDAC policy. It takes about 20 minutes for me (as you can see in the video) and depending on the hardware, it can even take less time.</p> <p></p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#prerequisites","title":"Prerequisites","text":"<p>Latest Windows Server, it's free for 180 days for evaluation and comes in ISO and VHDX formats. Preferably use Windows Server insider vNext because it has the newest features and visual upgrades.</p> <ul> <li>Download Windows Server 2022 from Microsoft Evaluation Center</li> <li>Download Windows Server insider vNext<ul> <li>Insider activation keys</li> </ul> </li> </ul> <p></p> <p>Once we have our Windows installation media (ISO or VHDX), we need to set up a Hyper-V VM on our host. For this guide, our host is a Windows 11 pro for workstations machine.</p> <p>Create a Hyper-V VM with these specifications:</p> <ul> <li>Secure Boot</li> <li>Trusted Platform Module (TPM)</li> <li>At least 4 virtual processors</li> <li>At least 4 GB RAM</li> <li>At least ~20 GB storage</li> <li>Connect the Default Switch to the VM or create a Private Virtual switch in Virtual Switch Manager of Hyper-V manager, then add it as network adapter hardware to the VM.</li> </ul> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#windows-server-vm-setup","title":"Windows Server VM setup","text":"<p>After Windows Server installation has finished, you can create a Hyper-V standard checkpoint so you'll be able to restore the VM's state to this point in time if you misconfigure something later on.</p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#rename-the-server","title":"Rename the server","text":"<p>Choose a meaningful name, like <code>CAServer</code>. Use this PowerShell cmdlet to easily do that, it will restart the server to apply the new name.</p> <pre><code>Rename-Computer CAServer -Restart\n</code></pre> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#using-gui-install-active-directory-domain-services","title":"Using GUI: Install Active Directory Domain Services","text":"<p>From Server Manager =&gt; Add Roles and Features =&gt; Role-based or feature-based installation =&gt; Select the current server you are on =&gt; Select Active Directory Domain Services from the list =&gt; Select \"Add Features\" =&gt; Continue the rest of the steps by selecting Next.</p> <p>After installation is over, open the notifications in the Server Manager, (there will probably be a yellow icon on it), Select \"Promote this server to a domain controller\".</p> <p>In the Deployment Configuration window that will be opened, select \"Add a new forest\" and in the Root domain name, enter a domain name.</p> <p>It can be anything, even <code>Bing.com</code>, but for our usage let's use <code>CAServer.com</code>. On the next step, set a password for DSRM (Directory Services Restore Mode), It needs to have uppercase, lowercase and numbers (e.g., Bing6969), write this password down somewhere, like in Sticky notes app on your host.</p> <p>Next, choose a NetBIOS domain name, the default one will be OK. Confirm and proceed with the rest of the steps by selecting Next and at the end select Install. Wait for the installation to finish. It will restart the Server once the Installation is finished.</p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#using-powershell-install-active-directory-domain-services","title":"Using PowerShell: Install Active Directory Domain Services","text":"<p>Install (AD DS) role</p> <pre><code>Install-windowsfeature -name AD-Domain-Services -IncludeManagementTools\n</code></pre> <p>Install a forest and set a forest password</p> <pre><code>$password = ConvertTo-SecureString 'Bing6969' -AsPlainText -Force\n\nInstall-ADDSForest -DomainName CAServer.com -DomainNetbiosName CASERVER0 -SafeModeAdministratorPassword $password -InstallDNS:$false -Force\n</code></pre> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#using-gui-install-active-directory-certification-service-and-set-up-an-enterprise-root-ca-certificate-authority","title":"Using GUI: Install Active Directory Certification Service and set up an Enterprise root CA (Certificate Authority)","text":"<p>From Server Manager =&gt; Add Roles and Features =&gt; Role-based or feature-based installation =&gt; Select the current server we are on =&gt; Select Active Directory Certification Service =&gt; Select Next for the rest of the steps and finally select install.</p> <p>After installation is over, open the notifications in the Server Manager, (there will probably be a yellow icon on it), Select \"Configure Active Directory Certificate Service on the destination server\".</p> <p>On the newly opened configuration window, on credentials section select next, on the Role services section check the box for <code>Certification Authority</code> and select next.</p> <p>Select <code>Enterprise CA</code> (because Standalone CA does not support certificate templates that we are going to use) and select Next. On the CA Type section select <code>Root CA</code>. On the Private Key section select <code>Create a new private key</code>.</p> <p>On the Cryptography section, for Cryptographic Provider choose <code>RSA#Microsoft Software Key Storage Provider</code>, for Key length choose <code>4096</code>, for Hash Algorithm choose <code>SHA512</code> and select Next. On the CA name section select next. On the Validity Period section set validity period to something like 50 Years. Select next for the rest of the sections and finally select Configure.</p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#using-powershell-install-active-directory-certification-services-and-set-up-an-enterprise-root-ca","title":"Using PowerShell: Install Active Directory Certification Services and set up an Enterprise root CA","text":"<p>Install Active Directory Certificate Services</p> <pre><code>Install-WindowsFeature Adcs-Cert-Authority -IncludeAllSubFeature\n</code></pre> <p>Install a new Enterprise CA</p> <pre><code>Install-AdcsCertificationAuthority -CAType EnterpriseRootCa -CryptoProviderName \"RSA#Microsoft Software Key Storage Provider\" -KeyLength 4096 -HashAlgorithmName SHA512 -ValidityPeriod Years -ValidityPeriodUnits 50 -Force\n</code></pre> <p>Restart the server because it is required, and Server Manager says it too</p> <pre><code>Restart-Computer\n</code></pre> <p>Lastly do this so that Certification Authority option will be added to Server Manager =&gt; Tools and its GUI will become accessible and visible</p> <pre><code>Add-WindowsFeature Adcs-Cert-Authority -IncludeManagementTools\n</code></pre> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#configure-the-validity-period-of-the-issued-certificates-on-the-server","title":"Configure the Validity period of the issued certificates on the server","text":"<p>Microsoft guide for this</p> <p>We Increase the validity period of the certificates issued by the CA to 30 years:</p> <pre><code>certutil -setreg ca\\ValidityPeriod \"Years\"\ncertutil -setreg ca\\ValidityPeriodUnits \"30\"\n</code></pre> <p>Restart the Server after this step.</p> <p>You can verify and confirm the results using these commands:</p> <pre><code>certutil -getreg ca\\ValidityPeriod\ncertutil -getreg ca\\ValidityPeriodUnits\n</code></pre> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#follow-the-official-guide-to-create-certificate-template-and-generate-the-signing-certificate","title":"Follow the official guide to create certificate template and generate the signing certificate","text":"<p>Now open Certification Authority, you can do so by searching for it in Windows search or from Server Manager =&gt; Tools. Once you open it, you can follow the guide from Microsoft to create the certificate template for WDAC policy signing and then request and create a certificate.</p> <p></p> <p>Note that If the Server doesn't have at least 1 network adapter connected to it, then Certificate Templates don't load,</p> Screenshot <p>That's why our Hyper-V VM Server needs at least one Virtual Network Adapter.</p> <p></p> <p>The guide suggests using a client computer to request and create the certificate but since we are going to use the certificate for non-domain-joined computers and don't need to use the Active Directory, we can perform all of the steps on the same Windows Server VM.</p> <p>These are some optional deviations from the official guide that result in creating a successful and more secure certificate for our WDAC policy signing:</p> <ul> <li> <p>On the Compatibility tab, you can select Windows Server 2016 from the Certification Authority list and select Windows 10 / Windows Server 2016 from the Certificate recipient list.</p> </li> <li> <p>On the General tab, you can set the Validity period to 30 years and Renewal period to 22 years. (The maximum allowed Renewal period for the validity period we chose.)</p> </li> <li> <p>On the Cryptography tab, you can set the Provider Category to <code>Key Storage Provider</code> (KSP). Set the Algorithm Name to <code>RSA</code>. Set the Minimum key size to <code>4096</code>. Set Request hash to <code>SHA512</code>.</p> </li> </ul> <p>As the Microsoft's guide suggests, you need to go to security tab to verify account access of the user(s) requesting the certificate, but since we are requesting and creating our certificate on the same CA server, we don't need to change anything there.</p> <p></p>  If we want to use a 2nd PC to do this, as described in Microsoft document (Totally Unnecessary)   Additional steps to perform on Windows Server   If you are going to create a new user account in \"Active Directory Users and Computers\" for use on the client VM, in Certification Authority when duplicating the certificate template, go to Security Tab and set the correct permissions for that user account so that it will be able to request and enroll the certificate.  For instance, since you are the only person who is going to use the Active Directory, you can even give `Full Control` permission to `Authenticated Users` group.  Alternatively, you can use the same administrator account that you are currently using on Windows Server, which exists by default in the Active Directory, to log into the other client computer. One can log into multiple computers with the same user account across an Active Directory domain. There is no limit by default to how many concurrent logins an active directory user can have.  Make sure the Windows Server and Windows client VMs both use the same Hyper-V Private Virtual switch network adapter. The VMs need to have static IP addresses on the same subnet in order to communicate with each other.  Go to Windows Settings =&gt; Network &amp; Internet =&gt; Ethernet =&gt; in \"IP Assignment\" select \"Edit\" =&gt; Set it to \"Manual\" =&gt; Toggle the IPv4 =&gt; in IP Address Enter `10.10.10.1` and in Subnet Mask enter `255.0.0.0`. Without configuring anything else, save it.  Use the Edit button for DNS server assignment, set it to Manual, toggle the IPv4 button and in the Preferred DNS field enter `127.0.0.1`. Save everything and exit settings.    Steps to perform on Client VM   Make sure the client VM is running the latest version of Windows, and it follows the same prerequisites explained above.  Go to Windows Settings =&gt; Network &amp; Internet =&gt; Ethernet =&gt; in \"IP Assignment\" select \"Edit\" =&gt; Set it to \"Manual\" =&gt; Toggle the IPv4 =&gt; in IP Address Enter `10.10.10.2` and in Subnet Mask enter `255.0.0.0`. Without configuring anything else, save it.  Now use the Edit button for DNS server assignment, set it to Manual, toggle the IPv4 button and in the Preferred DNS field enter the static IP address of the Windows Server VM, which was `10.10.10.1`. Save everything and exit settings.  Open an elevated PowerShell and enter this to join the Active Directory domain:  <pre><code>Add-Computer -DomainName &lt;Domain&gt; -Restart\n</code></pre>  You will be asked for credentials. If you are going to use the same Administrator account from Windows Server, use `Administrator` for username and enter the password of the Windows Server in the password field, otherwise use the password you set when creating the new user account in Active Directory Users and Computers.  After the client machine restarted, use `Other user` option on the lock screen and this time you will be using the Active Directory credentials to log into the machine. If using the built-in Administrator account, the password will be the same as the password on Windows Server account, but the username will be in the  format, so in this case, it will be `Administrator@CAServer.com`.  Since you are using Administrator account, you can by default use Enhanced session in Hyper-V too.  To request the certificate and enroll it, you can follow the Microsoft guide.   <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#create-a-signed-wdac-policy","title":"Create a Signed WDAC policy","text":"<p>Once we have the certificate in the User Certificates store of either the Windows Server or a client machine, Right-click on it =&gt; All tasks =&gt; Export. Export the Private key and export all the Extended Properties, set a password for the certificate and set Encryption to <code>AES256-SHA256</code>. Select a location to export and it will create a <code>.pfx</code> file.</p> <p>You also need to export the certificate without private key, in <code>DER encoded binary X.509</code> format which will create a <code>.cer</code> certificate file. We need this certificate to sign the WDAC policy.</p> <p>It is important to keep these 2 files, specially <code>.pfx</code> that contains the private key, in a safe place, such as Azure Key Vault Managed HSM or OneDrive Personal Vault, so that if you delete all the VMs you created, you will be able to continue using the same certificate to sign further WDAC policies and supplemental policies, at least for the next 22 years, before it needs a renewal. As you can see, all of that setup must be done just once every few decades.</p> <p>The Personal Information Exchange (.pfx) file has great importance because it contains the Public key and Private key of the certificate so anyone who has access to this file can disable the deployed Signed WDAC policy. It should never be shared with anyone outside your circle of trust. It is a password-protected file by nature.</p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#use-wdacconfig-module-to-sign-and-deploy-wdac-policies","title":"Use WDACConfig module to sign and deploy WDAC policies","text":"<p>WDACConfig module with the <code>Deploy-SignedWDACConfig</code> cmdlet can automate the entire process of signing and deploying a signed WDAC policy.</p> <pre><code>Deploy-SignedWDACConfig -CertPath &lt;String&gt; -PolicyPaths &lt;String[]&gt; -CertCN &lt;String&gt;\n</code></pre> <p>Cmdlet Info</p> <p></p> <p>You need the <code>signtool.exe</code> to sign the <code>.cip</code> policy binary files.</p> <ul> <li>Download the latest Windows stable SDK installer</li> <li>Download the latest Windows Insider SDK ISO</li> </ul> <p>Run it and only select <code>Windows SDK Signing Tools for Desktop Apps</code> to install. After that <code>signtool.exe</code> will be placed at <code>C:\\Program Files (x86)\\Windows Kits\\10\\bin</code> and the WDACConfig module will automatically detect and use it for signing. You can even copy the executable to another location for later usage on another system where SDK is not installed and then use the optional <code>-SignToolPath &lt;String&gt;</code> parameter of WDACConfig module to browse for executable.</p> <ul> <li>SignTool is also included in the Windows ADK but the one in SDK is the newest and recommended place to get it.</li> </ul> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#use-wdacconfig-module-to-remove-signed-and-deployed-wdac-policies","title":"Use WDACConfig module to remove signed and deployed WDAC policies","text":"<pre><code>Remove-WDACConfig [-SignedBase] -PolicyPaths &lt;String[]&gt; -CertCN &lt;String&gt;\n</code></pre>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#parameter-info","title":"Parameter Info","text":"<p>After running the command above and restarting the system, you need to run this command and restart for a 2nd time, to finish completely removing the signed base policies from the system.</p> <pre><code>Remove-WDACConfig [-UnsignedOrSupplemental] [-PolicyIDs &lt;String[]&gt;] [-PolicyNames &lt;String[]&gt;]\n</code></pre>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#parameter-info_1","title":"Parameter Info","text":""},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#system-behavior","title":"System Behavior","text":""},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#activation-process","title":"Activation Process","text":"<p>After the signed WDAC policy binary <code>.cip</code> is copied to the <code>EFI</code> partition as part of the deployment process, and system is restarted oncee, we can see in System Information that WDAC user-mode is being enforced and when you try to install an application not permitted by the deployed policy, it will be successfully blocked. At this point, since we are using UEFI Secure Boot, the Anti Tampering protection of the Signed WDAC kicks in and starts protecting WDAC policy against any tampering. We need to reboot the system one more time, to verify everything and make sure there is no boot failure.</p> <p>Deploying a Signed WDAC policy without restarting is the same as deploying Unsigned policies, because the Signed policy can be easily removed just like an Unsigned policy. So always make sure you restart at least once after deploying a Signed WDAC policy.</p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#if-someone-forcefully-deletes-the-deployed-wdac-policy-file","title":"If Someone forcefully deletes the deployed WDAC policy file","text":"<ul> <li> <p>Deleting the <code>.cip</code> policy file from <code>C:\\Windows\\System32\\CodeIntegrity\\CiPolicies\\Active</code> and then restarting the system multiple times won't have any effect at all on the status of WDAC. It will continue to work, and enforcement status will be shown in System Information. This is how it protects itself against rogue administrators.</p> </li> <li> <p>Deleting the <code>.cip</code> policy file from the <code>EFI</code> partition located at <code>\\EFI\\Microsoft\\Boot\\CIPolicies\\Active</code> and restarting the device will result in a boot failure. Before system restart, nothing happens and it will remain active. This is another self-protection method of a Signed WDAC policy. To recover from this state, the person will need to disable Secure Boot in the UEFI firmware settings. There are only 3 scenarios at this point:</p> </li> <li> <p>If, as suggested in the Security Recommendations, you set a strong password for the UEFI firmware of your hardware, they can't access the firmware. This security measure alongside the rest of the Windows built-in security features such as BitLocker device encryption will provide the Ultimate protection for a Windows device against any threats and any person, no matter physical, real-life or Internet threats.</p> </li> <li> <p>If UEFI firmware is not password protected, the person can disable Secure Boot and/or TPM in UEFI firmware settings, they can even flash the entire UEFI firmware memory by physically abusing the device to get past the UEFI password, but since the device is BitLocker protected, a total Lock Down will be triggered and the person will need to provide the 48-digit recovery key of the OS drive in order to even complete the boot process into Windows lock screen. Assuming the person also has access to the Windows PIN, they will also need to provide 48-digit recovery password of any subsequent BitLocker protected drive(s) in order to access them (if the drive(s) aren't set to be auto-unlocked with OS drive). This is more than Security-In-Depth. If UEFI firmware has any unpatched vulnerability, Device Guard features will take care of it.</p> </li> <li> <p>Since steps 1 and 2 are impossible to bypass for a rouge person, there will be only one option left. To completely recycle the physical device, get rid of the inaccessible hardware such as SSD and then sell the remaining hardware parts. Either way, your data remains secure and inaccessible to any unauthorized person(s) at all times.</p> </li> </ul> Screenshot of a message after forcefully deleting a Signed WDAC policy from the EFI partition <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#when-we-activate-smart-app-control","title":"When we activate Smart App Control","text":"<p>After completely deploying the Signed WDAC policy, if we turn on Smart App Control, which is a variation of WDAC, then it will take control of the Windows Defender Application Control User Mode Policy. After turning off Smart App Control, the signed WDAC policy will automatically take the control. So, after deploying the Signed WDAC policy, Smart App Control can either be turned on or turned off, either way, the signed WDAC policy will not be disabled and will turn on as soon as Smart App Control is turned off.</p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#dual-boot-os-configurations","title":"Dual boot OS configurations","text":"<p>When you deploy a Signed WDAC policy on a system that uses Secure Boot, it will be enforced on all of the OSes that boot on the physical machine, because the policy resides on the EFI partition. This means that if you perform a clean install of a second Windows OS or natively boot a VHDX (Hyper-V VM), the policy will apply to them as well.</p> <p></p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#extras","title":"Extras","text":""},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#how-to-interact-with-the-hidden-efi-partition","title":"How to interact with the hidden EFI partition","text":"<p>Using Diskpart, Open an elevated PowerShell console and run these commands one by one:</p> <pre><code>diskpart\nlist disk\n# double check to make sure it's the correct disk if you have more than 1\nselect disk 0\nlist part\n# The EFI partitions type is System, and its size is approximately 100MB, make sure you choose the correct one\nselect part 1\nassign letter=z\n</code></pre> <p></p> <p>The <code>EFI</code> partition will be available in This PC with letter <code>Z</code>, but you can't access it without modifying permissions. There is however an easier way to access it and manually copy the Signed WDAC policy binary to it. Open Task Manager as admin, select <code>Run New Task</code>, select <code>Browse</code> and now you can access drive <code>Z</code> (<code>EFI</code> partition) and copy the Signed <code>.cip</code> file in <code>Z:\\EFI\\Microsoft\\Boot\\CIPolicies\\Active</code>.</p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#how-to-find-the-fqdn-fully-qualified-domain-name-of-the-windows-server","title":"How to find the FQDN (Fully Qualified Domain Name) of the Windows Server","text":"<p>Using PowerShell</p> <pre><code>(Get-ADComputer $(hostname)).DNSHostName\n</code></pre> <p>or</p> <pre><code>\"$env:computername.$env:userdnsdomain\"\n</code></pre> <p>You can also use GUI of Server Manager =&gt; Local Server</p> <p>The syntax is: <code>Computer_Name.Domain</code></p> <p>So, if:</p> <ul> <li>Computer Name: <code>CAServer</code></li> <li>Domain: <code>CAServer.com</code></li> </ul> <p>then FQDN is: <code>CAServer.CAServer.com</code></p> <p></p>"},{"location":"WDAC/How%20to%20Create%20and%20Deploy%20a%20Signed%20WDAC%20Policy%20Windows%20Defender%20Application%20Control/#resources","title":"Resources","text":"<ul> <li>Use signed policies to protect Windows Defender Application Control against tampering</li> <li>Create a code signing cert for Windows Defender Application Control</li> <li>Deploying signed policies</li> <li>WDAC Policy Wizard</li> <li>Generate Windows Defender Application Control (WDAC) policies Online</li> <li>WDAC policy creation - Australian Government</li> <li>Understand Windows Defender Application Control (WDAC) policy rules and file rules</li> <li>Install Active Directory Domain Services</li> <li>Install-AdcsCertificationAuthority</li> <li>Install the Certification Authority</li> <li>Comparison of Standard, Datacenter, and Datacenter: Azure Edition editions of Windows Server 2022</li> <li>Remove Windows Defender Application Control (WDAC) policies</li> <li>Add-SignerRule</li> </ul>"},{"location":"WDAC/Introduction/","title":"Introduction","text":""},{"location":"WDAC/Introduction/#introduction","title":"Introduction","text":""},{"location":"WDAC/Introduction/#what-is-windows-defender-application-control","title":"What is Windows Defender Application Control?","text":"<p>Application control is a crucial line of defense for protecting enterprises given today's threat landscape, and it has an inherent advantage over traditional antivirus solutions. Specifically, application control moves away from an application trust model where all applications are assumed trustworthy to one where applications must earn trust in order to run.</p> <p>Devices where Windows Defender Application control (WDAC) policies are deployed on can either be centrally managed via MDM, Intune etc. or they can be home devices, devices that are private and don't belong to any organization, the computer of someone that you want to keep 100% safe and secure so that even the device's owner can't willingly or forcefully compromise themselves, the possibilities are endless.</p> <p></p>"},{"location":"WDAC/Introduction/#windows-defender-application-control-wdac-wiki-posts","title":"Windows Defender Application Control (WDAC) wiki posts","text":"<ul> <li>Introduction</li> <li>WDACConfig Module</li> <li>WDAC for Lightly managed device</li> <li>WDAC for Fully managed device - Variant 1</li> <li>WDAC for Fully managed device - Variant 2</li> <li>WDAC for Fully managed device - Variant 3</li> <li>WDAC for Fully managed device - Variant 4</li> <li>WDAC Notes</li> <li>How to Create and Deploy a Signed WDAC Policy</li> <li>Fast and Automatic Microsoft Recommended Driver Block Rules updates</li> <li>WDAC policy for BYOVD Kernel mode only protection</li> </ul>"},{"location":"WDAC/Introduction/#my-wdacconfig-module","title":"My WDACConfig Module","text":"<p>WDACConfig is an advanced PowerShell module designed with the aim of automating Application and File whitelisting in Windows using Windows Defender Application Control. Install it from PowerShell gallery.</p> <p></p>"},{"location":"WDAC/Introduction/#wdac-usage-levels","title":"WDAC usage levels","text":"<p>There are many ways you can utilize WDAC features and here they are sorted by the level of restriction and protection they provide; From top (having the least restriction and protection) to bottom (having the most restriction and protection).</p> <ol> <li> <p>Use Microsoft recommended driver block rules.</p> <ul> <li>No user action required. Starting with Windows 11 2022 update, the vulnerable driver blocklist is enabled by default for all devices, using HVCI or Memory Integrity.</li> <li>The built-in driver blocklist is updated with each new major release of Windows, typically 1-2 times per year.</li> </ul> </li> <li> <p>Update Microsoft recommended driver block rules outside of the twice a year schedule.</p> <ul> <li>The drivers block list itself is updated more frequently than twice a year schedule, use my WDAC Module to download and apply them regularly and automatically.</li> </ul> </li> <li>Use Microsoft recommended block rules PLUS Recommended driver block rules<ul> <li>The WDAC XML policy content is provided here, copy them, create a new XML file and paste the content in it and save it. Reset its policy ID and convert it to multiple policy format. Convert it to <code>.cip</code> policy binary and then deploy it. Keep it up to date by regularly repeating this.</li> </ul> </li> <li>Create WDAC policy for Lightly managed devices<ul> <li>Microsoft's guide: Create a WDAC policy for lightly managed devices</li> <li>My guide: WDAC for Lightly Managed Devices</li> </ul> </li> <li>Use Smart App Control<ul> <li>It's just a toggle in Windows Security under App &amp; Browser control. It uses a special kind of WDAC policy that provides more protection than a lightly managed workstation but less protection than a fully managed workstation.</li> <li>It uses both of Microsoft's recommended block rules.</li> </ul> </li> <li>Create WDAC policy for Fully managed devices<ul> <li>The following scenarios provide the highest protection against any threats from any sources when cryptographically signed and deployed and properly configured.</li> <li>WDAC for Fully managed device - Variant 1</li> <li>WDAC for Fully managed device - Variant 2</li> <li>WDAC for Fully managed device - Variant 3</li> <li>WDAC for Fully managed device - Variant 4</li> <li>Microsoft's guide: Create a WDAC policy for fully managed devices</li> <li>Microsoft's guide: Create a WDAC policy for fixed-workload devices (reference computer)</li> <li>Microsoft's guide: Use audit events to create WDAC policy rules</li> </ul> </li> </ol> <p></p>"},{"location":"WDAC/Introduction/#methods-we-can-use-to-create-a-wdac-policy","title":"Methods we can use to create a WDAC policy","text":"<ul> <li>Using PowerShell cmdlets</li> <li>Using WDACConfig PowerShell module</li> <li>Using WDAC Policy Wizard</li> </ul>"},{"location":"WDAC/Introduction/#plan-for-windows-defender-application-control-lifecycle-policy-management","title":"Plan for Windows Defender Application Control lifecycle policy management","text":"<p>Microsoft provides the following official document to understand the decisions you need to make to establish the processes for managing and maintaining Windows Defender Application Control (WDAC) policies. The rest of them are mentioned below at the Resources section.</p> <p></p>"},{"location":"WDAC/Introduction/#resources","title":"Resources","text":"<p>There are a lot more WDAC resources and cmdlets available on Microsoft's websites.</p>"},{"location":"WDAC/Introduction/#cmdlets","title":"Cmdlets","text":"<ul> <li>New-CIPolicy</li> <li>New-CIPolicyRule</li> <li>Merge-CIPolicy</li> <li>Set-RuleOption</li> <li>Set-CIPolicyIdInfo</li> </ul>"},{"location":"WDAC/Introduction/#documents","title":"Documents","text":"<ul> <li>Application Control for Windows</li> <li>Understand Windows Defender Application Control policy design decisions</li> <li>Deploying Windows Defender Application Control (WDAC) policies</li> <li>Use multiple Windows Defender Application Control Policies</li> <li>Use audit events to create WDAC policy rules</li> <li>Merge Windows Defender Application Control (WDAC) policies</li> <li>Understand Windows Defender Application Control (WDAC) policy rules and file rules</li> <li>Testing and Debugging AppId Tagging Policies</li> <li>Editing existing base and supplemental WDAC policies with the Wizard</li> <li>Creating a new Supplemental Policy with the Wizard</li> <li>Generate Windows Defender Application Control (WDAC) policies Online</li> <li>Windows Defender Application Control (WDAC) example base policies</li> <li>Configure the Application Identity service</li> <li>Microsoft recommended driver block rules</li> <li>Microsoft recommended block rules</li> <li>Create a WDAC policy using a reference computer (for fixed-workload devices)</li> <li>Create a WDAC policy for fully managed devices</li> <li>Create a WDAC policy for lightly managed devices</li> <li>Guidance on Creating WDAC Deny Policies</li> <li>Hypervisor-protected Code Integrity enablement</li> </ul>"},{"location":"WDAC/WDAC%20Notes/","title":"Important Notes and Tips about WDAC policies","text":"<ul> <li>WDAC stands for Windows Defender Application Control</li> <li>It's used for Application and File whitelisting in Windows.</li> </ul>"},{"location":"WDAC/WDAC%20Notes/#supplemental-wdac-policy-considerations","title":"Supplemental WDAC Policy Considerations","text":""},{"location":"WDAC/WDAC%20Notes/#verify-policy-type","title":"Verify Policy type","text":"<p>We have to make sure the WDAC policy that we are going to use as a supplemental policy has <code>PolicyType=\"Supplemental Policy\"</code> in the <code>SiPolicy</code> element of the XML file. If it doesn't, then we have to use this command to change it from base policy to supplemental policy of our base policy.</p> <p>That will also change/create the <code>&lt;BasePolicyID&gt;GUID&lt;/BasePolicyID&gt;</code> element in the supplemental policy XML file. The GUID will be the <code>PolicyID</code> of the base policy specified in the command.</p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#verify-policy-rule-options","title":"Verify Policy Rule options","text":"<p>We have to make sure that the supplemental policy does not contain any policy rule options that only work with a base policy. This chart shows which ones can be used in a supplemental policy.</p> <p></p> <p>You can use this PowerShell code to automatically make sure non-supplemental policy rule options don't exist in a supplemental policy XML file:</p> <pre><code>$supplementalPolicyPath = \".\\Supplemental_Policy.xml\"\n@(0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 15, 16, 17, 19, 20) | ForEach-Object {\n    Set-RuleOption -FilePath $supplementalPolicyPath -Option $_ -Delete\n}\n</code></pre> <p></p> <p>A supplemental policy can only have these policy rule options:</p> <ul> <li>5 Enabled:Inherit Default Policy</li> <li>6 Enabled:Unsigned System Integrity Policy (Default)</li> <li>7 Allowed:Debug Policy Augmented</li> <li>13 Enabled:Managed Installer</li> <li>14 Enabled:Intelligent Security Graph Authorization</li> <li>18 Disabled:Runtime FilePath Rule Protection</li> </ul> <p></p>"},{"location":"WDAC/WDAC%20Notes/#deny-rules-in-supplemental-policy-are-invalid","title":"Deny Rules in Supplemental Policy Are Invalid","text":"<p>Deny rules are ignored in supplemental policies by WDAC engine. Supplemental policies are only meant to expand what the base policy trusts, that's why only allow rules are supported in supplemental policies, and that's also the reason why we don't need to merge Microsoft recommended block rules or driver block rules with a supplemental policy.</p> <p>When the base policy has a deny rule for a file and we allow the same file in a supplemental policy, the file will still be blocked, because explicit deny rules have the highest priority.</p> <p>Rule Precedence</p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#signing-a-supplemental-policy","title":"Signing a Supplemental Policy","text":"<p>Suppose you have a base policy and this base policy will have supplemental policies later on. To add the details of the code signing certificate to the base policy in order to get it ready for signing, you need to use the <code>-Supplemental</code> switch parameter with the Add-SignerRule cmdlet. If you don't do that, the signed base policy after deployment won't accept any signed supplemental policies. The <code>-Supplemental</code> parameter can only be used for a base policy.</p> <ul> <li>Using <code>-Supplemental</code> parameter with <code>Add-SignerRule</code> cmdlet on a Supplemental policy will cause boot failure after deploying it, because that parameter should only be used when adding signer rules to a base policy.</li> </ul> <p></p>"},{"location":"WDAC/WDAC%20Notes/#removing-supplemental-policies","title":"Removing Supplemental Policies","text":"<p>Whether the deployed supplemental policy is unsigned or signed, you can remove it just like any unsigned policy using CITool.</p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#what-if-you-deploy-unsigned-supplemental-policy-on-signed-system","title":"What if You Deploy Unsigned Supplemental Policy on Signed System?","text":"<p>If you deploy an unsigned supplemental policy on a system where all policies including base and supplemental, are signed, the deployed unsigned supplemental policy will be ignored.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#how-deny-rules-for-files-and-certificatessigners-are-specified","title":"How Deny Rules for Files and Certificates/Signers Are Specified","text":""},{"location":"WDAC/WDAC%20Notes/#denied-file-rules","title":"Denied File Rules","text":"<p>First, Block/Deny File rules are specified in <code>&lt;FileRules&gt;</code> element which is directly under <code>&lt;SiPolicy&gt;</code> element in the XML file. Deny rules are created by having <code>&lt;Deny ID=\"ID_DENY_\"</code> at the beginning of their lines. For example:</p> <pre><code>&lt;Deny ID=\"ID_DENY_AGENT64_SHA1\" FriendlyName=&lt;Textual Description/Name&gt; Hash=&lt;Hash Numbers&gt; /&gt;\n</code></pre> <p></p> <p>Second, there are File Reference rules for each Deny rule that only mentions them by ID, and these are exactly the same as Allow rules because only Rule IDs are mentioned and nothing about the nature of the rule itself. These are in:</p> <pre><code>&lt;SiPolicy&gt;\n    &lt;SigningScenarios&gt;\n        &lt;SigningScenario&gt;\n            &lt;ProductSigners&gt;\n                &lt;FileRulesRef&gt;\n                    &lt;FileRuleRef RuleID=\"&lt;The same ID of the Deny File rule mentioned earlier&gt;\" /&gt;\n                &lt;/FileRulesRef&gt;\n            &lt;/ProductSigners&gt;\n        &lt;/SigningScenario&gt;\n    &lt;/SigningScenarios&gt;\n&lt;/SiPolicy&gt;\n ```\n\n&lt;br&gt;\n\n### Denied Certificates/Signer\n\nDenied certificates/signers are first mentioned in `&lt;SiPolicy` =&gt; `&lt;Signers&gt;` with the following syntax:\n\n```xml\n&lt;Signer ID=\"ID_SIGNER_VERISIGN_2010\" Name=\"VeriSign Class 3 Code Signing 2010 CA\"&gt;\n... Other possible attributes ...\n&lt;/Signer&gt;\n</code></pre> <p>Unlike file rules, this first part doesn't specify whether the certificate/signer must be allowed or blocked by the WDAC policy.</p> <p>In order to specify whether a certificate/signer should be denied/allowed, the ID of each signer must be specified in the second part of the XML policy file in <code>&lt;DeniedSigners&gt;</code> element:</p> <pre><code>&lt;SigningScenarios&gt;\n    &lt;SigningScenario Value=\"131\" ID=\"ID_SIGNINGSCENARIO_&lt;Some generic String&gt;\" FriendlyName=\"&lt;Name&gt;\"&gt;\n        &lt;ProductSigners&gt;\n            &lt;DeniedSigners&gt;\n                &lt;DeniedSigner SignerId=\"&lt;ID of the Signer mentioned above in the &lt;Signers&gt; section&gt;\" /&gt;\n            &lt;/DeniedSigners&gt;\n        &lt;/ProductSigners&gt;\n    &lt;/SigningScenario&gt;\n&lt;/SigningScenarios&gt;\n</code></pre>"},{"location":"WDAC/WDAC%20Notes/#guidance-on-creating-wdac-deny-policies","title":"Guidance on Creating WDAC Deny Policies","text":""},{"location":"WDAC/WDAC%20Notes/#how-to-verify-the-status-of-user-mode-and-kernel-mode-wdac-on-a-system","title":"How to Verify the Status of User-Mode and Kernel-Mode WDAC on a System","text":""},{"location":"WDAC/WDAC%20Notes/#using-powershell","title":"Using PowerShell","text":"<pre><code>Get-CimInstance -ClassName Win32_DeviceGuard -Namespace root\\Microsoft\\Windows\\DeviceGuard | select -Property *codeintegrity* | fl\n</code></pre> <p><code>2</code> means Enforced, <code>1</code> means Audit mode, <code>0</code> means Disabled/Not running.</p>"},{"location":"WDAC/WDAC%20Notes/#using-system-information","title":"Using System Information","text":"<p> <ul> <li>Windows Defender Application Control Policy (Kernel Mode)</li> <li>Windows Defender Application Control User Mode Policy (User Mode)</li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#refreshing-wdac-policies","title":"Refreshing WDAC Policies","text":""},{"location":"WDAC/WDAC%20Notes/#using-the-built-in-citool","title":"Using the built-in CiTool","text":"<pre><code>CITool --refresh\n</code></pre>"},{"location":"WDAC/WDAC%20Notes/#old-method-using-refreshpolicyamd64exe","title":"Old Method: using RefreshPolicy(AMD64).exe","text":"<p>Using RefreshPolicy(AMD64).exe only works when you add a new policy to the Windows folder, but when you delete a policy from that folder, running RefreshPolicy(AMD64).exe won't make the apps that were previously allowed to run by the policy we just deleted, to be blocked from running again. so after we remove a policy from Windows folder, a system restart is required.</p> <p>This makes sense because apps that have been previously allowed to run by a policy that we just deleted might be still running in the background or even foreground, so to properly stop them, just running <code>RefreshPolicy(AMD64).exe</code> isn't enough and data loss could've occurred if that was the case.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#about-signingscenarios-node-in-the-wdac-policy-xml","title":"About <code>&lt;SigningScenarios&gt;</code> Node in the WDAC Policy XML","text":"<p>It consists of 2 elements:</p> <p>This one contains the Certificates/Signers of the Kernel-mode drivers</p> <pre><code>&lt;SigningScenario Value=\"131\" ID=\"ID_SIGNINGSCENARIO_DRIVERS_1\" FriendlyName=\"Driver Signing Scenarios\"&gt;\n</code></pre> <p>And this one contains the Certificates/Signers of the User-mode binaries</p> <pre><code>&lt;SigningScenario Value=\"12\" ID=\"ID_SIGNINGSCENARIO_WINDOWS\" FriendlyName=\"User Mode Signing Scenarios\"&gt;\n</code></pre> <p>Only the <code>Value</code> needs to stay the same. So, for Kernel-mode drivers it should always be 131 and for User-mode binaries it should always be 12, anything else can be customized.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#merging-policies","title":"Merging Policies","text":"<p><code>Merge-cipolicy</code> cmdlet does not include duplicates, neither duplicate rules nor rules with duplicate file hashes.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#wdac-forces-allow-list-architecture-by-nature","title":"WDAC Forces Allow-list Architecture by Nature","text":"<p>WDAC forces Allow-list architecture by nature, not deny-list architecture. An empty deployed policy allows nothing to run and leads to system failure. This is why Microsoft recommended blocklists include 2 Allow All rules with the Deny rules, that changes the WDAC policy's nature from being an Allow-list to being a Deny-list.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#about-microsoft-recommended-block-rules","title":"About Microsoft Recommended Block Rules","text":""},{"location":"WDAC/WDAC%20Notes/#microsoft-recommended-block-rules","title":"Microsoft Recommended Block Rules","text":"<p>From Microsoft recommended block rules document, copy the WDAC policy XML at the end (you might need to expand that section to view it), use a text editor like VS Code to edit it as recommended:</p> <p>The blocklist policy includes \"Allow all\" rules for both kernel and user mode files that make it safe to deploy as a standalone WDAC policy. We can even deploy it side-by-side with AllowMicrosoft policy, by keeping its allow all rules in place. Refer to this document about how multiple base policies work.</p> <p>\"Only applications allowed by both policies (All Base policies) run without generating block events\", that means even though the Microsoft recommended block rules have 2 allow all rules, they don't actually allow everything to run, because the same allow all rules don't exist in the default AllowMicrosoft policy, it only contains explicit allow rules.</p> <p>On Windows versions 1903 and above, Microsoft recommends converting this policy to multiple policy format using the <code>Set-CiPolicyIdInfo</code> cmdlet with the <code>-ResetPolicyId</code> switch. Then, you can deploy it as a Base policy side-by-side with any other policies in your environment.</p> <p>If merging into an existing policy that includes an explicit allowlist, you should first remove the two \"Allow all\" rules and their corresponding FileRuleRefs:</p> <pre><code>&lt;Allow ID=\"ID_ALLOW_A_1\" FriendlyName=\"Allow Kernel Drivers\" FileName=\"*\" /&gt;\n&lt;Allow ID=\"ID_ALLOW_A_2\" FriendlyName=\"Allow User mode components\" FileName=\"*\" /&gt;\n</code></pre> <pre><code>&lt;FileRuleRef RuleID=\"ID_ALLOW_A_1\" /&gt;\n&lt;FileRuleRef RuleID=\"ID_ALLOW_A_2\" /&gt;\n</code></pre> <p></p>"},{"location":"WDAC/WDAC%20Notes/#microsoft-recommended-driver-block-rules","title":"Microsoft Recommended Driver Block Rules","text":"<ul> <li> <p>Deploying Microsoft recommended block rules (Driver or user mode) alone, after removing the allow all rules from them, will cause boot failure, for obvious reasons.</p> </li> <li> <p>How to check the version of Microsoft recommended driver block rules that are being enforced</p> </li> <li> <p>The version is mentioned in Code Integrity operational event logs with an event ID of <code>3099</code> in the General tab.</p> </li> <li> <p>We don't need to use the Recommended Kernel Block Rules in WDAC when creating a policy because it's already being enforced by default and if we want to update it more regularly, we can do so by following this section of the document. Or by Fast and Automatic Microsoft Recommended Driver Block Rules updates.</p> </li> </ul> <p></p> <p>Citation: If you only manage Windows 11 22H2 systems (and above), then you don't need the recommended driver block rules in your WDAC policy. Otherwise, you should have the driver block rules in your policy. In either scenario, you should have the recommended user mode rules.</p> <p></p> <p>Citation: ISG does not include the recommended blocklist(s).</p> <p></p> <p>Citation: About deploying new Signed WDAC policies rebootlessly using CITool.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#miscellaneous","title":"Miscellaneous","text":"<ul> <li> <p>Set the hypervisor Code Integrity option for the WDAC policy XML file to Strict only after using <code>Add-SignerRule</code> cmdlet, because after running <code>Add-SignerRule</code> cmdlet, the <code>&lt;HvciOptions&gt;</code> resets to <code>0</code>.</p> </li> <li> <p>Using Signtool.exe with <code>-fd certHash</code> will default to the algorithm used on the signing certificate. For example, if the certificate has <code>SHA512</code> hashing algorithm, the file that is being signed will use the same algorithm.</p> </li> <li> <p>Sometimes New-CIPolicy Cmdlet creates 2 file rules for each driver file, such as <code>.sys</code> files. One of them is stored in Driver signing scenarios section under <code>&lt;SigningScenario Value=\"131\" ID=\"ID_SIGNINGSCENARIO_DRIVERS_1\" FriendlyName=\"\"&gt;</code> and the other is stored in User mode signing scenarios section under <code>&lt;SigningScenario Value=\"12\" ID=\"ID_SIGNINGSCENARIO_WINDOWS\" FriendlyName=\"\"&gt;</code>. More info here</p> </li> <li> <p>File rule levels and Cmdlets like New-CiPolicy only create rules for files with supported extensions. The table in this page lists all of the support file extensions.</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#blocking-individual-windows-components","title":"Blocking Individual Windows components","text":""},{"location":"WDAC/WDAC%20Notes/#blocking-microsoft-store","title":"Blocking Microsoft Store","text":"<pre><code>$Package = Get-AppXPackage -Name \"Microsoft.WindowsStore\"\n$Rules += New-CIPolicyRule -Package $Package -Deny\nNew-CIPolicy -FilePath \".\\store.xml\" -Rules $Rules\n</code></pre>"},{"location":"WDAC/WDAC%20Notes/#file-rule-levels-security","title":"File Rule Levels Security","text":"<p>(For User Mode binaries only)</p> <ul> <li> <p>Hash (Best for any files, especially unsigned files)</p> </li> <li> <p>FilePublisher (Best for Signed files)</p> </li> <li> <p>SignedVersion (More permissive than FilePublisher, usable only for signed files)</p> </li> </ul> <p>The rest are less secure and more permissive than the 3 file rule levels mentioned above.</p> <p>P.S FileName relies on the original filename for each binary, which can be modified.</p> <p>Find more information in Microsoft Learn</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#how-to-remove-flight-signing-certificates-from-default-example-policies","title":"How to Remove Flight Signing Certificates From Default Example Policies","text":"<p>Removing these shouldn't cause any problem as long as you are using stable OS version</p> <pre><code># Flight root Certs removal\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_STORE_FLIGHT_ROOT\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_WINDOWS_FLIGHT_ROOT\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_ELAM_FLIGHT\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_HAL_FLIGHT\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_WHQL_FLIGHT_SHA2\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_WINDOWS_FLIGHT_ROOT_USER\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_ELAM_FLIGHT_USER\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_HAL_FLIGHT_USER\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_WHQL_FLIGHT_SHA2_USER\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_RT_FLIGHT\"\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#how-to-remove-wdac-policy-refresh-tool-certificates-from-default-example-policies","title":"How to Remove WDAC Policy Refresh Tool Certificates From Default Example Policies","text":"<p>Starting with Windows 11 22H2, CITool is available in Windows by default and Refresh tool is no longer needed, so use the commands below to remove the certificates that allow that tool to be executed, their order of execution is important.</p> <ul> <li>Remove-CIPolicyRule</li> <li>Note</li> </ul> <pre><code>Remove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_SIGNER_MICROSOFT_REFRESH_POLICY\"\nRemove-CIPolicyRule -FilePath \"DefaultWindows_Enforced.xml\" -Id \"ID_FILEATTRIB_REFRESH_POLICY\"\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#allowing-questionable-software-in-a-wdac-policy","title":"Allowing Questionable Software in a WDAC Policy","text":"<p>Questionable software such as pirated software are never recommended to be allowed in the WDAC policy because they are tampered with. Pirated software can have signed files too, but they are modified and as a result there is a mismatch between the file hash and the hash of the file saved in their digital signature. When such a mismatch exists for signed files, Authenticode reports the mismatch, and the file can't be allowed in a WDAC policy.</p> <p>If you want to go through many files and see which ones have a mismatch between their file hash and signature hash, you can use the following PowerShell (core) command, it searches through a folder and all of its sub-folders quickly using parallel operations:</p> <p></p> <pre><code>Get-ChildItem -Recurse -Path \"Path\\To\\a\\Folder\" -File | ForEach-Object -Parallel {Get-AuthenticodeSignature -FilePath $_.FullName} | Where-Object {$_.Status -eq 'HashMismatch'}\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#about-the-concurrent-deployed-wdac-policies-limit","title":"About the Concurrent Deployed WDAC Policies Limit","text":"<p>The limit as stated in the official document is 32 active policies on a device at once. That is the total number of Base policies + Supplemental policies + any active system deployed policies.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#performing-system-reset-while-signed-wdac-policy-is-deployed","title":"Performing System Reset While Signed WDAC Policy Is Deployed","text":"<p>If you've deployed a Signed WDAC policy on a system and then decide to reset it, either using local install or cloud download, it will fail during the reset process. You must remove the signed WDAC policy prior to performing the reset.</p> <p>Unsigned WDAC policies don't have this behavior. Since they are neither cryptographically signed nor tamper-proof, they will be removed during the reset process and after reset the system will not have the WDAC policy.</p> <p>This behavior is true for Lightly managed, Allow Microsoft and Default Windows WDAC policy types.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#citool-no-longer-requires-guidcip-naming-convention-for-deployment","title":"Citool No Longer Requires GUID.cip Naming Convention for Deployment","text":"<p>Normally, <code>.cip</code> files would have to have the same name as the GUID of the xml file they were converted from, but that's no longer necessary. Using CiTool in Windows 11 build <code>22621</code>, they can be deployed with any name, even without a name, and lead to a successful WDAC policy deployment.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#policies-with-requiredev-signers-rule-option","title":"Policies with Required:EV Signers rule option","text":"<p>If a base policy has rule option number 8, Required:EV Signers, it will require all kernel-mode drivers to have EV signer certificates. You cannot bypass this requirement with a Supplemental policy, you cannot allowlist non-EV signed files in any way. Non-EV signed files will be blocked even if the base policy is in Audit mode. This is true for any type of base policy such as Default Windows, Allow Microsoft, Strict Kernel mode etc.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#the-following-policy-rule-options-only-apply-to-user-mode-binariesdrivers","title":"The Following Policy Rule Options Only Apply to User Mode Binaries/Drivers","text":"<ul> <li> <p>Enabled:Dynamic Code Security (generation)</p> </li> <li> <p>Required:Enforce Store Applications</p> </li> </ul> <p>When we remove the <code>SigningScenario Value=\"12\"</code> completely which is responsible for User Mode code integrity in the xml policy and also remove any signers that belong to User mode section, such as those that have <code>_user</code> in their ID, the Merge-CIPolicy cmdlet automatically removes EKUs that belong to the policy rule options mentioned above during a merge.</p> <p>Removing the User mode signers, rules and <code>Enabled:UMCI</code> rule option allows us to create a Kernel-only WDAC policy that doesn't touch User mode binaries/drivers.</p> <p>For a Kernel-mode only WDAC policy, only the following EKUs are necessary</p> <pre><code>&lt;EKUs&gt;\n    &lt;EKU ID=\"ID_EKU_WINDOWS\" Value=\"010A2B0601040182370A0306\" FriendlyName=\"\" /&gt;\n    &lt;EKU ID=\"ID_EKU_ELAM\" Value=\"010A2B0601040182373D0401\" FriendlyName=\"\" /&gt;\n    &lt;EKU ID=\"ID_EKU_HAL_EXT\" Value=\"010a2b0601040182373d0501\" FriendlyName=\"\" /&gt;\n    &lt;EKU ID=\"ID_EKU_WHQL\" Value=\"010A2B0601040182370A0305\" FriendlyName=\"\" /&gt;\n&lt;/EKUs&gt;\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#you-can-merge-the-same-policy-xml-file-with-itself","title":"You Can Merge the Same Policy XML File With Itself","text":"<p>In order to automatically remove unnecessary things from a policy file, such as the EKUs mentioned earlier, you can run a command like this:</p> <pre><code>Merge-CIPolicy .\\Policy.xml -OutputFilePath .\\Policy1.xml\n</code></pre> <p>It essentially merges a policy with itself, adding <code>_0</code> to each ID and SignerID of the xml nodes which is easily removable using WDACConfig module, although it's not necessary to remove them at all, they are perfectly fine.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#-audit-parameter-of-the-configci-cmdlets","title":"-Audit Parameter of the ConfigCi Cmdlets","text":"<p>When you use <code>-Audit</code> parameter of ConfigCI cmdlets such as Get-SystemDriver and New-CIPolicy, these 2 event logs are scanned</p> <ol> <li>AppLocker \u2013 MSI and Script event log</li> <li>CodeIntegrity - Operational</li> </ol> <p>Explained more in here</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#about-double-signed-files-and-filepublisher-level","title":"About Double-Signed Files and Filepublisher Level","text":"<p>Sometimes there are files that are signed by 2 certificates, aka double signed files.</p> <p>When FilePublisher level is used, WDAC creates rules for both of the intermediate certificates of those files, and each rule will have a signer assigned to it. If the file is either User mode only or Kernel mode only, then 2 Signers will be created for it, one for each certificate.</p> <p>Depending on Kernel or use mode, 2 Allowed Signers are created for the file in either UMCI or KMCI Signing scenario sections.</p> <p>However, if the file is a kernel mode driver and user mode driver, then 4 signers are created for it, 2 Allowed Signers in the UMCI Signing Scenario and 2 in the KMCI Signing scenario.</p>"},{"location":"WDAC/WDAC%20Notes/#an-example","title":"An example","text":"<p>In the signer below</p> <pre><code>&lt;Signer ID=\"ID_SIGNER_F_2\" Name=\"Microsoft Windows Third Party Component CA 2014\"&gt;\n    &lt;CertRoot Type=\"TBS\" Value=\"D8BE9E4D9074088EF818BC6F6FB64955E90378B2754155126FEEBBBD969CF0AE\" /&gt;\n    &lt;CertPublisher Value=\"Microsoft Windows Hardware Compatibility Publisher\" /&gt;\n    &lt;FileAttribRef RuleID=\"ID_FILEATTRIB_F_46\" /&gt;\n&lt;/Signer&gt;\n</code></pre> <p></p> <ul> <li><code>Name=\"Microsoft Windows Third Party Component CA 2014\"</code> is the Common name of the Intermediate certificate of the file</li> <li><code>Value=\"D8BE9E4D9074088EF818BC6F6FB64955E90378B2754155126FEEBBBD969CF0AE\"</code> is the TBS (To Be Signed) values of the same Intermediate certificate</li> <li><code>Value=\"Microsoft Windows Hardware Compatibility Publisher\"</code> is the Common name of the Leaf certificate of the file</li> </ul> <p></p>"},{"location":"WDAC/WDAC%20Notes/#some-notes","title":"Some Notes","text":"<ol> <li> <p>If 2 files have the same Leaf certificate CN and also have an Intermediate certificate in common (that has the same TBS and CN) then they should be listed under the same Signer.</p> </li> <li> <p>Any Intermediate certificate in the certificate chain/path of a file can be used to allow a file using FilePublisher.</p> </li> </ol> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#what-does-hvci-option-set-to-strict-mean","title":"What Does HVCI option Set to Strict Mean?","text":"<p>HVCI stands for Hypervisor-protected Code Integrity and it is a feature that uses virtualization-based security (VBS) to protect the Windows kernel from memory attacks. HVCI can be set to different options in a WDAC policy, such as Enabled, DebugMode, or Strict. Setting HVCI to Strict in a WDAC policy provides the highest level of protection for kernel mode code integrity, as it enforces these additional restrictions:</p> <ul> <li> <p>It prevents unsigned drivers from loading, even if they are allowed by the WDAC policy. It prevents drivers that are not compatible with HVCI from loading, even if they are signed and allowed by the WDAC policy.</p> </li> <li> <p>It prevents drivers that have been tampered with or modified from loading, even if they are signed and allowed by the WDAC policy.</p> </li> <li> <p>Setting HVCI to Strict in a WDAC policy can help prevent malware or attackers from exploiting vulnerabilities in kernel mode drivers or bypassing the WDAC policy enforcement.</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#about-certificates-and-certificate-chains","title":"About Certificates and Certificate Chains","text":"<ul> <li> <p>A file can have only one root certificate at the end of the chain. The root certificate is always self-signed by the CA itself (meaning its IssuerCN and SubjectCN are the same) and it is the ultimate source of trust for the chain that validates it. Having more than one root certificate would imply that there are multiple chains of trust for the same file, which is not possible.</p> </li> <li> <p>A file can have more than 1 intermediate certificate and there is no definitive limit for it, but in practice, it is recommended to keep the certificate chain as short as possible.</p> </li> <li> <p>A file can have only one leaf certificate at the beginning of the chain. The leaf certificate is the one that belongs to the file itself and contains its public key and other information. Having more than one leaf certificate would imply that there are multiple files with different identities and keys, which is not possible.</p> </li> <li> <p>Leaf, intermediate and root are the only types of certificates a file can have in a certificate chain. There are other types of certificates that are not part of a chain, such as self-signed certificates or wildcard certificates, but they are not relevant to WDAC policies.</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20Notes/#continue-reading-about-byovd-protection-with-wdac","title":"Continue reading about BYOVD protection with WDAC","text":""},{"location":"WDAC/WDAC%20Notes/#wdac-policy-for-byovd-kernel-mode-only-protection","title":"WDAC policy for BYOVD Kernel mode only protection","text":""},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20%282nd%20variant%29/","title":"WDAC policy for Fully managed device - Variant 2","text":"Base policy type Method used Signed Protection score 1-5 Default Windows WDACConfig module No 4 <pre><code>flowchart TD\n    A(Deploy Default Windows base policy) --&gt;B(Identify Important apps that need Supplemental policy)\n    B --&gt; C(Create and Deploy Supplemental policies for them)\n    C --&gt; D[Another App is getting blocked?]\n    D --&gt; E[Is it a normal app?]\n    E --&gt; F[Create Supplemental policy based on App's directory]\n    D --&gt; G[Is it a game Installed using Xbox app?]\n    G --&gt; H[Is it an app that installs drivers outside app's directory?]\n    H --&gt; I[Use Event viewer logs + game/app's directory scan]\n    I --&gt; J[Edit-WDACConfig -AllowNewAppsAuditEvents]\n    I --&gt; K[Edit-SignedWDACConfig -AllowNewAppsAuditEvents]\n    D --&gt; L[Want to allow an entire folder?]\n    L --&gt; M[Use folder path with one or more Wildcards]\n    M --&gt; N[New-SupplementalWDACConfig -FilePathWildCards]\n    F --&gt; O[Edit-WDACConfig -AllowNewApps]\n    F --&gt; P[Edit-SignedWDACConfig -AllowNewApps]\n    F --&gt; Q[New-SupplementalWDACConfig -Normal]</code></pre>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20%282nd%20variant%29/#video-guide","title":"Video Guide","text":"<p>Every time I use the word \"App\", I'm referring to regular Win32 programs as well as Microsoft Store installed apps; Basically, any software that you can run.</p> <p>This scenario provides a very high protection level. Using the WDACConfig module, it's very easy to deploy, manage and maintain a system with this configuration.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20%282nd%20variant%29/#deploy-the-default-windows-base-policy-on-the-system","title":"Deploy the Default Windows Base Policy on the System","text":"<p>Start by deploying the Default Windows base policy on the system, which allows only files and apps that come pre-installed in Windows to run and anything else is blocked.</p> <p>Since this is an unsigned policy, no reboot is required but it's better to perform a reboot if you want the currently running non-Windows apps to stop running.</p> <p></p> <pre><code>New-WDACConfig -MakeDefaultWindowsWithBlockRules -Deploy\n</code></pre> <ul> <li>Cmdlet info</li> </ul> <p>After deploying the base policy, you can create Supplemental policies to allow other apps that don't come by default with Windows to run. To do that, you have multiple options.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20%282nd%20variant%29/#creating-supplemental-policy-for-apps-already-installed","title":"Creating Supplemental Policy for Apps Already Installed","text":"<p>If you deployed the Default Windows base policy on a system that already had apps installed, you can create Supplemental policy for them using the following syntaxes:</p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20%282nd%20variant%29/#based-on-signer-rules-hashes-file-names-etc","title":"Based on signer rules, hashes, file names etc.","text":"<pre><code>New-SupplementalWDACConfig -Normal -ScanLocation \"C:\\Program Files\\Program\" -SuppPolicyName \"App's Name\" -PolicyPath \"C:\\DefaultWindowsPlusBlockRules.xml\" -Deploy\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20%282nd%20variant%29/#based-on-file-path-with-one-or-more-wildcard-characters","title":"Based on File path with one or more wildcard characters","text":"<pre><code>New-SupplementalWDACConfig -FilePathWildCards -WildCardPath \"C:\\Program Files\\Program\\*\" -SuppPolicyName \"App's Name\" -PolicyPath\n\"C:\\DefaultWindowsPlusBlockRules.xml\" -Deploy\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20%282nd%20variant%29/#based-on-an-installed-windows-apps-name","title":"Based on an installed Windows app's name","text":"<pre><code>New-SupplementalWDACConfig -InstalledAppXPackages -PackageName \"*App's name*\" -SuppPolicyName \"App's name\" -PolicyPath \"C:\\DefaultWindowsPlusBlockRules.xml\" -Deploy\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20%282nd%20variant%29/#creating-supplemental-policy-for-new-app-installations-or-apps-already-installed","title":"Creating Supplemental Policy for New App Installations or Apps Already Installed","text":"<p>If the app you are trying to allow isn't installed and when you try to install it you see a blocked/error message, you can use the following syntaxes to allow them to run and then automatically create Supplemental policy for them.</p> <p>These methods also work for apps that were installed prior to deploying the Default Windows base policy and now you want to allow them to run by creating Supplemental policy for them.</p> <p>You can create a Supplemental policy for more than 1 app at a time by browsing for multiple apps' install directories using the commands below.</p> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20%282nd%20variant%29/#based-on-apps-install-directory-and-event-viewer-logs","title":"Based on App's install directory and Event viewer logs","text":"<pre><code>Edit-WDACConfig -AllowNewAppsAuditEvents -SuppPolicyName \"App's Name\" -PolicyPath \"C:\\DefaultWindowsPlusBlockRules.xml\" -LogSize 20MB\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20%282nd%20variant%29/#based-on-apps-install-directory-only","title":"Based on App's install directory only","text":"<pre><code>Edit-WDACConfig -AllowNewApps -SuppPolicyName \"App's Name\" -PolicyPath \"C:\\DefaultWindowsPlusBlockRules.xml\"\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20%282nd%20variant%29/#what-to-do-if-you-have-a-lot-of-supplemental-policies","title":"What to Do if You Have a Lot of Supplemental Policies?","text":"<p>Currently, the limit for the number of policies (Base + Supplemental) that can be deployed on a system at a time is 32. So if you are getting close to that limit, you can merge some or all of your Supplemental policies automatically into 1 using the command below:</p> <pre><code>Edit-WDACConfig -MergeSupplementalPolicies -SuppPolicyName \"Merge of Multiple Supplementals\" -PolicyPath \"C:\\DefaultWindowsPlusBlockRules.xml\" -SuppPolicyPaths \"C:\\Supplemental policy for App1.xml\",\"C:\\Supplemental policy for App 2.xml\",\"C:\\Supplemental policy for App 3.xml\"\n</code></pre> <ul> <li>Parameter info</li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20%282nd%20variant%29/#what-to-do-when-there-is-an-update-for-an-allowed-app","title":"What to Do When There Is an Update for an Allowed App?","text":"<p>If you've created a Supplemental policy for an app that is already installed and now there is a newer version of that app available, you have multiple options:</p> <ol> <li> <p>If the Supplemental policy that you created to allow that app is based on FilePath with wildcards, then the app can be updated and no change in policy is required.</p> </li> <li> <p>If the Supplemental policy is based on PFN (Package Family Name) of the app, available only for apps that use MSIX installers, like some of the modern apps installed through Microsoft Store, then you don't need to take any action and the app will be updated without any issues.</p> </li> <li> <p>If the Supplemental policy is only based on the app's digital signature, which is common for well-made apps, then you don't need to take any further action. As long as the new version of the app has the same digital signature / developer identity, then it will be allowed to run.</p> </li> <li> <p>If the Supplemental policy is based on individual File Paths (in contrast to wildcard FilePath rules), or based on FileName rules, then most likely there is no need for any further action to be taken as long as the new app's version uses the same file names or the same file paths for its components.</p> </li> <li> <p>If the Supplemental policy is based on Hash of the app's files, either partially (mixed with signer rules) or entirely (for apps without any digital identity/signature) then all you have to do is to remove the deployed Supplemental policy and create a new Supplemental policy for the app using live audit mode in the module as explained above. Don't need to reboot immediately, but to finish the removal process of a Supplemental policy, whether it's signed or unsigned, a reboot will be eventually needed.</p> </li> </ol> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%203/","title":"WDAC policy for Fully managed device - Variant 3","text":"Base policy type Method used Signed Protection score 1-5 Allow Microsoft WDACConfig module Yes 4.5 <pre><code>flowchart TD\n    A(Deploy Allow Microsoft Signed base policy) --&gt;B(Start running your programs)\n    B --&gt; C[An App is getting blocked?]\n    C --&gt; D[Is it a normal app?]\n    D --&gt; E[Create Supplemental policy based on App's directory]\n    E --&gt; F[New-SupplementalWDACConfig -Normal]\n    F --&gt; G[Deploy-SignedWDACConfig]\n    E --&gt; H[Edit-SignedWDACConfig -AllowNewApps]\n    C --&gt; I[Is it a game Installed using Xbox app?]\n    I --&gt; J[Is it an app that installs drivers outside app's directory?]\n    J --&gt; K[Use Event viewer logs + game/app's directory scan]\n    K --&gt; L[Edit-SignedWDACConfig -AllowNewAppsAuditEvents]\n    C --&gt; M[Want to allow an entire folder?]\n    M --&gt; N[Use folder path with one or more Wildcards]\n    N --&gt; O[New-SupplementalWDACConfig -FilePathWildCards]</code></pre>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%203/#video-guide","title":"Video Guide","text":"<p>Every time I use the word \"App\", I'm referring to regular Win32 programs as well as Microsoft Store installed apps; Basically, any software that you can run.</p> <p>This scenario provides a very high protection level. Using the WDACConfig module, it's very easy to deploy, manage and maintain a system with this configuration.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%203/#deploy-the-allow-microsoft-base-policy-on-the-system","title":"Deploy the Allow Microsoft base policy on the system","text":"<p>Start by creating the Allow Microsoft base policy xml file, which allows only files and apps that are signed by Microsoft's trusted root certificate.</p> <pre><code>New-WDACConfig -MakeAllowMSFTWithBlockRules\n</code></pre> <ul> <li>Parameter info</li> </ul> <p></p> <p>Now what we have the policy xml file for the Allow Microsoft base policy, we need to sign and deploy it.</p> <pre><code>Deploy-SignedWDACConfig -CertPath \"C:\\Certificate.cer\" -PolicyPaths \"C:\\AllowMicrosoftPlusBlockRules.xml\" -CertCN \"WDAC Certificate\" -Deploy\n</code></pre> <ul> <li>Cmdlet info</li> </ul> <p></p> <p>Since this is a signed base policy, you need to perform a reboot after deployment so that the anti-tamper protection of a signed base policy will start.</p> <p>After deploying the base policy, you can create Supplemental policies to allow other apps that aren't signed by Microsoft's trusted root certificate to run. To do that, you have multiple options.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%203/#creating-supplemental-policy-for-apps-already-installed","title":"Creating Supplemental policy for apps already installed","text":"<p>If you deployed the Allow Microsoft base policy on a system that already had apps installed, you can create Supplemental policy for them using the following syntaxes. After creating each Supplemental policy, you need to sign and deploy it using the same Cmdlet we used above.</p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%203/#based-on-signer-rules-hashes-file-names-etc","title":"Based on signer rules, hashes, file names etc.","text":"<pre><code>New-SupplementalWDACConfig -Normal -ScanLocation \"C:\\Program Files\\Program\" -SuppPolicyName \"App's Name\" -PolicyPath \"C:\\AllowMicrosoftPlusBlockRules.xml\"\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%203/#based-on-file-path-with-one-or-more-wildcard-characters","title":"Based on File path with one or more wildcard characters","text":"<pre><code>New-SupplementalWDACConfig -FilePathWildCards -WildCardPath \"C:\\Program Files\\Program\\*\" -SuppPolicyName \"App's Name\" -PolicyPath\n\"C:\\AllowMicrosoftPlusBlockRules.xml\"\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%203/#based-on-an-installed-windows-apps-name","title":"Based on an installed Windows app's name","text":"<pre><code>New-SupplementalWDACConfig -InstalledAppXPackages -PackageName \"*App's name*\" -SuppPolicyName \"App's name\" -PolicyPath \"C:\\AllowMicrosoftPlusBlockRules.xml\"\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%203/#creating-supplemental-policy-for-new-app-installations-or-apps-already-installed","title":"Creating Supplemental Policy for New App Installations or Apps Already Installed","text":"<p>If the app you are trying to allow isn't installed and when you try to install it you see a blocked/error message, you can use the following syntaxes to allow them to run and then automatically create Supplemental policy for them.</p> <p>These methods also work for apps that were installed prior to deploying the Allow Microsoft base policy and now you want to allow them to run by creating Supplemental policy for them.</p> <p>You can create a Supplemental policy for more than 1 app at a time by browsing for multiple apps' install directories using the commands below.</p> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%203/#based-on-apps-install-directory-and-event-viewer-logs","title":"Based on App's install directory and Event viewer logs","text":"<pre><code>Edit-SignedWDACConfig -AllowNewAppsAuditEvents -CertPath \"C:\\Certificate.cer\" -SuppPolicyName \"App's Name\" -PolicyPath \"C:\\AllowMicrosoftPlusBlockRules.xml\" -CertCN \"WDAC Certificate\" -LogSize 20MB\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%203/#based-on-apps-install-directory-only","title":"Based on App's install directory only","text":"<pre><code>Edit-SignedWDACConfig -AllowNewApps -CertPath \"C:\\Certificate.cer\" -SuppPolicyName \"App's Name\" -PolicyPath \"C:\\AllowMicrosoftPlusBlockRules.xml\" -CertCN \"WDAC Certificate\"\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%203/#what-to-do-if-you-have-a-lot-of-supplemental-policies","title":"What to Do if You Have a Lot of Supplemental Policies?","text":"<p>Currently, the limit for the number of policies (Base + Supplemental) that can be deployed on a system at a time is 32. So if you are getting close to that limit, you can merge some or all of your Supplemental policies automatically into 1 using the command below:</p> <pre><code>Edit-SignedWDACConfig -MergeSupplementalPolicies -CertPath \"C:\\Certificate.cer\" -SuppPolicyName \"Merge of Multiple Supplementals\" -PolicyPath \"C:\\AllowMicrosoftPlusBlockRules.xml\" -CertCN \"WDAC Certificate\" -SuppPolicyPaths \"C:\\Supplemental policy for App1.xml\",\"C:\\Supplemental policy for App 2.xml\",\"C:\\Supplemental policy for App 3.xml\"\n</code></pre> <ul> <li>Parameter info</li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%203/#what-to-do-when-there-is-an-update-for-an-allowed-app","title":"What to Do When There Is an Update for an Allowed App?","text":"<p>If you've created a Supplemental policy for an app that is already installed and now there is a newer version of that app available, you have multiple options:</p> <ol> <li> <p>If the Supplemental policy that you created to allow that app is based on FilePath with wildcards, then the app can be updated and no change in policy is required.</p> </li> <li> <p>If the Supplemental policy is based on PFN (Package Family Name) of the app, available only for apps that use MSIX installers, like some of the modern apps installed through Microsoft Store, then you don't need to take any action and the app will be updated without any issues.</p> </li> <li> <p>If the Supplemental policy is only based on the app's digital signature, which is common for well-made apps, then you don't need to take any further action. As long as the new version of the app has the same digital signature / developer identity, then it will be allowed to run.</p> </li> <li> <p>If the Supplemental policy is based on individual File Paths (in contrast to wildcard FilePath rules), or based on FileName rules, then most likely there is no need for any further action to be taken as long as the new app's version uses the same file names or the same file paths for its components.</p> </li> <li> <p>If the Supplemental policy is based on Hash of the app's files, either partially (mixed with signer rules) or entirely (for apps without any digital identity/signature) then all you have to do is to remove the deployed Supplemental policy and create a new Supplemental policy for the app using live audit mode in the module as explained above. Don't need to reboot immediately, but to finish the removal process of a Supplemental policy, whether it's signed or unsigned, a reboot will be eventually needed.</p> </li> </ol> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%204/","title":"WDAC policy for Fully managed device - Variant 4","text":"Base policy type Method used Signed Protection score 1-5 Default Windows WDACConfig module Yes 5 <pre><code>flowchart TD\n    A(Deploy Default Windows base policy) --&gt;B(Identify Important apps that need Supplemental policy)\n    B --&gt; C(Create and Deploy Supplemental policies for them)\n    C --&gt; D[Another App is getting blocked?]\n    D --&gt; E[Is it a normal app?]\n    E --&gt; F[Create Supplemental policy based on App's directory]\n    D --&gt; G[Is it a game Installed using Xbox app?]\n    G --&gt; H[Is it an app that installs drivers outside app's directory?]\n    H --&gt; I[Use Event viewer logs + game/app's directory scan]\n    I --&gt; J[Edit-WDACConfig -AllowNewAppsAuditEvents]\n    I --&gt; K[Edit-SignedWDACConfig -AllowNewAppsAuditEvents]\n    D --&gt; L[Want to allow an entire folder?]\n    L --&gt; M[Use folder path with one or more Wildcards]\n    M --&gt; N[New-SupplementalWDACConfig -FilePathWildCards]\n    F --&gt; O[Edit-WDACConfig -AllowNewApps]\n    F --&gt; P[Edit-SignedWDACConfig -AllowNewApps]\n    F --&gt; Q[New-SupplementalWDACConfig -Normal]</code></pre>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%204/#video-guide","title":"Video Guide","text":"<p>Every time I use the word \"App\", I'm referring to regular Win32 programs as well as Microsoft Store installed apps; Basically, any software that you can run.</p> <p>This scenario provides the ultimate protection level. Using the WDACConfig module, it's very easy to deploy, manage and maintain a system with this configuration.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%204/#deploy-the-default-windows-base-policy-on-the-system","title":"Deploy the Default Windows Base Policy on the System","text":"<p>Start by creating the Default Windows base policy xml file, which allows only files and apps that come pre-installed in Windows to run and anything else is blocked.</p> <pre><code>New-WDACConfig -MakeDefaultWindowsWithBlockRules -IncludeSignTool\n</code></pre> <ul> <li>Parameter info</li> </ul> <p></p> <p>Now what we have the policy xml file for the Default Windows base policy, we need to sign and deploy it.</p> <pre><code>Deploy-SignedWDACConfig -CertPath \"C:\\Certificate.cer\" -PolicyPaths \"C:\\DefaultWindowsPlusBlockRules.xml\" -CertCN \"WDAC Certificate\" -Deploy\n</code></pre> <ul> <li>Cmdlet info</li> </ul> <p></p> <p>Since this is a signed base policy, you need to perform a reboot after deployment so that the anti-tamper protection of a signed base policy will start.</p> <p>After deploying the base policy, you can create Supplemental policies to allow other apps that don't come by default with Windows to run. To do that, you have multiple options.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%204/#creating-supplemental-policy-for-apps-already-installed","title":"Creating Supplemental Policy for Apps Already Installed","text":"<p>If you deployed the Default Windows base policy on a system that already had apps installed, you can create Supplemental policy for them using the following syntaxes. After creating each Supplemental policy, you need to sign and deploy it using the same Cmdlet we used above.</p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%204/#based-on-signer-rules-hashes-file-names-etc","title":"Based on signer rules, hashes, file names etc.","text":"<pre><code>New-SupplementalWDACConfig -Normal -ScanLocation \"C:\\Program Files\\Program\" -SuppPolicyName \"App's Name\" -PolicyPath \"C:\\DefaultWindowsPlusBlockRules.xml\"\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%204/#based-on-file-path-with-one-or-more-wildcard-characters","title":"Based on File path with one or more wildcard characters","text":"<pre><code>New-SupplementalWDACConfig -FilePathWildCards -WildCardPath \"C:\\Program Files\\Program\\*\" -SuppPolicyName \"App's Name\" -PolicyPath\n\"C:\\DefaultWindowsPlusBlockRules.xml\"\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%204/#based-on-an-installed-windows-apps-name","title":"Based on an installed Windows app's name","text":"<pre><code>New-SupplementalWDACConfig -InstalledAppXPackages -PackageName \"*App's name*\" -SuppPolicyName \"App's name\" -PolicyPath \"C:\\DefaultWindowsPlusBlockRules.xml\"\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%204/#creating-supplemental-policy-for-new-app-installations-or-apps-already-installed","title":"Creating Supplemental Policy for New App Installations or Apps Already Installed","text":"<p>If the app you are trying to allow isn't installed and when you try to install it you see a blocked/error message, you can use the following syntaxes to allow them to run and then automatically create Supplemental policy for them.</p> <p>These methods also work for apps that were installed prior to deploying the Default Windows base policy and now you want to allow them to run by creating Supplemental policy for them.</p> <p>You can create a Supplemental policy for more than 1 app at a time by browsing for multiple apps' install directories using the commands below.</p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%204/#based-on-apps-install-directory-and-event-viewer-logs","title":"Based on App's install directory and Event viewer logs","text":"<pre><code>Edit-SignedWDACConfig -AllowNewAppsAuditEvents -CertPath \"C:\\Certificate.cer\" -SuppPolicyName \"App's Name\" -PolicyPath \"C:\\DefaultWindowsPlusBlockRules.xml\" -CertCN \"WDAC Certificate\" -LogSize 20MB\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%204/#based-on-apps-install-directory-only","title":"Based on App's install directory only","text":"<pre><code>Edit-SignedWDACConfig -AllowNewApps -CertPath \"C:\\Certificate.cer\" -SuppPolicyName \"App's Name\" -PolicyPath \"C:\\DefaultWindowsPlusBlockRules.xml\" -CertCN \"WDAC Certificate\"\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%204/#what-to-do-if-you-have-a-lot-of-supplemental-policies","title":"What to Do if You Have a Lot of Supplemental Policies?","text":"<p>Currently, the limit for the number of policies (Base + Supplemental) that can be deployed on a system at a time is 32. So if you are getting close to that limit, you can merge some or all of your Supplemental policies automatically into 1 using the command below:</p> <pre><code>Edit-SignedWDACConfig -MergeSupplementalPolicies -CertPath \"C:\\Certificate.cer\" -SuppPolicyName \"Merge of Multiple Supplementals\" -PolicyPath \"C:\\DefaultWindowsPlusBlockRules.xml\" -CertCN \"WDAC Certificate\" -SuppPolicyPaths \"C:\\Supplemental policy for App1.xml\",\"C:\\Supplemental policy for App 2.xml\",\"C:\\Supplemental policy for App 3.xml\"\n</code></pre> <ul> <li>Parameter info</li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices%20Variant%204/#what-to-do-when-there-is-an-update-for-an-allowed-app","title":"What to Do When There Is an Update for an Allowed App?","text":"<p>If you've created a Supplemental policy for an app that is already installed and now there is a newer version of that app available, you have multiple options:</p> <ol> <li> <p>If the Supplemental policy that you created to allow that app is based on FilePath with wildcards, then the app can be updated and no change in policy is required.</p> </li> <li> <p>If the Supplemental policy is based on PFN (Package Family Name) of the app, available only for apps that use MSIX installers, like some of the modern apps installed through Microsoft Store, then you don't need to take any action and the app will be updated without any issues.</p> </li> <li> <p>If the Supplemental policy is only based on the app's digital signature, which is common for well-made apps, then you don't need to take any further action. As long as the new version of the app has the same digital signature / developer identity, then it will be allowed to run.</p> </li> <li> <p>If the Supplemental policy is based on individual File Paths (in contrast to wildcard FilePath rules), or based on FileName rules, then most likely there is no need for any further action to be taken as long as the new app's version uses the same file names or the same file paths for its components.</p> </li> <li> <p>If the Supplemental policy is based on Hash of the app's files, either partially (mixed with signer rules) or entirely (for apps without any digital identity/signature) then all you have to do is to remove the deployed Supplemental policy and create a new Supplemental policy for the app using live audit mode in the module as explained above. Don't need to reboot immediately, but to finish the removal process of a Supplemental policy, whether it's signed or unsigned, a reboot will be eventually needed.</p> </li> </ol> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices/","title":"WDAC policy for Fully Managed device - Variant 1","text":"Base policy type Method used Signed Protection score 1-5 Allow Microsoft / Default Windows WDACConfig module No 4"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices/#video-guide","title":"Video Guide","text":"<ul> <li> <p>This variant helps you create and deploy a WDAC policy for fully managed device using only Event Viewer audit logs.</p> </li> <li> <p>This scenario includes using explicit Allow rules for files and certificates/signers, anything not allowed by the policies we are going to make are automatically denied/blocked.</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices/#prepare-a-virtual-machine","title":"Prepare a Virtual Machine","text":"<p>Install Hyper-V role from optional Windows features if you haven't already.</p> <pre><code>Enable-WindowsOptionalFeature -Online -FeatureName Containers-DisposableClientVM -All -norestart\n</code></pre> <p></p> <p>Download the latest Windows <code>.ISO</code> file from Microsoft website, create a new VM with it, install Windows and log in. Fully update Windows and then restart to apply the updates. You can create a Hyper-V checkpoint at this point so that you can return back to this clean state later on if you need to.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices/#prepare-a-base-policy","title":"Prepare a Base policy","text":"<p>There are 2 types of base policies you can choose from.</p> <ol> <li> <p>Allow Microsoft: Allows only files and apps that are signed by Microsoft's trusted root certificates.</p> </li> <li> <p>Default Windows: Allows only files and apps that come pre-installed by Windows.</p> </li> </ol> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices/#deploy-the-allow-microsoft-prep-mode-base-policy","title":"Deploy the Allow Microsoft Prep mode base policy","text":"<pre><code>New-WDACConfig -PrepMSFTOnlyAudit -LogSize 10MB -Deploy\n</code></pre> <ul> <li>Parameter Info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices/#deploy-the-default-windows-prep-mode-base-policy","title":"Deploy the Default Windows Prep mode base policy","text":"<pre><code>New-WDACConfig -PrepDefaultWindowsAudit -LogSize 10MB -Deploy\n</code></pre> <ul> <li>Parameter Info</li> </ul> <p>Depending on whichever of the option you choose, it deploys the base policy in audit mode. No reboot required.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices/#generate-audit-event-logs-on-the-system","title":"Generate Audit Event Logs on the System","text":"<p>Install all of the programs that you want to allow in the WDAC policy, on the VM. These are the programs that you want to allow to run and be installed on the target system once you've deployed the WDAC policy.</p> <ul> <li> <p>Installing or running 3rd party non-Microsoft programs, while Allow Microsoft policy in Audit mode is deployed on the VM, generates event logs for each of the programs and their files.</p> </li> <li> <p>Installing or running any program that doesn't come pre-installed by default with Windows, while Default Windows policy in Audit mode is deployed on the VM, generates event logs for each of the programs and their files.</p> </li> </ul> <p>These event logs are exactly what we need to identify and create Allow rules for the detected files.</p> <p>Only files that are executed during Prep mode phase generate event logs, so by simply installing a program using its installer, we can't trigger event log generation for each of the components and executables that each program has. So, after installing the programs, run them, use them a bit as you normally would so that all of the programs' components are executed and event logs generated for them.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices/#generate-supplemental-policy-from-the-audit-event-logs","title":"Generate Supplemental Policy From the Audit Event Logs","text":""},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices/#if-you-chose-the-allow-microsoft-path","title":"If you chose the Allow Microsoft path","text":"<pre><code>New-WDACConfig -MakePolicyFromAuditLogs -BasePolicyType 'Allow Microsoft Base' -NoDeletedFiles\n</code></pre> <ul> <li>Parameter Info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Fully%20Managed%20Devices/#if-you-chose-the-default-windows-path","title":"If you chose the Default Windows path","text":"<pre><code>New-WDACConfig -MakePolicyFromAuditLogs -BasePolicyType 'Default Windows Base' -NoDeletedFiles\n</code></pre> <ul> <li>Parameter Info</li> </ul> <p>If you use the <code>-Deploy</code> optional switch parameter with the commands above, 3 things will automatically happen:</p> <ol> <li>The deployed Prep mode base policy will be removed.</li> <li>The actual base policy will be deployed depending on whichever you choose.</li> <li>The Supplemental policy generated from Audit logs will be deployed.</li> </ol> <p></p> <p>If you don't use the <code>-Deploy</code> switch, you can deploy the <code>.cip</code> binary files manually using CITool.</p> <p>More info on deployment</p> <p>Information about how to Sign and Deploy a Signed WDAC policy.</p> <p></p> <p></p> <p></p> <pre><code>flowchart TD\n    A(Deploy Allow Microsoft base policy) --&gt;B(Start running your programs)\n    B --&gt; C[An App is getting blocked?]\n    C --&gt; D[Is it a normal app?]\n    D --&gt; E[Create Supplemental policy based on App's directory]\n    E --&gt; F[New-SupplementalWDACConfig -Normal]\n    E --&gt; G[Edit-WDACConfig -AllowNewApps]\n    C --&gt; H[Is it a game Installed using Xbox app?]\n    H --&gt; I[Is it an app that installs drivers outside app's directory?]\n    I --&gt; J[Use Event viewer logs + game/app's directory scan]\n    J --&gt; K[Edit-WDACConfig -AllowNewAppsAuditEvents]\n    C --&gt; L[Want to allow an entire folder?]\n    L --&gt; M[Use folder path with one or more Wildcards]\n    M --&gt; N[New-SupplementalWDACConfig -FilePathWildCards]</code></pre> <p></p> <p></p> <p></p> <pre><code>flowchart TD\n    A(Deploy Default Windows base policy) --&gt;B(Identify Important apps that need Supplemental policy)\n    B --&gt; C(Create and Deploy Supplemental policies for them)\n    C --&gt; D[Another App is getting blocked?]\n    D --&gt; E[Is it a normal app?]\n    E --&gt; F[Create Supplemental policy based on App's directory]\n    D --&gt; G[Is it a game Installed using Xbox app?]\n    G --&gt; H[Is it an app that installs drivers outside app's directory?]\n    H --&gt; I[Use Event viewer logs + game/app's directory scan]\n    I --&gt; J[Edit-WDACConfig -AllowNewAppsAuditEvents]\n    D --&gt; L[Want to allow an entire folder?]\n    L --&gt; M[Use folder path with one or more Wildcards]\n    M --&gt; N[New-SupplementalWDACConfig -FilePathWildCards]\n    F --&gt; O[Edit-WDACConfig -AllowNewApps]\n    F --&gt; Q[New-SupplementalWDACConfig -Normal]</code></pre> <p></p>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/","title":"WDAC policy for Lightly managed device","text":"Base policy type Method used Signed Protection score 1-5 Signed and Reputable (ISG) WDACConfig module No / Yes 3.5 / 4 <pre><code>flowchart TD\n    A(Deploy WDAC base policy with ISG) --&gt;B(Start using your apps)\n    B --&gt; C(Did your app run without problem?)\n    C --&gt;|Yes| D[Awesome]\n    C --&gt;|No| E[Create a Supplemental policy for it]</code></pre>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#video-guide","title":"Video Guide","text":"<p>Every time I use the word \"App\", I'm referring to regular Win32 programs as well as Microsoft Store installed apps; Basically any software that you can run.</p> <p>This scenario provides a high protection level, higher if you cryptographically Sign it. Using the WDACConfig module, it's very easy to deploy, manage and maintain a system with this configuration.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#deploy-the-signed-and-reputable-base-policy-on-the-system","title":"Deploy the Signed and Reputable base policy on the system","text":"<p>Start by deploying the Signed and Reputable base policy on the system, which allows only files and apps that are authorized by the Intelligent Security Graph Authorization which have known good state to run and anything else is blocked.</p>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#unsigned-version","title":"Unsigned version","text":"<pre><code>New-WDACConfig -MakeLightPolicy -Deploy\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#signed-version","title":"Signed version","text":"<pre><code>New-WDACConfig -MakeLightPolicy\n</code></pre> <ul> <li>Parameter info</li> </ul> <pre><code>Deploy-SignedWDACConfig -CertPath \"C:\\Certificate.cer\" -PolicyPaths \"C:\\Users\\HotCakeX\\SignedAndReputable.xml\" -CertCN \"WDAC Certificate\" -Deploy\n</code></pre> <ul> <li>Cmdlet info</li> </ul> <ul> <li> <p>The module creates Signed and Reputable WDAC base Policy based on AllowMicrosoft policy template with ISG related rule options, then merges Microsoft recommended block rules with it. We don't merge Microsoft recommended driver block rules because it is already enabled by default in Windows.</p> </li> <li> <p>The module also automatically starts the Application Identity (<code>AppIDSvc</code>) service required for ISG Authorization and sets its startup mode to Automatic. It's a protected service so can't be disabled or modified using Services snap-in.</p> </li> <li> <p>ISG Authorization requires active Internet connection to communicate with the global ISG network.</p> </li> <li> <p>Recommended to perform a reboot regardless of whether you are deploying signed or unsigned version of the \"Signed and Reputable\" WDAC base policy.</p> </li> </ul> <p></p> <p>After finishing deploying the Signed and Reputable base policy, if there is an app that is getting blocked and you want to allow it, you can create Supplemental policies to expand your base policy. To do that, you have multiple options.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#creating-supplemental-policy-for-apps-already-installed","title":"Creating Supplemental policy for apps already installed","text":"<p>The following commands use the <code>-Deploy</code> optional switch parameter, meaning after Supplemental policy creation, they are automatically deployed on the system.</p> <ul> <li>If you chose the Signed path, omit it from the commands and instead use the Deploy-SignedWDACConfig cmdlet to Sign and Deploy the Supplemental policy xml files.</li> </ul>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#based-on-signer-rules-hashes-file-names-etc","title":"Based on signer rules, hashes, file names etc.","text":"<pre><code>New-SupplementalWDACConfig -Normal -ScanLocation \"C:\\Program Files\\Program\" -SuppPolicyName \"App's Name\" -PolicyPath \"C:\\SignedAndReputable.xml\" -Deploy\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#based-on-file-path-with-one-or-more-wildcard-characters","title":"Based on File path with one or more wildcard characters","text":"<pre><code>New-SupplementalWDACConfig -FilePathWildCards -WildCardPath \"C:\\Program Files\\Program\\*\" -SuppPolicyName \"App's Name\" -PolicyPath\n\"C:\\SignedAndReputable.xml\" -Deploy\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#based-on-an-installed-windows-apps-name","title":"Based on an installed Windows app's name","text":"<pre><code>New-SupplementalWDACConfig -InstalledAppXPackages -PackageName \"*App's name*\" -SuppPolicyName \"App's name\" -PolicyPath \"C:\\SignedAndReputable.xml\" -Deploy\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#creating-supplemental-policy-for-new-app-installations-or-apps-already-installed","title":"Creating Supplemental policy for new app installations or apps already installed","text":"<p>If the app you are trying to allow isn't installed, and when you try to install it you see a blocked/error message, you can use the following syntaxes to allow them to run and then automatically create Supplemental policy for them.</p> <p>These methods also work for apps that were installed prior to deploying the \"Signed and Reputable\" base policy and now you want to allow them to run by creating Supplemental policy for them.</p> <p>You can create a Supplemental policy for more than 1 app at a time by browsing for multiple apps' install directories using the commands below.</p> <p></p>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#based-on-apps-install-directory-and-event-viewer-logs-unsigned-version","title":"Based on App's install directory and Event viewer logs - Unsigned version","text":"<pre><code>Edit-WDACConfig -AllowNewAppsAuditEvents -SuppPolicyName \"App's Name\" -PolicyPath \"C:\\SignedAndReputable.xml\" -LogSize 20MB\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#based-on-apps-install-directory-only-unsigned-version","title":"Based on App's install directory only - Unsigned version","text":"<pre><code>Edit-WDACConfig -AllowNewApps -SuppPolicyName \"App's Name\" -PolicyPath \"C:\\SignedAndReputable.xml\"\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#based-on-apps-install-directory-and-event-viewer-logs-signed-version","title":"Based on App's install directory and Event viewer logs - Signed version","text":"<pre><code>Edit-SignedWDACConfig -AllowNewAppsAuditEvents -CertPath \"C:\\Certificate.cer\" -SuppPolicyName \"App's Name\" -PolicyPath \"C:\\SignedAndReputable.xml\" -CertCN \"WDAC Certificate\" -LogSize 20MB\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#based-on-apps-install-directory-only-signed-version","title":"Based on App's install directory only - Signed version","text":"<pre><code>Edit-SignedWDACConfig -AllowNewApps -CertPath \"C:\\Certificate.cer\" -SuppPolicyName \"App's Name\" -PolicyPath \"C:\\SignedAndReputable.xml\" -CertCN \"WDAC Certificate\"\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#what-to-do-if-you-have-a-lot-of-supplemental-policies","title":"What to Do if You Have a Lot of Supplemental Policies?","text":"<p>Currently, the limit for the number of policies (Base + Supplemental) that can be deployed on a system at a time is 32. So if you are getting close to that limit, you can merge some or all of your Supplemental policies automatically into 1 using the command below:</p>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#unsigned-version_1","title":"Unsigned version","text":"<pre><code>Edit-WDACConfig -MergeSupplementalPolicies -SuppPolicyName \"Merge of Multiple Supplementals\" -PolicyPath \"C:\\SignedAndReputable.xml\" -SuppPolicyPaths \"C:\\Supplemental policy for App1.xml\",\"C:\\Supplemental policy for App 2.xml\",\"C:\\Supplemental policy for App 3.xml\"\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#signed-version_1","title":"Signed version","text":"<pre><code>Edit-SignedWDACConfig -MergeSupplementalPolicies -CertPath \"C:\\Certificate.cer\" -SuppPolicyName \"Merge of Multiple Supplementals\" -PolicyPath \"C:\\SignedAndReputable.xml\" -CertCN \"WDAC Certificate\" -SuppPolicyPaths \"C:\\Supplemental policy for App1.xml\",\"C:\\Supplemental policy for App 2.xml\",\"C:\\Supplemental policy for App 3.xml\"\n</code></pre> <ul> <li>Parameter info</li> </ul>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#security-considerations","title":"Security Considerations","text":"<p>One of the differences between using ISG in a WDAC policy vs using Smart App Control (which also use ISG) is that WDAC policy + ISG rule option passes along reputation from app installers to the binaries they write to disk, it can over-authorize files in some cases. For example, if the installer launches the app upon completion, any files the app writes during that first run will also be allowed.</p> <p>Smart App Control however doesn't do this, it will trust the installer file itself if it's trustworthy and subsequently checks the trustworthiness of any binaries the installer tries to use and write to the disk, if any of those binaries or components can't be verified or are malicious, they get blocked.</p> <p>Explained more in here:</p> <ul> <li> <p>Security considerations with the ISG option</p> </li> <li> <p>Smart app control has blocked part of this app</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20for%20Lightly%20Managed%20Devices/#what-to-do-when-there-is-an-update-for-an-allowed-app","title":"What to Do When There Is an Update for an Allowed App?","text":"<p>If you've created a Supplemental policy for an app that is already installed and now there is a newer version of that app available, you have multiple options:</p> <ol> <li> <p>If the Supplemental policy that you created to allow that app is based on FilePath with wildcards, then the app can be updated and no change in policy is required.</p> </li> <li> <p>If the Supplemental policy is based on PFN (Package Family Name) of the app, available only for apps that use MSIX installers, like some of the modern apps installed through Microsoft Store, then you don't need to take any action and the app will be updated without any issues.</p> </li> <li> <p>If the Supplemental policy is only based on the app's digital signature, which is common for well-made apps, then you don't need to take any further action. As long as the new version of the app has the same digital signature / developer identity, then it will be allowed to run.</p> </li> <li> <p>If the Supplemental policy is based on individual File Paths (in contrast to wildcard FilePath rules), or based on FileName rules, then most likely there is no need for any further action to be taken as long as the new app's version uses the same file names or the same file paths for its components.</p> </li> <li> <p>If the Supplemental policy is based on Hash of the app's files, either partially (mixed with signer rules) or entirely (for apps without any digital identity/signature) then all you have to do is to remove the deployed Supplemental policy and create a new Supplemental policy for the app using live audit mode in the module as explained above. Don't need to reboot immediately, but to finish the removal process of a Supplemental policy, whether it's signed or unsigned, a reboot will be eventually needed.</p> </li> </ol> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/","title":"WDAC Policy for BYOVD Kernel Mode Only Protection","text":"<p>This scenario involves removing the trust to any Kernel mode driver, whether they are vulnerable or not. It does not affect User-mode binaries or drivers. Any 3rd party software/hardware Kernel mode driver will need to be explicitly allowed. This scenario protects against all BYOVD scenarios and much more.</p> <p>Drivers can access the Kernel which is the core of the operating system. Microsoft requires all drivers to be digitally signed:</p> <ul> <li>Kernel mode Hardware drivers need to be signed with an EV (Extended Validation) certificate.</li> <li>Kernel mode Virtual drivers (such as virtual network adapters) can be signed with a non-EV certificate.</li> </ul> <p>A BYOVD (Bring Your Own Vulnerable Driver) scenario involves exploiting one of the digitally signed drivers that harbors a security flaw to attain direct access to the core of the OS. This attack vector applies to all OSes, not just Windows.</p> <p>People who seek to obtain code signing certificates, even for Extended Validation certificates, are not undergoing proper verification.</p> <ul> <li>Kernel is the key to your kingdom.</li> <li>Do not waste your time playing cat and mouse with threat actors.</li> <li>Do not use blacklisting for highly secure workstations, sensitive environments and such; it\u2019s ineffective and insecure for a high security level.</li> <li>Whitelisting is the proper answer. This entire document and others in this repository, are exactly for this purpose.</li> </ul> <p></p> <p> YOUTUBE VIDEO: How to easily protect against BYOVD attack scenarios with WDAC policy in Windows </p> <p></p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#there-are-3-types-of-kernel-mode-drivers-that-can-run-on-windows","title":"There Are 3 Types of Kernel Mode Drivers That Can Run on Windows","text":""},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#regular-drivers","title":"Regular drivers","text":"<p>A regular signed driver is a driver that has been digitally signed by the developer using a software publisher certificate (SPC) issued by a Microsoft approved Certificate Authority (CA).</p> <p>These are regular signed Kernel mode drivers from 3rd parties that shouldn't be trusted by default in a secure and high-risk environment.</p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#whql-drivers","title":"WHQL drivers","text":"<p>A WHQL driver is a driver that has been tested and certified by Microsoft's Windows Hardware Quality Labs (WHQL). A WHQL driver has passed Microsoft's compatibility tests and can be distributed through Windows Update or other Microsoft-supported channels, while a regular signed driver may not have passed those tests and may not be eligible. A WHQL driver is signed by Microsoft.</p> <p>WHQL drivers have a slightly higher security bar than regular Kernel mode drivers. Any driver updates are required to pass the WHQL testing too.</p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#ev-signed-drivers","title":"EV Signed Drivers","text":"<p>EV signed kernel mode drivers are drivers that have been signed with an extended validation code signing certificate issued by a trusted certificate authority (CA).</p> <p>EV certificates cost more than regular code signing certificates, they require to be on an HSM (to ensure the private key is stored properly) and CAs issuing them only validate that the company of the person requesting them exists. Anyone can get EV certificate as long as they have a HSM and a company, which is not hard to come by, costs about ~100$ to set up in the US as a resident.</p> <p>Sometimes the issuing CA also needs you to send in your driver's license and a picture of you holding it, but things like extended background checks, criminal history check, nationality check, or the proper checks explained in here are not performed.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#what-is-the-solution","title":"What Is the Solution?","text":"<p>We need to establish a Zero-Trust situation by eliminating the default trust to any signed driver and explicitly authorizing each driver that seeks to access the kernel.</p> <p>Numerous applications incorporate drivers that interact with the Kernel. Ordinarily, they are unnoticeable, but if you deploy the WDAC policy that we are going to create, in Audit mode, you will be able to observe event logs generated for each of the kernel-mode drivers.</p> <p>By creating a strict kernel mode WDAC policy, you will have a powerful security feature at your fingertips.</p> <p>This approach is the kind of future-leading technology you need. You can't afford waiting for analysis to predict malicious behavior or wait for malware to be found and cataloged before something is done about it.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#how-to-make-a-strict-kernel-mode-wdac-policy","title":"How to make a strict Kernel mode WDAC policy","text":"<p>We take the Default Windows example policy from <code>C:\\Windows\\schemas\\CodeIntegrity\\ExamplePolicies</code> and remove the following items from it:</p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#from-the-ekus-section","title":"From the EKUs section","text":"<ul> <li> <p><code>ID_EKU_WHQL</code> which is for WHQL (Windows Hardware Quality Labs), it allows 3rd party drivers that have WHQL certification to run, but since we are making a strict Kernel-mode WDAC policy, we want to handpick which Kernel mode drivers get to run on the system.</p> </li> <li> <p><code>\"ID_EKU_RT_EXT\"</code> belongs to Windows Runtime, Usermode only.</p> </li> <li> <p><code>\"ID_EKU_STORE\"</code> for Microsoft Store apps, Usermode only.</p> </li> <li> <p><code>\"ID_EKU_DCODEGEN\"</code> for .NET hardening Dynamic Code Security, user mode only, the linked document mentions it's Usermode too.</p> </li> <li> <p><code>\"ID_EKU_AM\"</code> Usermode only.</p> </li> <li> <p><code>&lt;EKU ID=\"ID_EKU_AM\" FriendlyName=\"AntiMalware EKU -1.3.6.1.4.1.311.76.11.1 \" Value=\"010a2b0601040182374c0b01\" /&gt;</code></p> </li> <li> <p>EKU (Enhanced Key Usage) is a field in a digital certificate that specifies the purposes for which the certificate can be used.</p> </li> <li> <p>The FriendlyName attribute of the EKU is a human-readable name that describes the purpose of the certificate. The FriendlyName also includes the Object Identifier (OID) of the certificate, which is a numeric code that identifies who issued the certificate and what it is for. The OID follows a hierarchical structure, where each dot-separated number represents a level of authority or category.</p> </li> <li> <p>The Value attribute of the EKU, <code>010a2b0601040182374c0b01</code> is a hexadecimal representation of the OID, which is used by WDAC to validate the certificate. The Value must match the OID exactly, otherwise WDAC will not trust the certificate. It corresponds to the AntiMalware EKU certificate, which has an OID of <code>1.3.6.1.4.1.311.76.11.1</code>.</p> </li> <li> <p>This certificate is used to verify files that are signed by an antimalware vendor whose product is using Protected Process Light (PPL). The AntiMalware EKU does not apply to kernel mode drivers, only to user mode processes that are signed by an antimalware vendor.</p> </li> </ul> <pre><code>&lt;EKU ID=\"ID_EKU_WHQL\" Value=\"010A2B0601040182370A0305\" /&gt;\n&lt;EKU ID=\"ID_EKU_RT_EXT\" Value=\"010a2b0601040182370a0315\" /&gt;\n&lt;EKU ID=\"ID_EKU_STORE\" FriendlyName=\"Windows Store EKU - 1.3.6.1.4.1.311.76.3.1 Windows Store\" Value=\"010a2b0601040182374c0301\" /&gt;\n&lt;EKU ID=\"ID_EKU_DCODEGEN\" FriendlyName=\"Dynamic Code Generation EKU - 1.3.6.1.4.1.311.76.5.1\" Value=\"010A2B0601040182374C0501\" /&gt;\n&lt;EKU ID=\"ID_EKU_AM\" FriendlyName=\"AntiMalware EKU -1.3.6.1.4.1.311.76.11.1 \" Value=\"010a2b0601040182374c0b01\" /&gt;\n</code></pre> <p></p> <p></p> <p>For our strict Kernel-mode-only WDAC policy, only the following EKUs are necessary</p> <pre><code>&lt;EKUs&gt;\n    &lt;EKU ID=\"ID_EKU_WINDOWS\" Value=\"010A2B0601040182370A0306\" FriendlyName=\"\" /&gt;\n    &lt;EKU ID=\"ID_EKU_ELAM\" Value=\"010A2B0601040182373D0401\" FriendlyName=\"\" /&gt;\n    &lt;EKU ID=\"ID_EKU_HAL_EXT\" Value=\"010a2b0601040182373d0501\" FriendlyName=\"\" /&gt;\n&lt;/EKUs&gt;\n</code></pre> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#from-the-filerules-section","title":"From the FileRules section","text":"<p>User Mode Refresh policy program</p> <pre><code>&lt;FileAttrib ID=\"ID_FILEATTRIB_REFRESH_POLICY\" FriendlyName=\"RefreshPolicy.exe FileAttribute\" FileName=\"RefreshPolicy.exe\" MinimumFileVersion=\"10.0.19042.0\" /&gt;\n</code></pre> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#from-the-signers-section","title":"From the Signers section","text":"<ul> <li>Any Signer with <code>_USER</code> in its ID indicating that it only applies to User Mode binaries/drivers</li> </ul> <ul> <li>Any Signer with <code>_RT</code> in its ID indicating that it belongs to Windows Runtime, which is User mode only.</li> </ul> <pre><code>&lt;Signer ID=\"ID_SIGNER_RT_PRODUCTION\" Name=\"Microsoft Product Root 2010 RT EKU\"&gt;\n    &lt;CertRoot Type=\"Wellknown\" Value=\"06\" /&gt;\n    &lt;CertEKU ID=\"ID_EKU_RT_EXT\" /&gt;\n&lt;/Signer&gt;\n&lt;Signer ID=\"ID_SIGNER_RT_FLIGHT\" Name=\"Microsoft Flighting Root 2014 RT EKU\"&gt;\n    &lt;CertRoot Type=\"Wellknown\" Value=\"0E\" /&gt;\n    &lt;CertEKU ID=\"ID_EKU_RT_EXT\" /&gt;\n&lt;/Signer&gt;\n&lt;Signer ID=\"ID_SIGNER_RT_STANDARD\" Name=\"Microsoft Standard Root 2011 RT EKU\"&gt;\n    &lt;CertRoot Type=\"Wellknown\" Value=\"07\" /&gt;\n    &lt;CertEKU ID=\"ID_EKU_RT_EXT\" /&gt;\n&lt;/Signer&gt;\n</code></pre> <ul> <li> <p>The following WHQL related Signers</p> </li> <li> <p>These are the certificates that Microsoft uses to sign 3rd party OEM drivers</p> </li> <li> <p>They are actually 1 certificate but in 3 different Hashing algorithms</p> </li> </ul> <pre><code>&lt;Signer ID=\"ID_SIGNER_WHQL_SHA2\" Name=\"Microsoft Product Root 2010 WHQL EKU\"&gt;\n  &lt;CertRoot Type=\"Wellknown\" Value=\"06\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_WHQL\" /&gt;\n&lt;/Signer&gt;\n&lt;Signer ID=\"ID_SIGNER_WHQL_SHA1\" Name=\"Microsoft Product Root WHQL EKU SHA1\"&gt;\n  &lt;CertRoot Type=\"Wellknown\" Value=\"05\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_WHQL\" /&gt;\n&lt;/Signer&gt;\n&lt;Signer ID=\"ID_SIGNER_WHQL_MD5\" Name=\"Microsoft Product Root WHQL EKU MD5\"&gt;\n  &lt;CertRoot Type=\"Wellknown\" Value=\"04\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_WHQL\" /&gt;\n&lt;/Signer&gt;\n</code></pre> <p></p> <ul> <li>And this Signer which allows WHQL for insider builds</li> </ul> <pre><code>&lt;Signer ID=\"ID_SIGNER_WHQL_FLIGHT_SHA2\" Name=\"Microsoft Flighting Root 2014 WHQL EKU\"&gt;\n  &lt;CertRoot Type=\"Wellknown\" Value=\"0E\" /&gt;\n  &lt;CertEKU ID=\"ID_EKU_WHQL\" /&gt;\n&lt;/Signer&gt;\n</code></pre> <p></p> <ul> <li>Test Signer, for when Driver signing test is used, <code>Bcdedit.exe -set TESTSIGNING ON</code></li> </ul> <pre><code>&lt;Signer ID=\"ID_SIGNER_TEST2010\" Name=\"MincryptKnownRootMicrosoftTestRoot2010\"&gt;\n&lt;CertRoot Type=\"Wellknown\" Value=\"0A\" /&gt;\n&lt;/Signer&gt;\n</code></pre> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#from-the-signingscenarios-section","title":"From the SigningScenarios section","text":""},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#in-the-kernel-mode-signing-scenario-block","title":"In the Kernel Mode Signing Scenario block","text":"<ul> <li>Responsible for WHQL Signers we removed above</li> </ul> <pre><code>&lt;AllowedSigner SignerId=\"ID_SIGNER_WHQL_SHA2\" /&gt;\n&lt;AllowedSigner SignerId=\"ID_SIGNER_WHQL_SHA1\" /&gt;\n&lt;AllowedSigner SignerId=\"ID_SIGNER_WHQL_MD5\" /&gt;\n</code></pre> <ul> <li>Responsible for insider builds WHQL signers</li> </ul> <pre><code>&lt;AllowedSigner SignerId=\"ID_SIGNER_WHQL_FLIGHT_SHA2\" /&gt;\n</code></pre> <ul> <li>Responsible for Test Signer we removed above</li> </ul> <pre><code>&lt;AllowedSigner SignerId=\"ID_SIGNER_TEST2010\" /&gt;\n</code></pre>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#in-the-user-mode-signing-scenario-block","title":"In the User Mode Signing Scenario block","text":"<p>This entire block should either be removed</p> <pre><code>&lt;!--User Mode Signing Scenario--&gt;\n&lt;SigningScenario Value=\"12\" ID=\"ID_SIGNINGSCENARIO_UMCI\" FriendlyName=\"User Mode Signing Scenario\"&gt;\n  &lt;ProductSigners&gt;\n    &lt;AllowedSigners&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_WINDOWS_PRODUCTION_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_ELAM_PRODUCTION_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_HAL_PRODUCTION_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_WHQL_SHA2_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_WHQL_SHA1_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_WHQL_MD5_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_WINDOWS_FLIGHT_ROOT_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_ELAM_FLIGHT_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_HAL_FLIGHT_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_WHQL_FLIGHT_SHA2_USER\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_STORE\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_STORE_FLIGHT_ROOT\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_RT_PRODUCTION\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_DRM\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_DCODEGEN\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_AM\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_RT_FLIGHT\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_RT_STANDARD\" /&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_MICROSOFT_REFRESH_POLICY\" /&gt;\n      &lt;!-- Test signer is trusted by ConfigCI, however, it will not be trusted by CI unless testsigning BCD is set --&gt;\n      &lt;AllowedSigner SignerId=\"ID_SIGNER_TEST2010_USER\" /&gt;\n    &lt;/AllowedSigners&gt;\n  &lt;/ProductSigners&gt;\n&lt;/SigningScenario&gt;\n</code></pre> <p>Or replaced with</p> <pre><code>&lt;SigningScenario Value=\"12\" ID=\"ID_SIGNINGSCENARIO_UMCI\" FriendlyName=\"User Mode Signing Scenario\"&gt;\n  &lt;ProductSigners /&gt;\n&lt;/SigningScenario&gt;\n</code></pre> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#flight-root-signers-optional","title":"Flight root signers - Optional","text":"<p>They can also be removed if you don't intend to use Windows insider builds. They all have <code>flight</code> or <code>_flight</code> in their ID.</p> <p>When removing them, also use the 4 Disabled:Flight Signing policy rule option.</p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#from-cisigners","title":"From CiSigners","text":"<p>Remove this item which is for Windows Store EKU</p> <pre><code>&lt;CiSigner SignerId=\"ID_SIGNER_STORE\" /&gt;\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#how-to-use-and-automate-this-entire-process","title":"How to Use and Automate This Entire Process","text":"<p>Use the WDACConfig module to automatically Audit and deploy the Strict Kernel-mode WDAC policies.</p> <p>As mentioned earlier, this policy only enforces and applies to Kernel-mode drivers, so your non-Kernel mode files are unaffected. Keep in mind that Kernel-mode does not mean programs that require Administrator privileges, those 2 categories are completely different. Also, not all drivers are Kernel mode, there are user-mode drivers too.</p> <p>This strict Kernel mode policy can be perfectly deployed side by side any other WDAC policy.</p> <p>For instance, since HVCI is turned on by default on my system, the Microsoft Recommended driver block rules is automatically deployed and it's only Kernel mode. It has 2 allow all rules, making it primarily a block-list policy.</p> <p>Then I deploy Strict Kernel-mode WDAC policy, which also only applies to Kernel-mode drivers. It doesn't have allow all rules of course, instead it allows Windows components that are required for Windows to function properly to run and then will let you hand pick any 3rd party Kernel-mode drivers and easily allow them in your policy.</p> <p>Now the Allow all rules that exist in the first policy are neutralized. Only applications allowed by both policies run without generating block events., so since the same allow all rules do not exist in our Strict Kernel-mode base policy, they no longer apply.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#what-about-user-mode-binaries","title":"What About User-mode Binaries?","text":"<p>So far, we've only been doing Kernel-mode administration. We can use User-mode WDAC policies as well.</p> <p>After using those 2 Kernel-mode policies, I deploy a 3rd policy which is going to authorize and validate User-mode binaries too. I choose the Lightly managed WDAC policy that utilizes ISG (Intelligent Security Graph). This policy applies to both Kernel and User modes, but since we already know the logic and learned that only applications allowed by all base policies are allowed to run, we're confident that our Strict Kernel-mode base policy is the only one in charge of authorizing and validating Kernel-mode files/drivers. Our User-mode WDAC policy that utilizes ISG validates User-mode binaries only.</p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#a-rule-of-thumb","title":"A rule of thumb","text":"<p>The strictest policy wins the race in multiple base policy deployments, which in this case is the Strict Kernel-Mode policy. Even though ISG policy which uses Allow Microsoft rules and allows all the WHQL signed drivers, they still won't be able to run unless the Kernel-Mode policy authorizes them, because for a Kernel driver to be allowed to run in this scenario, all base policies must allow it.</p> <p>So only the policy that has the least allow listings in common with all other policies takes priority.</p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#supplemental-policy","title":"Supplemental policy","text":"<p>Each of the deployed policies (except for the automatically deployed block rules by HVCI) support having supplemental policies. So, whenever you feel the need to allow additional files that are Kernel-mode drivers or User-mode binaries blocked by ISG, you can add a Supplemental policy for them.</p> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#about-elam-early-launch-anti-malware","title":"About ELAM (Early Launch Anti-Malware)","text":"<p>Anti-malware or antivirus vendors need to sign enforceable and binding legal agreements and develop an early launched anti-malware driver that Microsoft will sign. This driver includes a list of certificate hashes that enable that AV vendor to sign new versions without Microsoft\u2019s involvement each time. When code integrity loads this ELAM driver, it permits any executables signed by the certificates in that list to run as anti-malware light.</p> <ul> <li>Early Launch Anti-Malware Driver Sample</li> <li>ELAM Driver Requirements</li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#continue-reading-about-important-wdac-notes","title":"Continue reading about important WDAC notes","text":""},{"location":"WDAC/WDAC%20policy%20for%20BYOVD%20Kernel%20mode%20only%20protection/#important-notes-and-tips-about-wdac-policies","title":"Important Notes and Tips about WDAC policies","text":""},{"location":"WDACConfig%20Module/Assert-WDACConfigIntegrity/","title":"Assert-WDACConfigIntegrity available parameters","text":""},{"location":"WDACConfig%20Module/Assert-WDACConfigIntegrity/#syntax","title":"Syntax","text":"<pre><code>Assert-WDACConfigIntegrity\n    [-SaveLocally]\n    [-Path &lt;FileInfo&gt;]\n    [-SkipVersionCheck]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Assert-WDACConfigIntegrity/#description","title":"Description","text":"<p>This cmdlet scans all of the relevant files in the WDACConfig module's folder and computes their SHA2-512 hashes.</p> <p>Then it downloads the cloud CSV file from the GitHub repository and compares the hashes of the local files with the ones in the cloud.</p> <p>By doing so, you can ascertain that the files in your local WDACConfig folder are identical to the ones in the cloud and devoid of any interference.</p> <p>If there is any indication of tampering, the outcomes will be displayed on the console.</p>"},{"location":"WDACConfig%20Module/Assert-WDACConfigIntegrity/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Assert-WDACConfigIntegrity/#-savelocally","title":"-SaveLocally","text":"<p>This parameter is used to generate hashes of the final module's files prior to publishing them to the GitHub. This parameter shouldn't be used.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Assert-WDACConfigIntegrity/#-path","title":"-Path","text":"<p>Can define a different path for the <code>Hashes.csv</code> file. This parameter shouldn't be used.</p> Type: FileInfo Position: Named Default value: Module's Root Directory Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Assert-WDACConfigIntegrity/#note","title":"Note","text":"<p>The WDACConfig module comprises of <code>.ps1</code> and <code>.psm1</code> files that bear the cryptographic signature of my local certificate authority's (CA) certificate. The module incorporates mechanisms to automatically ascertain the integrity of the module files and prevent any unauthorized modifications. The module manifest, <code>.psd1</code> file, on the other hand, lacks a signature due to the installation error that arises from the PowerShell gallery when it is signed with a self-signed certificate.</p> <p>The public key of the certificate used to sign the module files can be obtained from here.</p> <p></p>"},{"location":"WDACConfig%20Module/Build-WDACCertificate/","title":"Build-WDACCertificate available parameters","text":""},{"location":"WDACConfig%20Module/Build-WDACCertificate/#syntax","title":"Syntax","text":"<pre><code>Build-WDACCertificate\n    [[-CommonName] &lt;String&gt;]\n    [[-FileName] &lt;String&gt;]\n    [[-BuildingMethod] &lt;String&gt;]\n    [[-Password] &lt;SecureString&gt;]\n    [-Force]\n    [-SkipVersionCheck]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Build-WDACCertificate/#description","title":"Description","text":"<p>This cmdlet constructs self-signed certificates that adhere to Microsoft's specifications for WDAC policy signing. With this cmdlet, you can dispense with Windows Server with a CA role to generate a certificate.</p> <p>The generated certificates type is Code Signing, they employ <code>SHA2-512</code> hashing algorithm with <code>RSA 4096-bit</code> encryption (the maximum supported key size for WDAC signing.)</p> <p>Upon constructing a certificate, the cmdlet stores it in the Current User's personal store, then it exports that certificate in 2 files. One of the files has a <code>.cer</code> extension and encompasses only the public key, the other file has a <code>.pfx</code> extension and encompasses both public and private keys.</p> <p>The PFX file is encrypted with <code>SHA-256</code> encryption and safeguarded with the password supplied by the user. After the 2 files are exported, the cmdlet eliminates the certificate from Current Users personal store and then re-imports it using the PFX file, but this time it will store the private key using VSM (Virtual Secure Mode). In this method, the private keys are stored in the TPM and are highly secured with VBS (Virtualized-Based Security). The entire process happens in just few seconds.</p>"},{"location":"WDACConfig%20Module/Build-WDACCertificate/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Build-WDACCertificate/#-commonname","title":"-CommonName","text":"<p>The common name of the certificate, it will also be assigned as the friendly name of the certificate.</p> <ul> <li>If you enter a CommonName but do not enter a FileName, the FileName will be set to the same value as the CommonName for better user experience.</li> </ul> Type: String Position: Named Default value: <code>Code Signing Certificate</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Build-WDACCertificate/#-filename","title":"-FileName","text":"<p>The name of the <code>.cer</code> and <code>.pfx</code> files that will be generated.</p> Type: String Position: Named Default value: <code>Code Signing Certificate</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Build-WDACCertificate/#-buildingmethod","title":"-BuildingMethod","text":"<p>2 methods are used to build the certificates. Method 1 uses the Certreq and the Method 2 uses the New-SelfSignedCertificate.</p> Type: String Position: Named Default value: <code>Method2</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Build-WDACCertificate/#-password","title":"-Password","text":"<p>The password to be employed to encrypt the <code>.pfx</code> file that encompasses the private and public keys of the certificate. It necessitates being in Secure String type. If it\u2019s not supplied, the user will be prompted to input a password (and a second time to verify it). The minimum password length is 5 characters.</p> Type: SecureString Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Build-WDACCertificate/#-force","title":"-Force","text":"<p>The cmdlet verifies whether there is any certificate with the identical common name as the certificate that is being created, on the system. If it detects one, it will prompt the user to for permission to remove them. If this parameter is employed, the prompt will be omitted as it will presume that the user acquiesced.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Build-WDACCertificate/#related-resources","title":"Related Resources","text":"<ul> <li>X500NameFlags enumeration</li> <li>Local Machine and Current User Certificate Stores</li> <li>Trusted Root Certification Authorities Certificate Store</li> <li>X509BasicConstraintsExtension Class</li> <li>Internet X.509 Public Key Infrastructure Certificate and CRL Profile - RFC2459</li> </ul>"},{"location":"WDACConfig%20Module/Build-WDACCertificate/#additional-resources","title":"Additional Resources","text":"<p>To enhance the security and safeguarding of your certificate further, you can remove the certificate from the Personal store of the Current User certificates and then utilize the PFX file to import it anew in the same location, but this time you will mark additional boxes in the import wizard.</p> <p>This video illustrates how to safeguard the Code Signing Certificate generated by the WDACConfig module, so that you will be compelled to either enter your security password or verify your identity every time the certificate is employed. By storing the certificate in this manner, only your user account will have access to it, and you will inherently possess administrator privileges to implement the signed WDAC policy on the system.</p> <p>These options are only accessible in GUI and they are to deter automatic scripts from utilizing the certificates without authentication, this is why the <code>Build-WDACCertificate</code> cmdlet does not activate this security feature by default.</p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/Build-WDACCertificate/#hsm-hardware-security-module","title":"HSM (Hardware Security Module)","text":"<p>The most secure method of storing code signing certificates is to use a hardware security module (HSM) or a similar device. Furthermore, obtaining certificates from a regulated or publicly trusted certificate authority (CA) requires the use of an HSM. The HSMs must also comply with the Federal Information Processing Standards (FIPS).</p> <p></p>"},{"location":"WDACConfig%20Module/Confirm-WDACConfig/","title":"Confirm-WDACConfig available parameters","text":""},{"location":"WDACConfig%20Module/Confirm-WDACConfig/#confirm-wdacconfig-listactivepolicies","title":"Confirm-WDACConfig -ListActivePolicies","text":""},{"location":"WDACConfig%20Module/Confirm-WDACConfig/#syntax","title":"Syntax","text":"<pre><code>Confirm-WDACConfig\n    [-ListActivePolicies]\n    [-OnlyBasePolicies]\n    [-OnlySupplementalPolicies]\n</code></pre>"},{"location":"WDACConfig%20Module/Confirm-WDACConfig/#description","title":"Description","text":"<p>Lists the non-System Base and Supplemental WDAC Policies using CITool and displays their counts.</p>"},{"location":"WDACConfig%20Module/Confirm-WDACConfig/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Confirm-WDACConfig/#-onlybasepolicies","title":"-OnlyBasePolicies","text":"<p>Using this will only display Base policies.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Confirm-WDACConfig/#-onlysupplementalpolicies","title":"-OnlySupplementalPolicies","text":"<p>Using this will only display Supplemental policies.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/Confirm-WDACConfig/#confirm-wdacconfig-verifywdacstatus","title":"Confirm-WDACConfig -VerifyWDACStatus","text":""},{"location":"WDACConfig%20Module/Confirm-WDACConfig/#syntax_1","title":"Syntax","text":"<pre><code>Confirm-WDACConfig\n    [-VerifyWDACStatus]\n</code></pre>"},{"location":"WDACConfig%20Module/Confirm-WDACConfig/#description_1","title":"Description","text":"<p>Shows the status of User-mode and Kernel-mode application control.</p> <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/Confirm-WDACConfig/#confirm-wdacconfig-checksmartappcontrolstatus","title":"Confirm-WDACConfig -CheckSmartAppControlStatus","text":""},{"location":"WDACConfig%20Module/Confirm-WDACConfig/#syntax_2","title":"Syntax","text":"<pre><code>Confirm-WDACConfig\n    [-CheckSmartAppControlStatus]\n</code></pre>"},{"location":"WDACConfig%20Module/Confirm-WDACConfig/#description_2","title":"Description","text":"<p>Checks the status of Smart App Control and reports the results on the console, including the evaluation mode expiration date.</p> <p></p>"},{"location":"WDACConfig%20Module/ConvertTo-WDACPolicy/","title":"ConvertTo-WDACPolicy available parameters","text":""},{"location":"WDACConfig%20Module/ConvertTo-WDACPolicy/#syntax","title":"Syntax","text":"<pre><code>ConvertTo-WDACPolicy\n    [-PolicyToAddLogsTo &lt;FileInfo&gt;]\n    [-FilterByPolicyNames &lt;String[]&gt;]\n    [-MinutesAgo &lt;UInt64&gt;]\n    [-HoursAgo &lt;UInt64&gt;]\n    [-DaysAgo &lt;UInt64&gt;]\n    [-KernelModeOnly]\n    [-LogType &lt;String&gt;]\n    [-Deploy]\n    [-ExtremeVisibility]\n    [&lt;CommonParameters&gt;]\n</code></pre> <pre><code>ConvertTo-WDACPolicy\n    [-BasePolicyFile &lt;FileInfo&gt;]\n    [-FilterByPolicyNames &lt;String[]&gt;]\n    [-MinutesAgo &lt;UInt64&gt;]\n    [-HoursAgo &lt;UInt64&gt;]\n    [-DaysAgo &lt;UInt64&gt;]\n    [-KernelModeOnly]\n    [-LogType &lt;String&gt;]\n    [-Deploy]\n    [-ExtremeVisibility]\n    [&lt;CommonParameters&gt;]\n</code></pre> <pre><code>ConvertTo-WDACPolicy\n    [-BasePolicyGUID &lt;Guid&gt;]\n    [-FilterByPolicyNames &lt;String[]&gt;]\n    [-MinutesAgo &lt;UInt64&gt;]\n    [-HoursAgo &lt;UInt64&gt;]\n    [-DaysAgo &lt;UInt64&gt;]\n    [-KernelModeOnly]\n    [-LogType &lt;String&gt;]\n    [-Deploy]\n    [-ExtremeVisibility]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/ConvertTo-WDACPolicy/#description","title":"Description","text":"<p>This cmdlet presents the Code Integrity logs in a graphical interface (GUI) and enables the user to choose the logs. The logs can be filtered in various ways, such as Date, Type, Policy that generated them, and so on.</p> <p>This cmdlet is versatile and offers a broad range of functionalities that can be applied independently or combined for very precise and specific tasks.</p> <p>This cmdlet allows you to perform an in-place upgrade of a deployed base/supplemental policy or create a new supplemental policy based on the selected logs.</p>"},{"location":"WDACConfig%20Module/ConvertTo-WDACPolicy/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/ConvertTo-WDACPolicy/#-policytoaddlogsto","title":"-PolicyToAddLogsTo","text":"<p>The policy to add the selected logs to, it can either be a base or supplemental policy.</p> <p>Note</p> <p>Only select one of the following three parameters: <code>-PolicyToAddLogsTo</code>, <code>-BasePolicyFile</code>, or <code>-BasePolicyGUID</code>.</p> Type: FileInfo Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/ConvertTo-WDACPolicy/#-basepolicyfile","title":"-BasePolicyFile","text":"<p>The base policy file to associate the supplemental policy with.</p> <p>Note</p> <p>Only select one of the following three parameters: <code>-PolicyToAddLogsTo</code>, <code>-BasePolicyFile</code>, or <code>-BasePolicyGUID</code>.</p> Type: FileInfo Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/ConvertTo-WDACPolicy/#-basepolicyguid","title":"-BasePolicyGUID","text":"<p>The GUID of the base policy to associate the supplemental policy with.</p> <p>Note</p> <p>Only select one of the following three parameters: <code>-PolicyToAddLogsTo</code>, <code>-BasePolicyFile</code>, or <code>-BasePolicyGUID</code>.</p> Type: Guid Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/ConvertTo-WDACPolicy/#-filterbypolicynames","title":"-FilterByPolicyNames","text":"<p>The names of the policies to filter the logs by. Supports auto-completion, press TAB key to view the list of the deployed base policy names to choose from. It will not display the policies that are already selected on the command line.</p> <p>You can manually enter the name of the policies that are no longer available on the system.</p> Type: String[] Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/ConvertTo-WDACPolicy/#-minutesago","title":"-MinutesAgo","text":"<p>The number of minutes ago from the current time to filter the logs by</p> Type: UInt64 Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/ConvertTo-WDACPolicy/#-hoursago","title":"-HoursAgo","text":"<p>The number of hours ago from the current time to filter the logs by</p> Type: UInt64 Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/ConvertTo-WDACPolicy/#-daysago","title":"-DaysAgo","text":"<p>The number of days ago from the current time to filter the logs by</p> Type: UInt64 Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/ConvertTo-WDACPolicy/#-kernelmodeonly","title":"-KernelModeOnly","text":"<p>If used, will filter the logs by including only the Kernel-Mode logs.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/ConvertTo-WDACPolicy/#-logtype","title":"-LogType","text":"<p>The type of logs to display: Audit or Blocked</p> Type: String Position: Named Default value: <code>Audit</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/ConvertTo-WDACPolicy/#-deploy","title":"-Deploy","text":"<p>If used, will deploy the policy on the system.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/ConvertTo-WDACPolicy/#-extremevisibility","title":"-ExtremeVisibility","text":"<p>If used, will display all the properties of the logs without any filtering.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Deploy-SignedWDACConfig/","title":"Deploy-SignedWDACConfig available parameters","text":""},{"location":"WDACConfig%20Module/Deploy-SignedWDACConfig/#syntax","title":"Syntax","text":"<pre><code>Deploy-SignedWDACConfig\n    -PolicyPaths &lt;FileInfo[]&gt;\n    [-Deploy]\n    [-CertPath &lt;FileInfo&gt;]\n    [-CertCN &lt;String&gt;]\n    [-SignToolPath &lt;FileInfo&gt;]\n    [-Force]\n    [-SkipVersionCheck]\n    [-Confirm]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Deploy-SignedWDACConfig/#description","title":"Description","text":"<p>Creates and signs a <code>.CIP</code> file that can be either deployed locally using the <code>-Deploy</code> parameter or you can deploy the signed policy binary on a different machine later using the built-in Citool, Intune etc.</p>"},{"location":"WDACConfig%20Module/Deploy-SignedWDACConfig/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Deploy-SignedWDACConfig/#-policypaths","title":"-PolicyPaths","text":"<p>The XML Policies to deploy. Supports File picker GUI.</p> Type: FileInfo[] Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Deploy-SignedWDACConfig/#-certpath","title":"-CertPath","text":"<p>Path to the certificate <code>.cer</code> file. Press TAB to open the file picker GUI and browse for a <code>.cer</code> file.</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Deploy-SignedWDACConfig/#-certcn","title":"-CertCN","text":"<p>Common name of the certificate - Supports argument completion so you don't have to manually enter the Certificate's CN, just make sure the <code>-CertPath</code> is specified and the certificate is installed in the personal store of the user certificates, then press TAB to auto complete the name. You can however enter it manually if you want to.</p> Type: String Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Deploy-SignedWDACConfig/#-signtoolpath","title":"-SignToolPath","text":"<p>Press TAB to open the file picker GUI and browse for SignTool.exe</p> <p>Tip</p> <p>Refer to this section for more info</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Deploy-SignedWDACConfig/#-deploy","title":"-Deploy","text":"<p>Deploys the signed policy on the system</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Deploy-SignedWDACConfig/#-force","title":"-Force","text":"<p>Indicates that the cmdlet won't ask for confirmation and will proceed with deploying the signed policy.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/","title":"Edit-SignedWDACConfig available parameters","text":""},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#edit-signedwdacconfig-allownewappsauditevents","title":"Edit-SignedWDACConfig -AllowNewAppsAuditEvents","text":""},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#syntax","title":"Syntax","text":"<pre><code>Edit-SignedWDACConfig\n     [-AllowNewAppsAuditEvents]\n     -SuppPolicyName &lt;String&gt;\n     [-PolicyPath &lt;FileInfo&gt;]\n     [-CertPath &lt;FileInfo&gt;]\n     [-CertCN &lt;String&gt;]\n     [-LogSize &lt;UInt64&gt;]\n     [-NoScript]\n     [-NoUserPEs]\n     [-SpecificFileNameLevel &lt;String&gt;]\n     [-IncludeDeletedFiles]\n     [-Level &lt;String&gt;]\n     [-Fallbacks &lt;String[]&gt;]\n     [-SignToolPath &lt;FileInfo&gt;]\n     [-SkipVersionCheck]\n     [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#description","title":"Description","text":""},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#how-to-use","title":"How to Use","text":"<ol> <li> <p>Using the provided syntax, run the command and supply values for the parameters.</p> </li> <li> <p>When prompted to start installing your apps, do so and once you're done, press Enter to continue. The rest is automated.</p> </li> </ol> <p></p> <p>While a Signed Windows Defender Application Control (WDAC) policy is already deployed on the system, rebootlessly turns on Audit mode in it, which will allow you to install a new app that was otherwise getting blocked. After installation, you will need to browse for the path(s) of the installed app(s) for scanning. The Audit logs that will be included in the scan are only the ones created from the time you ran the module with -AllowNewAppsAuditEvents parameter till the time you finished app installations and browsed for folders to scan. This parameter can also be used for apps that are already installed on the system.</p> <p>A new supplemental policy will be created, it will be signed and deployed on the system. The base policy that was initially set to Audit mode will also revert back to enforced mode. The entire process happens without the need for reboot. If something like a power outage occurs during the time Audit mode is deployed, on the next reboot, the enforced mode base policy will be automatically deployed.</p> <p>This parameter is specially useful for applications that install files outside of their main install directory, such as system drivers. Make sure you run those applications after installation (and before starting to browse for their install directories) so that Audit logs will capture and create allow rules for them.</p> <p>Note</p> <p>This parameter can also detect and create allow rules for Kernel protected files, such as the executables of games installed using Xbox app. Make sure you run the game while the base policy is deployed in Audit mode so that it can capture those executables.</p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-supppolicyname","title":"-SuppPolicyName","text":"<p>Add a descriptive name for the Supplemental policy.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-certpath","title":"-CertPath","text":"<p>Path to the certificate <code>.cer</code> file. Press TAB to open the file picker GUI and browse for a <code>.cer</code> file.</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-certcn","title":"-CertCN","text":"<p>Common name of the certificate - Supports argument completion so you don't have to manually enter the Certificate's CN, just make sure the <code>-CertPath</code> is specified and the certificate is installed in the personal store of the user certificates, then press TAB to auto complete the name. You can however enter it manually if you want to.</p> Type: String Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-policypath","title":"-PolicyPath","text":"<p>Browse for the xml file of the Base policy this Supplemental policy is going to expand. Supports tab completion by showing only <code>.xml</code> files with Base Policy Type.</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-signtoolpath","title":"-SignToolPath","text":"<p>Press TAB to open the file picker GUI and browse for SignTool.exe</p> <p>Tip</p> <p>Refer to this section for more info</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-debug","title":"-Debug","text":"<p>Indicates that the module will output these additional files for debugging purposes:</p> <ul> <li> <p>FileRulesAndFileRefs.txt - Contains the File Rules and Rule refs for the Hash of the files that no longer exist on the disk.</p> </li> <li> <p>DeletedFileHashesEventsPolicy.xml - If <code>-IncludeDeletedFiles</code> was used and if there were any files detected that were in audit event logs that are no longer on the disk, this file will include allow rules for them based on their hashes.</p> </li> <li> <p>ProgramDir_ScanResults.xml* - xml policy files for each program path that is selected by user, contains allow rules.</p> </li> <li> <p>RulesForFilesNotInUserSelectedPaths.xml - xml policy file that has allow rules for files that do not reside in any of the user-selected program paths, but have been detected in audit event logs.</p> </li> </ul> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-levels","title":"-Levels","text":"<p>Offers the same official Levels for scanning event logs and the specified directory path(s).</p> Type: String Position: Named Default value: <code>WHQLFilePublisher</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-fallbacks","title":"-Fallbacks","text":"<p>Offers the same official Fallbacks for scanning event logs and the specified directory path(s).</p> Type: String[] Position: Named Default value: <code>FilePublisher</code>,<code>Hash</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-logsize","title":"-LogSize","text":"<p>Specifies the log size for Microsoft-Windows-CodeIntegrity/Operational events. The values must be in the form of <code>&lt;Digit + Data measurement unit&gt;</code>. e.g., 2MB, 10MB, 1GB, 1TB. The minimum accepted value is 1MB which is the default.</p> Type: UInt64 Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-specificfilenamelevel","title":"-SpecificFileNameLevel","text":"<p>You can choose one of the following options:</p> <ul> <li>OriginalFileName</li> <li>InternalName</li> <li>FileDescription</li> <li>ProductName</li> <li>PackageFamilyName</li> <li>FilePath</li> </ul> <p>More info available on Microsoft Learn</p> Type: String Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-includedeletedfiles","title":"-IncludeDeletedFiles","text":"<p>Indicates that hashes of the files that were run during Audit phase but then were deleted and are no longer on the disk, will be added to the Supplemental policy.</p> <p>Note</p> <p>If you created a Supplemental policy for your program and it's still getting blocked, try using this parameter. Chances are your program writes and then deletes some files during runtime that are necessary to be included in the Supplemental policy.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-nouserpes","title":"-NoUserPEs","text":"<p>By default, the module includes user PEs in the scan. When you use this switch parameter, they won't be included. More info available on Microsoft Learn</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-noscript","title":"-NoScript","text":"<p>More info available on Microsoft Learn</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#edit-signedwdacconfig-allownewapps","title":"Edit-SignedWDACConfig -AllowNewApps","text":""},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#syntax_1","title":"Syntax","text":"<pre><code>Edit-SignedWDACConfig\n     [-AllowNewApps]\n     -SuppPolicyName &lt;String&gt;\n     [-PolicyPath &lt;FileInfo&gt;]\n     [-CertPath &lt;FileInfo&gt;]\n     [-CertCN &lt;String&gt;]\n     [-NoScript]\n     [-NoUserPEs]\n     [-SpecificFileNameLevel &lt;String&gt;]\n     [-Level &lt;String&gt;]\n     [-Fallbacks &lt;String[]&gt;]\n     [-SignToolPath &lt;FileInfo&gt;]\n     [-SkipVersionCheck]\n     [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#description_1","title":"Description","text":""},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#how-to-use_1","title":"How to use","text":"<ol> <li> <p>Using the provided syntax, run the command and supply values for the parameters.</p> </li> <li> <p>When prompted to start installing your apps, do so and once you're done, press Enter to continue. The rest is automated.</p> </li> </ol> <p></p> <p>While a Signed Windows Defender Application Control (WDAC) policy is already deployed on the system, rebootlessly turns on Audit mode in it, which will allow you to install a new app that was otherwise getting blocked. After installation, you will need to browse for the path(s) of the installed app(s) for scanning. This parameter can also be used for apps that are already installed on the system.</p> <p>A new supplemental policy will be created, it will be signed and deployed on the system. The base policy that was initially set to Audit mode will also revert back to enforced mode. The entire process happens without the need for reboot. If something like a power outage occurs during the time Audit mode is deployed, on the next reboot, the enforced mode base policy will be automatically deployed.</p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#parameters_1","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-supppolicyname_1","title":"-SuppPolicyName","text":"<p>Add a descriptive name for the Supplemental policy.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-certpath_1","title":"-CertPath","text":"<p>Path to the certificate <code>.cer</code> file. Press TAB to open the file picker GUI and browse for a <code>.cer</code> file.</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-certcn_1","title":"-CertCN","text":"<p>Common name of the certificate - Supports argument completion so you don't have to manually enter the Certificate's CN, just make sure the <code>-CertPath</code> is specified and the certificate is installed in the personal store of the user certificates, then press TAB to auto complete the name. You can however enter it manually if you want to.</p> Type: String Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-policypath_1","title":"-PolicyPath","text":"<p>Browse for the xml file of the Base policy this Supplemental policy is going to expand. Supports tab completion by showing only <code>.xml</code> files with Base Policy Type.</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-signtoolpath_1","title":"-SignToolPath","text":"<p>Press TAB to open the file picker GUI and browse for SignTool.exe</p> <p>Tip</p> <p>Refer to this section for more info</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-levels_1","title":"-Levels","text":"<p>Offers the same official Levels to scan the specified directory path(s).</p> Type: String Position: Named Default value: <code>WHQLFilePublisher</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-fallbacks_1","title":"-Fallbacks","text":"<p>Offers the same official Fallbacks to scan the specified directory path(s).</p> Type: String[] Position: Named Default value: <code>FilePublisher</code>,<code>Hash</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-nouserpes_1","title":"-NoUserPEs","text":"<p>By default, the module includes user PEs in the scan. When you use this switch parameter, they won't be included. More info available on Microsoft Learn</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-noscript_1","title":"-NoScript","text":"<p>More info available on Microsoft Learn</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-specificfilenamelevel_1","title":"-SpecificFileNameLevel","text":"<p>You can choose one of the following options:</p> <ul> <li>OriginalFileName</li> <li>InternalName</li> <li>FileDescription</li> <li>ProductName</li> <li>PackageFamilyName</li> <li>FilePath</li> </ul> <p>More info available on Microsoft Learn</p> Type: String Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#edit-signedwdacconfig-mergesupplementalpolicies","title":"Edit-SignedWDACConfig -MergeSupplementalPolicies","text":""},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#syntax_2","title":"Syntax","text":"<pre><code>Edit-SignedWDACConfig\n     [-MergeSupplementalPolicies]\n     -SuppPolicyName &lt;String&gt;\n     -SuppPolicyPaths &lt;FileInfo[]&gt;\n    [-PolicyPath &lt;FileInfo&gt;]\n    [-KeepOldSupplementalPolicies]\n    [-CertPath &lt;FileInfo&gt;]\n    [-CertCN &lt;String&gt;]\n    [-SignToolPath &lt;FileInfo&gt;]\n    [-SkipVersionCheck]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#description_2","title":"Description","text":"<p>Merge multiple deployed Signed Supplemental policies into 1 and deploy it, remove the individual ones, all happening automatically. Very useful to keep Supplemental policies below 32 since that's the limit.</p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#parameters_2","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-supppolicyname_2","title":"-SuppPolicyName","text":"<p>Choose a descriptive name for the Supplemental policy that is going to be the merge of multiple policies.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-supppolicypaths","title":"-SuppPolicyPaths","text":"<p>Path to the Supplemental policies xml files. Supports argument tab completion by showing only Supplemental policy types.</p> Type: FileInfo[] Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-certpath_2","title":"-CertPath","text":"<p>Path to the certificate <code>.cer</code> file. Press TAB to open the file picker GUI and browse for a <code>.cer</code> file.</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-certcn_2","title":"-CertCN","text":"<p>Common name of the certificate - Supports argument completion so you don't have to manually enter the Certificate's CN, just make sure the <code>-CertPath</code> is specified and the certificate is installed in the personal store of the user certificates, then press TAB to auto complete the name. You can however enter it manually if you want to.</p> Type: String Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-policypath_2","title":"-PolicyPath","text":"<p>Browse for the xml file of the Base policy this Supplemental policy is going to expand. Supports tab completion by showing only <code>.xml</code> files with Base Policy Type.</p> Type: FileInfo Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-signtoolpath_2","title":"-SignToolPath","text":"<p>Press TAB to open the file picker GUI and browse for SignTool.exe</p> <p>Tip</p> <p>Refer to this section for more info</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-keepoldsupplementalpolicies","title":"-KeepOldSupplementalPolicies","text":"<p>Indicates that the module will not remove the old Supplemental policy xml files after creating and deploying the new merged one.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#edit-signedwdacconfig-updatebasepolicy","title":"Edit-SignedWDACConfig -UpdateBasePolicy","text":""},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#syntax_3","title":"Syntax","text":"<pre><code>Edit-SignedWDACConfig\n     [-UpdateBasePolicy]\n     -CurrentBasePolicyName &lt;String[]&gt;\n     -NewBasePolicyType &lt;String&gt;\n     [-CertPath &lt;FileInfo&gt;]\n     [-CertCN &lt;String&gt;]\n     [-SignToolPath &lt;FileInfo&gt;]\n     [-RequireEVSigners]\n     [-SkipVersionCheck]\n     [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#description_3","title":"Description","text":"<p>It can rebootlessly change the type of the deployed signed base policy. It can update the recommended block rules and/or change policy rule options in the deployed base policy. The deployed Supplemental policies will stay intact and continue to work with the new Base policy.</p> <p>Note</p> <p>When switching from a more permissive base policy type to a more restrictive one, make sure your Supplemental policies will continue to work. E.g., if your current base policy type is Allow Microsoft and the one you are switching to is Default Windows, there might be files that will get blocked as a result of this switch if you created a Supplemental policy using Event viewer capturing. That's simply because they were allowed by the more permissive Allow Microsoft policy type so they didn't trigger audit logs thus weren't needed to be included in the Supplemental policy. You will need to update those Supplemental policies if that happens by deleting and recreating them, no immediate reboot required.</p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#parameters_3","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-currentbasepolicyname","title":"-CurrentBasePolicyName","text":"<p>The name of the currently deployed base policy. It supports tab completion so just press tab to autofill it.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-newbasepolicytype","title":"-NewBasePolicyType","text":"<p>The type of the base policy to deploy. It supports tab completion so just press tab to autofill it. Supports all 3 Base policy types:</p> <ul> <li>AllowMicrosoft_Plus_Block_Rules</li> <li>Lightly_Managed_system_Policy</li> <li>DefaultWindows_WithBlockRules</li> </ul> <p>Note</p> <p>Since the module uses PowerShell and not Windows PowerShell that is pre-installed in Windows, selecting this argument will automatically scan <code>C:\\Program Files\\PowerShell</code> directory and add PowerShell files to the base policy (if it detects the PowerShell is not installed from Microsoft Store) so that you will be able to continue using the module after redeploying the base policy. The scan uses FilePublisher level and Hash fallback.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-certpath_3","title":"-CertPath","text":"<p>Path to the certificate <code>.cer</code> file. Press TAB to open the file picker GUI and browse for a <code>.cer</code> file.</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-certcn_3","title":"-CertCN","text":"<p>Common name of the certificate - Supports argument completion so you don't have to manually enter the Certificate's CN, just make sure the <code>-CertPath</code> is specified and the certificate is installed in the personal store of the user certificates, then press TAB to auto complete the name. You can however enter it manually if you want to.</p> Type: String Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-signtoolpath_3","title":"-SignToolPath","text":"<p>Press TAB to open the file picker GUI and browse for SignTool.exe</p> <p>Tip</p> <p>Refer to this section for more info</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-SignedWDACConfig/#-requireevsigners","title":"-RequireEVSigners","text":"<p>Indicates that the created/deployed policy will have Require EV Signers policy rule option.</p> <ul> <li>In addition to being WHQL signed, this rule requires that drivers must have been submitted by a partner that has an Extended Verification (EV) certificate. All Windows 10 and later, or Windows 11 drivers will meet this requirement.</li> </ul> <p></p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/","title":"Edit-WDACConfig available parameters","text":""},{"location":"WDACConfig%20Module/Edit-WDACConfig/#edit-wdacconfig-allownewappsauditevents","title":"Edit-WDACConfig -AllowNewAppsAuditEvents","text":""},{"location":"WDACConfig%20Module/Edit-WDACConfig/#syntax","title":"Syntax","text":"<pre><code>Edit-WDACConfig\n     [-AllowNewAppsAuditEvents]\n     -SuppPolicyName &lt;String&gt;\n     [-PolicyPath &lt;FileInfo&gt;]\n     [-Level &lt;String&gt;]\n     [-Fallbacks &lt;String[]&gt;]\n     [-NoScript]\n     [-NoUserPEs]\n     [-SpecificFileNameLevel &lt;String&gt;]\n     [-LogSize &lt;UInt64&gt;]\n     [-IncludeDeletedFiles]\n     [-SkipVersionCheck]\n     [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#description","title":"Description","text":""},{"location":"WDACConfig%20Module/Edit-WDACConfig/#how-to-use","title":"How to use","text":"<ol> <li> <p>Using the provided syntax, run the command and supply values for the parameters.</p> </li> <li> <p>When prompted to start installing your apps, do so and once you're done, press Enter to continue. The rest is automated.</p> </li> </ol> <p></p> <p>While an unsigned Windows Defender Application Control (WDAC) policy is already deployed on the system, rebootlessly turns on Audit mode in it, which will allow you to install a new app that was otherwise getting blocked.</p> <p>After running this command, you will be prompted to start installing your apps/programs. Once you're finished, you will need to browse for the path(s) of the installed app(s) for scanning. This parameter can also be used for apps that are already installed on the system.</p> <p>The Audit logs that will be included in the scan are only the ones created from the time you ran the module with -AllowNewAppsAuditEvents parameter till the time you finished app installations and browsed for folders to scan.</p> <p>A new supplemental policy will be created, it will be deployed on the system. The base policy that was initially set to Audit mode will also revert back to enforced mode. The entire process happens without the need for reboot. If something like a power outage occurs during the time Audit mode is deployed, on the next reboot, the enforced mode base policy will be automatically deployed.</p> <p>This parameter is specially useful for applications that install files outside of their main install directory, such as system drivers. Make sure you run those applications after installation (and before starting to browse for their install directories) so that Audit logs will capture and create allow rules for them.</p> <p>Note</p> <p>This parameter can also detect and create allow rules for Kernel protected files, such as the executables of games installed using Xbox app. Make sure you run the game while the base policy is deployed in Audit mode so that it can capture those executables.</p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-supppolicyname","title":"-SuppPolicyName","text":"<p>Add a descriptive name for the Supplemental policy.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-policypath","title":"-PolicyPath","text":"<p>Browse for the xml file of the Base policy this Supplemental policy is going to expand. Supports tab completion by showing only <code>.xml</code> files with Base Policy Type.</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-debug","title":"-Debug","text":"<p>Indicates that the module will output these additional files for debugging purposes:</p> <ul> <li> <p>FileRulesAndFileRefs.txt - Contains the File Rules and Rule refs for the Hash of the files that no longer exist on the disk.</p> </li> <li> <p>DeletedFileHashesEventsPolicy.xml - If <code>-IncludeDeletedFiles</code> was used and if there were any files detected that were in audit event logs that are no longer on the disk, this file will include allow rules for them based on their hashes.</p> </li> <li> <p>ProgramDir_ScanResults.xml* - xml policy files for each program path that is selected by user, contains allow rules.</p> </li> <li> <p>RulesForFilesNotInUserSelectedPaths.xml - xml policy file that has allow rules for files that do not reside in any of the user-selected program paths, but have been detected in audit event logs.</p> </li> </ul> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-logsize","title":"-LogSize","text":"<p>Specifies the log size for Microsoft-Windows-CodeIntegrity/Operational events. The values must be in the form of <code>&lt;Digit + Data measurement unit&gt;</code>. e.g., 2MB, 10MB, 1GB, 1TB. The minimum accepted value is 1MB which is the default.</p> Type: UInt64 Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-levels","title":"-Levels","text":"<p>Offers the same official Levels for scanning event logs and the specified directory path(s).</p> Type: String Position: Named Default value: <code>WHQLFilePublisher</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-fallbacks","title":"-Fallbacks","text":"<p>Offers the same official Fallbacks for scanning event logs and the specified directory path(s).</p> Type: String[] Position: Named Default value: <code>FilePublisher</code>,<code>Hash</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-specificfilenamelevel","title":"-SpecificFileNameLevel","text":"<p>You can choose one of the following options:</p> <ul> <li>OriginalFileName</li> <li>InternalName</li> <li>FileDescription</li> <li>ProductName</li> <li>PackageFamilyName</li> <li>FilePath</li> </ul> <p>More info available on Microsoft Learn</p> Type: String Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-includedeletedfiles","title":"-IncludeDeletedFiles","text":"<p>Indicates that hashes of the files that were run during Audit phase but then were deleted and are no longer on the disk, will be added to the Supplemental policy.</p> <p>Note</p> <p>If you created a Supplemental policy for your program and it's still getting blocked, try using this parameter. Chances are your program writes and then deletes some files during runtime that are necessary to be included in the Supplemental policy.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-nouserpes","title":"-NoUserPEs","text":"<p>By default, the module includes user PEs in the scan. When you use this switch parameter, they won't be included. More info available on Microsoft Learn</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-noscript","title":"-NoScript","text":"<p>More info available on Microsoft Learn</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#edit-wdacconfig-allownewapps","title":"Edit-WDACConfig -AllowNewApps","text":""},{"location":"WDACConfig%20Module/Edit-WDACConfig/#syntax_1","title":"Syntax","text":"<pre><code>Edit-WDACConfig\n     [-AllowNewApps]\n     -SuppPolicyName &lt;String&gt;\n     [-PolicyPath &lt;FileInfo&gt;]\n     [-Level &lt;String&gt;]\n     [-Fallbacks &lt;String[]&gt;]\n     [-NoScript]\n     [-NoUserPEs]\n     [-SpecificFileNameLevel &lt;String&gt;]\n     [-SkipVersionCheck]\n     [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#description_1","title":"Description","text":""},{"location":"WDACConfig%20Module/Edit-WDACConfig/#how-to-use_1","title":"How to use","text":"<ol> <li> <p>Using the provided syntax, run the command and supply values for the parameters.</p> </li> <li> <p>When prompted to start installing your apps, do so and once you're done, press Enter to continue. The rest is automated.</p> </li> </ol> <p></p> <p>While an unsigned WDAC policy is already deployed on the system, rebootlessly turn on Audit mode in it, which will allow you to install a new app that was otherwise getting blocked. After installation, you will need to browse for the path(s) of the installed app(s) for scanning. This parameter can also be used for apps that are already installed on the system.</p> <p>A new supplemental policy will be created, it will be deployed on the system. The base policy that was initially set to Audit mode will also revert back to enforced mode. The entire process happens without the need for reboot. If something like a power outage occurs during the time Audit mode is deployed, on the next reboot, the enforced mode base policy will be automatically deployed.</p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#parameters_1","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-supppolicyname_1","title":"-SuppPolicyName","text":"<p>Add a descriptive name for the Supplemental policy.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-policypath_1","title":"-PolicyPath","text":"<p>Browse for the xml file of the Base policy this Supplemental policy is going to expand. Supports tab completion by showing only <code>.xml</code> files.</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-levels_1","title":"-Levels","text":"<p>Offers the same official Levels to scan the specified directory path(s).</p> Type: String Position: Named Default value: <code>WHQLFilePublisher</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-fallbacks_1","title":"-Fallbacks","text":"<p>Offers the same official Fallbacks to scan the specified directory path(s).</p> Type: String[] Position: Named Default value: <code>FilePublisher</code>,<code>Hash</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-specificfilenamelevel_1","title":"-SpecificFileNameLevel","text":"<p>You can choose one of the following options:</p> <ul> <li>OriginalFileName</li> <li>InternalName</li> <li>FileDescription</li> <li>ProductName</li> <li>PackageFamilyName</li> <li>FilePath</li> </ul> <p>More info available on Microsoft Learn</p> Type: String Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-nouserpes_1","title":"-NoUserPEs","text":"<p>By default, the module includes user PEs in the scan. When you use this switch parameter, they won't be included. More info available on Microsoft Learn</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-noscript_1","title":"-NoScript","text":"<p>More info available on Microsoft Learn</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#edit-wdacconfig-mergesupplementalpolicies","title":"Edit-WDACConfig -MergeSupplementalPolicies","text":""},{"location":"WDACConfig%20Module/Edit-WDACConfig/#syntax_2","title":"Syntax","text":"<pre><code>Edit-WDACConfig\n     [-MergeSupplementalPolicies]\n     -SuppPolicyName &lt;String&gt;\n     [-PolicyPath &lt;FileInfo&gt;]\n     -SuppPolicyPaths &lt;FileInfo[]&gt;\n     [-KeepOldSupplementalPolicies]\n     [-SkipVersionCheck]\n     [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#description_2","title":"Description","text":"<p>Merge multiple deployed Supplemental policies into 1 and deploy it, remove the individual ones, all happening automatically. Very useful to keep Supplemental policies below 32 since that's the limit.</p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#parameters_2","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-supppolicyname_2","title":"-SuppPolicyName","text":"<p>Choose a descriptive name for the Supplemental policy that is going to be the merge of multiple policies.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-supppolicypaths","title":"-SuppPolicyPaths","text":"<p>Path to the Supplemental policies xml files. Supports argument tab completion by showing only Supplemental policy types.</p> Type: FileInfo[] Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-policypath_2","title":"-PolicyPath","text":"<p>Path to the Base policy xml file the Supplemental policies belong to. Supports argument tab completion by showing only Base policy types.</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-keepoldsupplementalpolicies","title":"-KeepOldSupplementalPolicies","text":"<p>Indicates that the module will not remove the old Supplemental policy xml files after creating and deploying the new merged one.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#edit-wdacconfig-updatebasepolicy","title":"Edit-WDACConfig -UpdateBasePolicy","text":""},{"location":"WDACConfig%20Module/Edit-WDACConfig/#syntax_3","title":"Syntax","text":"<pre><code>Edit-WDACConfig\n     [-UpdateBasePolicy]\n     -CurrentBasePolicyName &lt;String[]&gt;\n     -NewBasePolicyType &lt;String&gt;\n    [-RequireEVSigners]\n    [-SkipVersionCheck]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#description_3","title":"Description","text":"<p>It can rebootlessly change the type of the deployed base policy. It can update the recommended block rules and/or change policy rule options in the deployed base policy. The deployed Supplemental policies will stay intact and continue to work with the new Base policy.</p> <p>Note</p> <p>When switching from a more permissive base policy type to a more restrictive one, make sure your Supplemental policies will continue to work. E.g., if your current base policy type is Allow Microsoft and the one you are switching to is Default Windows, there might be files that will get blocked as a result of this switch if you created a Supplemental policy using Event viewer capturing. That's simply because they were allowed by the more permissive Allow Microsoft policy type so they didn't trigger audit logs thus weren't needed to be included in the Supplemental policy. You will need to update those Supplemental policies if that happens by deleting and recreating them, no immediate reboot required.</p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#parameters_3","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-currentbasepolicyname","title":"-CurrentBasePolicyName","text":"<p>The name of the currently deployed base policy. It supports tab completion so just press tab to autofill it.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-newbasepolicytype","title":"-NewBasePolicyType","text":"<p>The type of the base policy to deploy. It supports tab completion so just press tab to autofill it. Supports all 3 Base policy types:</p> <ul> <li>AllowMicrosoft_Plus_Block_Rules</li> <li>Lightly_Managed_system_Policy</li> <li>DefaultWindows_WithBlockRules</li> </ul> <p>Note</p> <p>Since the module uses PowerShell and not Windows PowerShell that is pre-installed in Windows, selecting this argument will automatically scan <code>C:\\Program Files\\PowerShell</code> directory and add PowerShell files to the base policy (if it detects the PowerShell is not installed from Microsoft Store) so that you will be able to continue using the module after redeploying the base policy. The scan uses FilePublisher level and Hash fallback.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Edit-WDACConfig/#-requireevsigners","title":"-RequireEVSigners","text":"<p>Indicates that the created/deployed policy will have Require EV Signers policy rule option.</p> <ul> <li>In addition to being WHQL signed, this rule requires that drivers must have been submitted by a partner that has an Extended Verification (EV) certificate. All Windows 10 and later, or Windows 11 drivers will meet this requirement.</li> </ul> <p></p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Get-CiFileHashes/","title":"Get-CiFileHashes available parameters","text":""},{"location":"WDACConfig%20Module/Get-CiFileHashes/#syntax","title":"Syntax","text":"<pre><code>Get-CiFileHashes\n    [-FilePath] &lt;FileInfo&gt;\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Get-CiFileHashes/#description","title":"Description","text":"<p>Calculates the Authenticode hash and first page hash of the PEs with SHA1 and SHA256 algorithms. The hashes are compliant wih the Windows Defender Application Control (WDAC) policy.</p> <p>The cmdlet outputs an ordered hashtable. The keys are the hash algorithm names and the values are the hashes.</p> <p>For more information please visit this page</p> <p>Tip</p> <p>If the file is non-conformant, the function will calculate the flat hash of the file using the specified hash algorithm and return them as the Authenticode hashes. This is compliant with how the WDAC engine in Windows works.</p>"},{"location":"WDACConfig%20Module/Get-CiFileHashes/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Get-CiFileHashes/#-filepath","title":"-FilePath","text":"<p>The path to the file for which the hashes are to be calculated. Supports TAB completion, when you press Tab key, file picker GUI will open allowing you to select a file.</p> Type: FileInfo Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Get-CommonWDACConfig/","title":"Get-CommonWDACConfig available parameters","text":""},{"location":"WDACConfig%20Module/Get-CommonWDACConfig/#syntax","title":"Syntax","text":"<pre><code>Get-CommonWDACConfig\n    [-CertCN]\n    [-CertPath]\n    [-SignToolPath]\n    [-SignedPolicyPath]\n    [-UnsignedPolicyPath]\n    [-StrictKernelPolicyGUID]\n    [-StrictKernelNoFlightRootsPolicyGUID]\n    [-Open]\n    [-LastUpdateCheck]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Get-CommonWDACConfig/#description","title":"Description","text":"<p>Use this cmdlet to query and display the values for common and frequently used parameters in the User Configurations Json file.</p> <p>All of the applicable cmdlets of the module automatically check the User Configuration file for any available input, if you don't specify values for their parameters. Learn more about the User Configuration file here.</p>"},{"location":"WDACConfig%20Module/Get-CommonWDACConfig/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Get-CommonWDACConfig/#-certcn","title":"-CertCN","text":"<p>Displays the Common Name of an installed certificate.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Get-CommonWDACConfig/#-certpath","title":"-CertPath","text":"<p>Displays the path to a certificate <code>.cer</code> file.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Get-CommonWDACConfig/#-signtoolpath","title":"-SignToolPath","text":"<p>Displays the path to the SignTool executable.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Get-CommonWDACConfig/#-signedpolicypath","title":"-SignedPolicyPath","text":"<p>Displays the path to the xml file of a Signed policy.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Get-CommonWDACConfig/#-unsignedpolicypath","title":"-UnSignedPolicyPath","text":"<p>Displays the path to the xml file of an Unsigned policy.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Get-CommonWDACConfig/#-open","title":"-Open","text":"<p>Opens the User Config Json file in the default editor.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Get-CommonWDACConfig/#-lastupdatecheck","title":"-LastUpdateCheck","text":"<p>Displays the last time online update check was performed.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Invoke-WDACSimulation/","title":"Invoke-WDACSimulation available parameters","text":""},{"location":"WDACConfig%20Module/Invoke-WDACSimulation/#syntax","title":"Syntax","text":"<pre><code>Invoke-WDACSimulation\n  [-XmlFilePath] &lt;FileInfo&gt;\n  [[-FolderPath] &lt;DirectoryInfo&gt;]\n  [[-FilePath] &lt;FileInfo&gt;]\n  [-BooleanOutput]\n  [-Log]\n  [-CSVOutput]\n  [-SkipVersionCheck]\n  [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Invoke-WDACSimulation/#description","title":"Description","text":"<p>This cmdlet allows you to simulate a WDAC (App Control for Business) policy deployment. Simply select a folder or file and a policy XML file, it will show you whether the selected files would be allowed or blocked by your WDAC policy if it was actually deployed on a system and those files were run.</p> <p></p>"},{"location":"WDACConfig%20Module/Invoke-WDACSimulation/#supported-levels-and-specificfilenamelevel-options","title":"Supported Levels and SpecificFileNameLevel Options","text":"<ul> <li> <p>The WDAC Simulation engine supports the following levels: (Support for the remaining levels will be added in a future update)</p> </li> <li> <p>FilePublisher</p> </li> <li>Publisher</li> <li>SignedVersion</li> <li>PCA Certificate</li> <li>Root Certificate</li> <li>Leaf Certificate</li> <li> <p>Hash</p> </li> <li> <p>The engine supports all of the SpecificFileNameLevel options when validating the FilePublisher level.</p> </li> <li> <p>FileDescription</p> </li> <li>InternalName</li> <li>OriginalFileName</li> <li>PackageFamilyName</li> <li>ProductName</li> <li>Filepath</li> </ul> <p></p>"},{"location":"WDACConfig%20Module/Invoke-WDACSimulation/#accuracy","title":"Accuracy","text":"<ul> <li> <p>The engine can determine with 100% accuracy whether a file is authorized by a given policy or not as long as the file was scanned based on one of the supported levels mentioned above.</p> </li> <li> <p>The <code>SpecificFileNameLevel</code> is established with 99.99% accuracy. The only exception is when a file is damaged in a manner that impairs the detection of its additional attributes. However, this is a rare occurrence, as I have not encountered any such file in over 1 million tests.</p> </li> <li> <p>Explicit Deny rules are not taken into account during simulation. Support for them will be added in a future update. The nature of the WDAC policies is whitelisting and anything not mentioned in them is automatically blocked/denied.</p> </li> </ul> <p></p>"},{"location":"WDACConfig%20Module/Invoke-WDACSimulation/#some-use-cases","title":"Some Use Cases","text":"<ul> <li> <p>Have a WDAC policy and you want to test whether all of the files of a program will be allowed by the policy without running the program first? Use this WDAC simulation to find out.</p> </li> <li> <p>Employ this simulation method to discover files that are not explicitly specified in the WDAC policy but are still authorized to run by it.</p> </li> <li> <p>Identify files that have hash mismatch and will not be permitted by WDAC engine using signature. These files are typically found in questionable software because they are tampered with.</p> </li> <li> <p>And many more.</p> </li> </ul>"},{"location":"WDACConfig%20Module/Invoke-WDACSimulation/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Invoke-WDACSimulation/#-folderpath","title":"-FolderPath","text":"<p>Path to a folder. Supports argument tab completion, select the parameter then press TAB to open the Folder picker GUI.</p> <p>Tip</p> <p>Either FilePath or FolderPath must be provided.</p> Type: DirectoryInfo Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Invoke-WDACSimulation/#-filepath","title":"-FilePath","text":"<p>Provide path to a file that you want WDAC simulation to run against</p> <p>Uses LiteralPath to take the path exactly as typed including Special characters such as <code>[</code> and <code>]</code></p> <p>Tip</p> <p>Either FilePath or FolderPath must be provided.</p> Type: FileInfo Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Invoke-WDACSimulation/#-xmlfilepath","title":"-XmlFilePath","text":"<p>Path to a xml file. Supports argument tab completion, select the parameter then press TAB to open the file picker GUI that only shows xml files.</p> Type: FileInfo Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Invoke-WDACSimulation/#-booleanoutput","title":"-BooleanOutput","text":"<p>Can be used with any parameter to return a boolean value instead of displaying the object output</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Invoke-WDACSimulation/#-log","title":"-Log","text":"<p>Use this switch to start a transcript of the WDAC simulation and log everything displayed on the screen.</p> <p>Tip</p> <p>Highly recommended to use the <code>-Verbose</code> parameter with this switch to log the verbose output as well.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Invoke-WDACSimulation/#-csvoutput","title":"-CSVOutput","text":"<p>Upon completion of the simulation, you will obtain a CSV file containing the output of the simulation with exhaustive details of each file that would be blocked/allowed by the selected policy.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/Invoke-WDACSimulation/#notes","title":"Notes","text":"<ul> <li>A small part of this cmdlet's code includes Vadims Pod\u0101ns's code for nested certificate calculation of double signed files.</li> </ul>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/","title":"New-DenyWDACConfig available parameters","text":""},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#new-denywdacconfig-normal","title":"New-DenyWDACConfig -Normal","text":""},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#syntax","title":"Syntax","text":"<pre><code>New-DenyWDACConfig\n    [-Normal]\n    -PolicyName &lt;String&gt;\n    [-ScanLocations &lt;DirectoryInfo[]&gt;]\n    [-Deploy]\n    [-Level &lt;String&gt;]\n    [-Fallbacks &lt;String[]&gt;]\n    [-SpecificFileNameLevel &lt;String&gt;]\n    [-NoUserPEs]\n    [-NoScript]\n    [-SkipVersionCheck]\n    [-WhatIf]\n    [-Confirm]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#description","title":"Description","text":"<p>Creates a Deny base policy by scanning a directory. The base policy will have 2 allow all rules, meaning it can be deployed as a standalone base policy, side-by-side any other Base/Supplemental policies.</p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-policyname","title":"-PolicyName","text":"<p>Add a descriptive name for the Deny base policy. Accepts only alphanumeric and space characters.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-scanlocations","title":"-ScanLocations","text":"<p>Accepts one or more comma separated folder paths. Supports argument completion, when you press tab, folder picker GUI will open allowing you to easily select a folder, you can then add a comma <code>,</code> and press tab again to select another folder path or paste a folder path manually, works both ways.</p> Type: DirectoryInfo[] Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-deploy","title":"-Deploy","text":"<p>Indicates that the module will automatically deploy the Deny base policy after creation.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-levels","title":"-Levels","text":"<p>Offers the same official Levels to scan the specified directory path(s).</p> Type: String Position: Named Default value: <code>WHQLFilePublisher</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-fallbacks","title":"-Fallbacks","text":"<p>Offers the same official Fallbacks to scan the specified directory path(s).</p> Type: String[] Position: Named Default value: <code>FilePublisher</code>,<code>Hash</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-specificfilenamelevel","title":"-SpecificFileNameLevel","text":"<p>You can choose one of the following options:</p> <ul> <li>OriginalFileName</li> <li>InternalName</li> <li>FileDescription</li> <li>ProductName</li> <li>PackageFamilyName</li> <li>FilePath</li> </ul> <p>More info available on Microsoft Learn</p> Type: String Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-nouserpes","title":"-NoUserPEs","text":"<p>By default the module includes user PEs in the scan, but when you use this switch parameter, they won't be included. More info available on Microsoft Learn</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-noscript","title":"-NoScript","text":"<p>More info available on Microsoft Learn</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#new-denywdacconfig-drivers","title":"New-DenyWDACConfig -Drivers","text":""},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#syntax_1","title":"Syntax","text":"<pre><code>New-DenyWDACConfig\n    [-Drivers]\n    -PolicyName &lt;String&gt;\n    [-ScanLocations &lt;DirectoryInfo[]&gt;]\n    [-Deploy]\n    [-SkipVersionCheck]\n    [-Confirm]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#description_1","title":"Description","text":"<p>Creates a Deny base policy by scanning a directory, this parameter uses DriverFile objects so it's best suitable for driver files. The base policy will have 2 allow all rules, meaning it can be deployed as a standalone base policy, side-by-side any other Base/Supplemental policies.</p> <p>Note</p> <p>The scan uses WHQLFilePublisher level without any fallbacks, and includes both usermode and kernel mode drivers.</p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#parameters_1","title":"Parameters","text":""},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-policyname_1","title":"-PolicyName","text":"<p>Add a descriptive name for the Deny base policy. Accepts only alphanumeric and space characters.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-scanlocations_1","title":"-ScanLocations","text":"<p>Accepts one or more comma separated folder paths. Supports argument completion, when you press tab, folder picker GUI will open allowing you to easily select a folder, you can then add a comma <code>,</code> and press tab again to select another folder path or paste a folder path manually, works both ways.</p> Type: DirectoryInfo[] Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-deploy_1","title":"-Deploy","text":"<p>Indicates that the module will automatically deploy the Deny base policy after creation.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#new-denywdacconfig-installedappxpackages","title":"New-DenyWDACConfig -InstalledAppXPackages","text":""},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#syntax_2","title":"Syntax","text":"<pre><code>New-DenyWDACConfig\n    [-InstalledAppXPackages]\n    -PackageName &lt;String&gt;\n    -PolicyName &lt;String&gt;\n    [-Deploy]\n    [-Force]\n    [-SkipVersionCheck]\n    [-Confirm]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#description_2","title":"Description","text":"<p>Creates a Deny base policy for one or more installed Windows Apps (Appx) based on their PFN (Package Family Name). The base policy will have 2 allow all rules, meaning it can be deployed as a standalone base policy, side-by-side any other Base/Supplemental policies.</p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#parameters_2","title":"Parameters","text":""},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-packagename","title":"-PackageName","text":"<p>Enter the package name of an installed app. Supports wildcard <code>*</code> character. e.g, <code>*Edge*</code> or <code>\"*Microsoft*\"</code>.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: True <p></p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-policyname_2","title":"-PolicyName","text":"<p>Add a descriptive name for the Deny base policy. Accepts only alphanumeric and space characters.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-deploy_2","title":"-Deploy","text":"<p>Indicates that the module will automatically deploy the Deny base policy after creation.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-force","title":"-Force","text":"<p>Indicates that the cmdlet won't ask for confirmation and will proceed with creating the deny policy.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#new-denywdacconfig-pathwildcards","title":"New-DenyWDACConfig -PathWildCards","text":""},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#syntax_3","title":"Syntax","text":"<pre><code>New-DenyWDACConfig\n    [-PathWildCards]\n    -PolicyName &lt;String&gt;\n    -FolderPath &lt;DirectoryInfo&gt;\n    [-Deploy]\n    [-SkipVersionCheck]\n    [-Confirm]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#description_3","title":"Description","text":"<p>Creates a Deny standalone base policy for a folder using wildcards. The base policy created by this parameter can be deployed side by side any other base/supplemental policy.</p> <p>Note</p> <p>This feature is also used internally by the Harden Windows Security Module.</p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#parameters_3","title":"Parameters","text":""},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-policyname_3","title":"-PolicyName","text":"<p>Add a descriptive name for the Deny base policy. Accepts only alphanumeric and space characters.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-folderpath","title":"-FolderPath","text":"<p>A folder path that includes at least one wildcard <code>*</code> character. Press TAB to open the folder picker GUI. Once you selected a folder, you will see the path will have <code>\\*</code> at the end of it. You can modify the selected path by adding/removing wildcards <code>*</code> to it before proceeding.</p> Type: DirectoryInfo Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: True <p></p>"},{"location":"WDACConfig%20Module/New-DenyWDACConfig/#-deploy_3","title":"-Deploy","text":"<p>Indicates that the module will automatically deploy the Deny base policy after creation.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-KernelModeWDACConfig/","title":"New-KernelModeWDACConfig available parameters","text":""},{"location":"WDACConfig%20Module/New-KernelModeWDACConfig/#syntax","title":"Syntax","text":"<pre><code>New-KernelModeWDACConfig\n    -Mode &lt;String&gt;\n    [-Deploy]\n    [-EVSigners]\n    [-Base &lt;String&gt;]\n    [-SkipVersionCheck]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/New-KernelModeWDACConfig/#description","title":"Description","text":"<p>This cmdlet generates a Kernel-mode WDAC policy derived from the Default Windows template policy. You can learn more about that procedure in here.</p> <p>Initially, you need to use the <code>-Mode Prep</code> parameter to deploy the base policy in Audit mode, then restart your system. After restarting, event logs are produced for Kernel-mode drivers that are running but would otherwise be blocked if the policy was not deployed in Audit mode.</p> <p>Subsequently, you need to use the <code>-Mode AuditAndEnforce</code> parameter to generate the final base policy. This parameter will:</p> <ol> <li>Scan all of the event logs that were produced after deploying the audit mode policy on the system</li> <li>Generate a supplemental policy for the drivers detected in event logs</li> <li>Merge the supplemental policy with the Strict Kernel-mode base policy</li> <li>Deploy it as a single base policy, rebootlessly.</li> </ol> <p>Tip</p> <p>All Kernel-mode drivers are scanned with WHQLFilePublisher level, so they will not necessitate a policy update when they are updated.</p> <p></p>"},{"location":"WDACConfig%20Module/New-KernelModeWDACConfig/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/New-KernelModeWDACConfig/#-mode","title":"-Mode","text":"<p>Specifies the mode of operation. The acceptable values for this parameter are: <code>Prep</code> and <code>AuditAndEnforce</code>.</p> <ul> <li> <p>Prep: Deploys the Strict Kernel-mode WDAC policy in Audit mode, preparing the system for an Audit.</p> </li> <li> <p>AuditAndEnforce: Audits the system using event logs for any blocked drivers, generates the final Strict Kernel-mode WDAC policy.</p> </li> </ul> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-KernelModeWDACConfig/#-deploy","title":"-Deploy","text":"<p>Indicates that the policy will be deployed. If you want to deploy the final strict kernel-mode base policy Signed, do not use this parameter, Instead just create the policy and then use the Deploy-SignedWDACConfig cmdlet to deploy it.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-KernelModeWDACConfig/#-evsigners","title":"-EVSigners","text":"<p>Uses EVSigners policy rule option. If you want to use this parameter, make sure you use it for both <code>Prep</code> and <code>AuditAndEnforce</code> modes. Read more about EV Signers</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-KernelModeWDACConfig/#-base","title":"-Base","text":"<p>The base policy to be used. The acceptable values for this parameter are: <code>Default</code> and <code>NoFlightRoots</code>.</p> <p>Note</p> <p>The NoFlightRoots value signifies that the Strict Kernel-mode WDAC policy will not be deployed with flight root certificates, disallowing you to use insider builds of the OS in the Dev and Canary channels. Insider builds in the Beta and Release Preview channels are signed with production root certificates and will not be affected.</p> Type: String Position: Named Default value: <code>Default</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/","title":"New-SupplementalWDACConfig available parameters","text":""},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#new-supplementalwdacconfig-normal","title":"New-SupplementalWDACConfig -Normal","text":""},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#syntax","title":"Syntax","text":"<pre><code>New-SupplementalWDACConfig\n    [-Normal] \n    -ScanLocation &lt;DirectoryInfo&gt; \n    -SuppPolicyName &lt;String&gt; \n    [-PolicyPath &lt;FileInfo&gt;] \n    [-Deploy] \n    [-SpecificFileNameLevel &lt;String&gt;] \n    [-NoUserPEs] \n    [-NoScript] \n    [-Level &lt;String&gt;] \n    [-Fallbacks &lt;String[]&gt;] \n    [-SkipVersionCheck]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#description","title":"Description","text":"<p>Creates a Supplemental policy for a base policy based on a folder path.</p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#-scanlocation","title":"-ScanLocation","text":"<p>The directory or drive that you want to scan for files that will be allowed to run by the Supplemental policy.</p> Type: DirectoryInfo Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#-supppolicyname","title":"-SuppPolicyName","text":"<p>Add a descriptive name for the Supplemental policy. Accepts only alphanumeric and space characters.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#-policypath","title":"-PolicyPath","text":"<p>Browse for the xml file of the Base policy this Supplemental policy is going to expand. Supports tab completion by showing only <code>.xml</code> files with Base Policy Type.</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#-deploy","title":"-Deploy","text":"<p>Indicates that the module will automatically deploy the Supplemental policy after creation.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#-levels","title":"-Levels","text":"<p>Offers the same official Levels to scan the specified directory path.</p> Type: String Position: Named Default value: <code>WHQLFilePublisher</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#-fallbacks","title":"-Fallbacks","text":"<p>Offers the same official Fallbacks to scan the specified directory path.</p> Type: String[] Position: Named Default value: <code>FilePublisher</code>,<code>Hash</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#-specificfilenamelevel","title":"-SpecificFileNameLevel","text":"<p>You can choose one of the following options:</p> <ul> <li>OriginalFileName</li> <li>InternalName</li> <li>FileDescription</li> <li>ProductName</li> <li>PackageFamilyName</li> <li>FilePath</li> </ul> <p>More info available on Microsoft Learn</p> Type: String Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#-nouserpes","title":"-NoUserPEs","text":"<p>By default, the module includes user PEs in the scan. When you use this switch parameter, they won't be included. More info available on Microsoft Learn</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#-noscript","title":"-NoScript","text":"<p>More info available on Microsoft Learn</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#the-outputs-of-the-parameter-are","title":"The outputs of the parameter are","text":"<ul> <li>SupplementalPolicy<code>&lt;Custom Name&gt;</code>.xml</li> <li>{GUID}.cip</li> </ul>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#new-supplementalwdacconfig-pathwildcards","title":"New-SupplementalWDACConfig -PathWildCards","text":""},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#syntax_1","title":"Syntax","text":"<pre><code>New-SupplementalWDACConfig\n    [-PathWildCards]\n    -FolderPath &lt;DirectoryInfo&gt;\n    -SuppPolicyName &lt;String&gt;\n    [-PolicyPath &lt;FileInfo&gt;]\n    [-Deploy]\n    [-SkipVersionCheck]\n    [-Confirm]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#description_1","title":"Description","text":"<p>Creates a Supplemental policy that allows a folder path that includes one or more wildcard <code>*</code> character in it.</p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#parameters_1","title":"Parameters","text":""},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#-folderpath","title":"-FolderPath","text":"<p>A folder path that includes at least one wildcard <code>*</code> character. Press TAB to open the folder picker GUI. Once you selected a folder, you will see the path will have <code>\\*</code> at the end of it. You can modify the selected path by adding/removing wildcards <code>*</code> to it before proceeding.</p> Type: DirectoryInfo Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: True <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#-supppolicyname_1","title":"-SuppPolicyName","text":"<p>Add a descriptive name for the Supplemental policy. Accepts only alphanumeric and space characters.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#-policypath_1","title":"-PolicyPath","text":"<p>Browse for the xml file of the Base policy this Supplemental policy is going to expand. Supports tab completion by showing only <code>.xml</code> files with Base Policy Type.</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#-deploy_1","title":"-Deploy","text":"<p>Indicates that the module will automatically deploy the Supplemental policy after creation.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#the-outputs-of-the-parameter-are_1","title":"The outputs of the parameter are","text":"<ul> <li>SupplementalPolicy<code>&lt;Custom Name&gt;</code>.xml</li> <li>{GUID}.cip</li> </ul>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#new-supplementalwdacconfig-installedappxpackages","title":"New-SupplementalWDACConfig -InstalledAppXPackages","text":""},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#syntax_2","title":"Syntax","text":"<pre><code>New-SupplementalWDACConfig\n    [-InstalledAppXPackages]\n    -PackageName &lt;String&gt;\n    -SuppPolicyName &lt;String&gt;\n    [-PolicyPath &lt;FileInfo&gt;]\n    [-Deploy]\n    [-Force]\n    [-SkipVersionCheck]\n    [-Confirm]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#description_2","title":"Description","text":"<p>Creates a Supplemental policy based on the package name of an installed app. More information at Microsoft Learn</p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#parameters_2","title":"Parameters","text":""},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#packagename","title":"PackageName","text":"<p>Enter the package name of an installed app. Supports wildcard <code>*</code> character. e.g., <code>*Edge*</code> or <code>\"*Microsoft*\"</code>.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: True <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#supppolicyname","title":"SuppPolicyName","text":"<p>Add a descriptive name for the Supplemental policy. Accepts only alphanumeric and space characters.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#-policypath_2","title":"-PolicyPath","text":"<p>Browse for the xml file of the Base policy this Supplemental policy is going to expand. Supports tab completion by showing only <code>.xml</code> files with Base Policy Type.</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#-deploy_2","title":"-Deploy","text":"<p>Indicates that the module will automatically deploy the Supplemental policy after creation.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#-force","title":"-Force","text":"<p>Indicates that the cmdlet won't ask for confirmation and will proceed with creating the Supplemental policy.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-SupplementalWDACConfig/#the-outputs-of-the-parameter-are_2","title":"The outputs of the parameter are","text":"<ul> <li>SupplementalPolicy<code>&lt;Custom Name&gt;</code>.xml</li> <li>{GUID}.cip</li> </ul>"},{"location":"WDACConfig%20Module/New-WDACConfig/","title":"New-WDACConfig available parameters","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#new-wdacconfig-getblockrules","title":"New-WDACConfig -GetBlockRules","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#syntax","title":"Syntax","text":"<pre><code>New-WDACConfig\n     [-GetBlockRules]\n     [-Deploy]\n     [-SkipVersionCheck]\n     [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/New-WDACConfig/#description","title":"Description","text":"<p>Creates a WDAC policy file called Microsoft recommended block rules.xml from the official source for Microsoft recommended block rules, with AllowAll rules and audit mode rule option removed. The policy sets HVCI to strict.</p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#-deploy","title":"-Deploy","text":"<p>Deploys the latest Microsoft recommended block rules (For User Mode binaries). It has the 2 default AllowAll rules so it can be deployed as a standalone base policy. Uses Strict HVCI.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#new-wdacconfig-getdriverblockrules","title":"New-WDACConfig -GetDriverBlockRules","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#syntax_1","title":"Syntax","text":"<pre><code>New-WDACConfig\n     [-GetDriverBlockRules]\n     [-Deploy]\n     [-SkipVersionCheck]\n     [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/New-WDACConfig/#description_1","title":"Description","text":"<p>Creates a WDAC policy file called Microsoft recommended driver block rules.xml from the official source for Microsoft recommended driver block rules, with AllowAll rules and audit mode rule option removed. The policy sets HVCI to strict. Extra information regarding the version and last updated date of the GitHub document containing block rules will also be displayed.</p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#parameters_1","title":"Parameters","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#-deploy_1","title":"-Deploy","text":"<p>With the help of PowerShell, uses the official method to deploy the latest version of Microsoft recommended driver block rules.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#new-wdacconfig-makeallowmsftwithblockrules","title":"New-WDACConfig -MakeAllowMSFTWithBlockRules","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#syntax_2","title":"Syntax","text":"<pre><code>New-WDACConfig\n     [-MakeAllowMSFTWithBlockRules]\n     [-Deploy]\n     [-TestMode]\n     [-RequireEVSigners]\n     [-SkipVersionCheck]\n     [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/New-WDACConfig/#description_2","title":"Description","text":"<p>Calls the -GetBlockRules parameter to get the Microsoft recommended block rules, and merges them with AllowMicrosoft default policy. The Policy uses strict HVCI and has the following rule options:</p> <p></p> Rule number Rule option 0 Enabled:UMCI 2 Required:WHQL 5 Enabled:Inherit Default Policy 6 Enabled:Unsigned System Integrity Policy 11 Disabled:Script Enforcement 12 Required:Enforce Store Applications 16 Enabled:Update Policy No Reboot 17 Enabled:Allow Supplemental Policies 19 Enabled:Dynamic Code Security 20 Enabled:Revoked Expired As Unsigned <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#parameters_2","title":"Parameters","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#-deploy_2","title":"-Deploy","text":"<p>Indicates that the module will automatically deploy the AllowMicrosoftPlusBlockRules policy after creation.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-testmode","title":"-TestMode","text":"<p>Indicates that the created/deployed policy will have Enabled:Boot Audit on Failure and Enabled:Advanced Boot Options Menu policy rule options.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False"},{"location":"WDACConfig%20Module/New-WDACConfig/#-requireevsigners","title":"-RequireEVSigners","text":"<p>Indicates that the created/deployed policy will have Require EV Signers policy rule option.</p> <ul> <li>In addition to being WHQL signed, this rule requires that drivers must have been submitted by a partner that has an Extended Verification (EV) certificate. All Windows 10 and later, or Windows 11 drivers will meet this requirement.</li> </ul> <p></p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#the-outputs-of-the-parameter-are","title":"The outputs of the parameter are","text":"<ul> <li>AllowMicrosoftPlusBlockRules.xml policy file</li> <li>{GUID}.cip for the policy above</li> </ul>"},{"location":"WDACConfig%20Module/New-WDACConfig/#new-wdacconfig-setautoupdatedriverblockrules","title":"New-WDACConfig -SetAutoUpdateDriverBlockRules","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#syntax_3","title":"Syntax","text":"<pre><code>New-WDACConfig\n     [-SetAutoUpdateDriverBlockRules]\n     [-SkipVersionCheck]\n     [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/New-WDACConfig/#description_3","title":"Description","text":"<p>Creates a scheduled task that runs every 7 days to automatically perform the official method for updating Microsoft recommended driver block rules.</p> <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#new-wdacconfig-prepmsftonlyaudit","title":"New-WDACConfig -PrepMSFTOnlyAudit","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#syntax_4","title":"Syntax","text":"<pre><code>New-WDACConfig\n     [-PrepMSFTOnlyAudit]\n     [-Deploy]\n     [-LogSize &lt;UInt64&gt;]\n     [-SkipVersionCheck]\n     [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/New-WDACConfig/#description_4","title":"Description","text":"<p>Creates a WDAC policy using the default AllowMicrosoft policy in Audit mode that once deployed, prepares the system for generating Audit event logs for a fully managed device. No reboot required.</p> <p>After deployment, audit event logs will start to be created for any file that is run but wouldn't be allowed to if the AllowMicrosoft policy was deployed in enforced mode.</p> <p>It's recommended to use the optional parameter below to increase the log size of Code Integrity events category so that new events won't overwrite the older ones and everything will be captured.</p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#parameters_3","title":"Parameters","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#-logsize","title":"-LogSize","text":"<p>Specifies the log size for Microsoft-Windows-CodeIntegrity/Operational events. The values must be in the form of <code>&lt;Digit + Data measurement unit&gt;</code>. e.g., 2MB, 10MB, 1GB, 1TB. The minimum accepted value is 1MB which is the default.</p> Type: UInt64 Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-deploy_3","title":"-Deploy","text":"<p>Deploys the policy instead of just creating it.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#new-wdacconfig-prepdefaultwindowsaudit","title":"New-WDACConfig -PrepDefaultWindowsAudit","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#syntax_5","title":"Syntax","text":"<pre><code>New-WDACConfig\n     [-PrepDefaultWindowsAudit]\n     [-Deploy]\n     [-LogSize &lt;UInt64&gt;]\n     [-SkipVersionCheck]\n     [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/New-WDACConfig/#description_5","title":"Description","text":"<p>Creates a WDAC policy that once deployed, prepares the system for Default Windows auditing. It will trigger audit logs to be created for any file that is run but is not part of the Windows; Unlike -PrepMSFTOnlyAudit parameter that triggers audit logs for any file that is not signed by Microsoft's trusted root certificate.</p> <p>This parameter also scans the WDACConfig module files and PowerShell core files, adds them to the Prep audit mode base policy that it deploys, so that the final Supplemental policy generated from Event viewer audit logs won't include those files.</p> <p>It's recommended to use the optional parameter below to increase the log size of Code Integrity events category so that new events won't overwrite the older ones, and everything will be captured.</p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#parameters_4","title":"Parameters","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#-logsize_1","title":"-LogSize","text":"<p>Specifies the log size for Microsoft-Windows-CodeIntegrity/Operational events. The values must be in the form of <code>&lt;Digit + Data measurement unit&gt;</code>. e.g., 2MB, 10MB, 1GB, 1TB. The minimum accepted value is 1MB which is the default.</p> Type: UInt64 Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-deploy_4","title":"-Deploy","text":"<p>Deploys the policy instead of just creating it.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#new-wdacconfig-makepolicyfromauditlogs","title":"New-WDACConfig -MakePolicyFromAuditLogs","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#syntax_6","title":"Syntax","text":"<pre><code>New-WDACConfig\n     [-MakePolicyFromAuditLogs]\n     [-BasePolicyType &lt;String&gt;]\n     [-Deploy]\n     [-TestMode]\n     [-RequireEVSigners]\n     [-SpecificFileNameLevel &lt;String&gt;]\n     [-NoDeletedFiles]\n     [-NoUserPEs]\n     [-NoScript]\n     [-Level &lt;String&gt;]\n     [-Fallbacks &lt;String[]&gt;]\n     [-LogSize &lt;UInt64&gt;]\n     [-SkipVersionCheck]\n     [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/New-WDACConfig/#description_6","title":"Description","text":"<p>Creates a WDAC policy using the Audit event logs generated for a fully managed device.</p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#parameters_5","title":"Parameters","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#-basepolicytype","title":"-BasePolicyType","text":"<p>You need to select between Allow Microsoft Base and Default Windows Base, based on which prep audit mode base policy deployed on the system.</p> Type: String Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-deploy_5","title":"-Deploy","text":"<p>Indicates that the module will automatically remove the WDAC policy deployed using either -PrepMSFTOnlyAudit or -PrepDefaultWindowsAudit parameters, then deploys the supplemental policy created from Audit event logs along with the selected base policy type, both in enforced mode.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-testmode_1","title":"-TestMode","text":"<p>Indicates that the created/deployed policy will have Enabled:Boot Audit on Failure and Enabled:Advanced Boot Options Menu policy rule options.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-requireevsigners_1","title":"-RequireEVSigners","text":"<p>Indicates that the created/deployed policy will have Require EV Signers policy rule option.</p> <ul> <li>In addition to being WHQL signed, this rule requires that drivers must have been submitted by a partner that has an Extended Verification (EV) certificate. All Windows 10 and later, or Windows 11 drivers will meet this requirement.</li> </ul> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-debug","title":"-Debug","text":"<p>Indicates that the module will output 3 additional files for debugging purposes:</p> <ul> <li>FileRulesAndFileRefs.txt - Contains the File Rules and Rule refs for the Hash of the files that no longer exist on the disk.</li> <li>DeletedFilesHashes.xml - Policy file that contains File Rules and Rule refs for the files that no longer exist on the disk.</li> <li>AuditLogsPolicy_NoDeletedFiles.xml - The policy file generated from Audit Event logs based on the specified Level and Fallback parameters.</li> </ul> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-logsize_2","title":"-LogSize","text":"<p>Specifies the log size for Microsoft-Windows-CodeIntegrity/Operational events. The values must be in the form of <code>&lt;Digit + Data measurement unit&gt;</code>. e.g., 2MB, 10MB, 1GB, 1TB. The minimum accepted value is 1MB which is the default.</p> Type: UInt64 Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-levels","title":"-Levels","text":"<p>Offers the same official Levels for scanning event logs.</p> Type: String Position: Named Default value: <code>WHQLFilePublisher</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-fallbacks","title":"-Fallbacks","text":"<p>Offers the same official Fallbacks for scanning event logs.</p> Type: String[] Position: Named Default value: <code>FilePublisher</code>,<code>Hash</code> Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-specificfilenamelevel","title":"-SpecificFileNameLevel","text":"<p>You can choose one of the following options:</p> <ul> <li>OriginalFileName</li> <li>InternalName</li> <li>FileDescription</li> <li>ProductName</li> <li>PackageFamilyName</li> <li>FilePath</li> </ul> <p>More info available on Microsoft Learn</p> Type: String Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-nodeletedfiles","title":"-NoDeletedFiles","text":"<p>Indicates that files that were run during program installations but then were deleted and are no longer on the disk, won't be added to the supplemental policy. This can mean the programs you installed will be allowed to run but installation/reinstallation might not be allowed once the policies are deployed.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-nouserpes","title":"-NoUserPEs","text":"<p>By default, the module includes user PEs in the scan. When you use this switch parameter, they won't be included. More info available on Microsoft Learn</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-noscript","title":"-NoScript","text":"<p>More info available on Microsoft Learn</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#the-outputs-of-the-parameter","title":"The outputs of the parameter","text":"<ul> <li> <p>The base policy XML file</p> </li> <li> <p>The supplemental policy XML file</p> </li> <li> <p><code>{GUID}.cip</code> Binary file for the base Policy, ready for deployment.</p> </li> <li> <p><code>{GUID}.cip</code> Binary file for the supplemental Policy, ready for deployment.</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#new-wdacconfig-makelightpolicy","title":"New-WDACConfig -MakeLightPolicy","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#syntax_7","title":"Syntax","text":"<pre><code>New-WDACConfig\n     [-MakeLightPolicy]\n     [-Deploy]\n     [-TestMode]\n     [-RequireEVSigners]\n     [-SkipVersionCheck]\n     [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/New-WDACConfig/#description_7","title":"Description","text":"<p>Creates a WDAC policy for a Lightly managed system. The Policy uses has the same specifications as -MakeAllowMSFTWithBlockRules, with the following additional rule options:</p> <p></p> Rule number Rule option 14 Enabled:Intelligent Security Graph Authorization 15 Enabled:Invalidate EAs on Reboot <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#parameters_6","title":"Parameters","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#-deploy_6","title":"-Deploy","text":"<p>Indicates that the module will automatically deploy the SignedAndReputable.xml policy file after creation.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-testmode_2","title":"-TestMode","text":"<p>Indicates that the created/deployed policy will have Enabled:Boot Audit on Failure and Enabled:Advanced Boot Options Menu policy rule options.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-requireevsigners_2","title":"-RequireEVSigners","text":"<p>Indicates that the created/deployed policy will have Require EV Signers policy rule option.</p> <ul> <li>In addition to being WHQL signed, this rule requires that drivers must have been submitted by a partner that has an Extended Verification (EV) certificate. All Windows 10 and later, or Windows 11 drivers will meet this requirement.</li> </ul> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#the-outputs-of-the-parameter-are_1","title":"The outputs of the parameter are","text":"<ul> <li>SignedAndReputable.xml</li> <li>{GUID}.cip</li> </ul>"},{"location":"WDACConfig%20Module/New-WDACConfig/#new-wdacconfig-makedefaultwindowswithblockrules","title":"New-WDACConfig -MakeDefaultWindowsWithBlockRules","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#syntax_8","title":"Syntax","text":"<pre><code>New-WDACConfig\n     [-MakeDefaultWindowsWithBlockRules]\n     [-Deploy]\n     [-TestMode]\n     [-RequireEVSigners]\n     [-SkipVersionCheck]\n     [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/New-WDACConfig/#description_8","title":"Description","text":"<p>Calls the -GetBlockRules parameter to get the Microsoft recommended block rules, and merges them with DefaultWindows_Enforced policy. The Policy uses strict HVCI and uses the same policy rule options as -MakeAllowMSFTWithBlockRules parameter.</p> <p></p> <p>Note</p> <p>Since the module uses PowerShell and not Windows PowerShell that is pre-installed in Windows, this parameter will automatically scan <code>C:\\Program Files\\PowerShell</code> directory (if it detects the PowerShell is not installed from Microsoft Store) and add PowerShell files to the DefaultWindowsPlusBlockRules.xml policy file so that you will be able to continue using the module after deploying the policy. The scan uses FilePublisher level and Hash fallback.</p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#parameters_7","title":"Parameters","text":""},{"location":"WDACConfig%20Module/New-WDACConfig/#-deploy_7","title":"-Deploy","text":"<p>Indicates that the module will automatically deploy the DefaultWindowsPlusBlockRules policy after creation.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-testmode_3","title":"-TestMode","text":"<p>Indicates that the created/deployed policy will have Enabled:Boot Audit on Failure and Enabled:Advanced Boot Options Menu policy rule options.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#-requireevsigners_3","title":"-RequireEVSigners","text":"<p>Indicates that the created/deployed policy will have Require EV Signers policy rule option.</p> <ul> <li>In addition to being WHQL signed, this rule requires that drivers must have been submitted by a partner that has an Extended Verification (EV) certificate. All Windows 10 and later, or Windows 11 drivers will meet this requirement.</li> </ul> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/New-WDACConfig/#the-outputs-of-the-parameter-are_2","title":"The outputs of the parameter are","text":"<ul> <li>DefaultWindowsPlusBlockRules.xml policy file</li> <li>{GUID}.cip for the policy above</li> </ul>"},{"location":"WDACConfig%20Module/Remove-CommonWDACConfig/","title":"Remove-CommonWDACConfig available parameters","text":""},{"location":"WDACConfig%20Module/Remove-CommonWDACConfig/#syntax","title":"Syntax","text":"<pre><code>Remove-CommonWDACConfig\n    [-CertCN]\n    [-CertPath]\n    [-SignToolPath]\n    [-UnsignedPolicyPath]\n    [-SignedPolicyPath]\n    [-StrictKernelPolicyGUID]\n    [-StrictKernelNoFlightRootsPolicyGUID]\n</code></pre>"},{"location":"WDACConfig%20Module/Remove-CommonWDACConfig/#description","title":"Description","text":"<p>Use this cmdlet to remove the values stored in the User Configurations JSON file. If you use it without any parameters it will delete the User configuration folder and everything in it, which is located in <code>C:\\Users\\UserName\\.WDACConfig</code></p>"},{"location":"WDACConfig%20Module/Remove-CommonWDACConfig/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Remove-CommonWDACConfig/#-certcn","title":"-CertCN","text":"<p>Removes the saved Certificate Common Name from User Configurations</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Remove-CommonWDACConfig/#-certpath","title":"-CertPath","text":"<p>Removes the saved Certificate path from User Configurations</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Remove-CommonWDACConfig/#-signtoolpath","title":"-SignToolPath","text":"<p>Removes the saved SignTool.exe Path from User Configurations</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Remove-CommonWDACConfig/#-unsignedpolicypath","title":"-UnsignedPolicyPath","text":"<p>Removes the saved Unsigned Policy Path from User Configurations</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Remove-CommonWDACConfig/#-signedpolicypath","title":"-SignedPolicyPath","text":"<p>Removes the saved Signed Policy Path from User Configurations</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Remove-CommonWDACConfig/#-strictkernelpolicyguid","title":"-StrictKernelPolicyGUID","text":"<p>Removes the saved Strict Kernel Policy GUID from User Configurations</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Remove-CommonWDACConfig/#-strictkernelnoflightrootspolicyguid","title":"-StrictKernelNoFlightRootsPolicyGUID","text":"<p>Removes the saved Strict Kernel NoFlight Roots Policy GUID from User Configurations</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Remove-WDACConfig/","title":"Remove-WDACConfig available parameters","text":""},{"location":"WDACConfig%20Module/Remove-WDACConfig/#remove-wdacconfig-signedbase","title":"Remove-WDACConfig -SignedBase","text":""},{"location":"WDACConfig%20Module/Remove-WDACConfig/#syntax","title":"Syntax","text":"<pre><code>Remove-WDACConfig\n    [-SignedBase]\n    -PolicyPaths &lt;FileInfo[]&gt;\n    [-CertCN &lt;String&gt;]\n    [-SignToolPath &lt;FileInfo&gt;]\n    [-Force]\n    [-SkipVersionCheck]\n    [-Confirm]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Remove-WDACConfig/#description","title":"Description","text":"<p>Uses the official procedure to Re-Deploy the Signed base WDAC policies with Enabled:Unsigned System Integrity Policy rule option.</p>"},{"location":"WDACConfig%20Module/Remove-WDACConfig/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Remove-WDACConfig/#-policypaths","title":"-PolicyPaths","text":"<p>Path to xml file(s) of the currently deployed policy that you want to remove. Supports tab completion by showing only <code>.xml</code> files.</p> Type: FileInfo[] Position: Named Default value: None Required: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Remove-WDACConfig/#-certcn","title":"-CertCN","text":"<p>Common name of the certificate - Supports argument completion so you don't have to manually enter the Certificate's CN. Make sure the certificate is installed in the personal store of the user certificates, then press TAB to auto complete the name. You can however enter it manually if you want to.</p> Type: String Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Remove-WDACConfig/#-signtoolpath","title":"-SignToolPath","text":"<p>Press TAB to open the file picker GUI and browse for SignTool.exe</p> <p>Tip</p> <p>Refer to this section for more info</p> Type: FileInfo Position: Named Default value: None Required: False Automatic: True Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Remove-WDACConfig/#-force","title":"-Force","text":"<p>Indicates that the cmdlet won't ask for confirmation and will proceed with redeploying the signed base policy in unsigned mode.</p> Type: SwitchParameter Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/Remove-WDACConfig/#remove-wdacconfig-unsignedorsupplemental","title":"Remove-WDACConfig -UnsignedOrSupplemental","text":""},{"location":"WDACConfig%20Module/Remove-WDACConfig/#syntax_1","title":"Syntax","text":"<pre><code>Remove-WDACConfig\n    [-UnsignedOrSupplemental]\n    [-PolicyNames &lt;String[]&gt;]\n    [-PolicyIDs &lt;String[]&gt;]\n    [-Force]\n    [-SkipVersionCheck]\n    [-Confirm]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Remove-WDACConfig/#description_1","title":"Description","text":"<p>Removes Unsigned deployed WDAC policies as well as Signed deployed Supplemental WDAC policies</p> <p>Note</p> <p>When using <code>-PolicyNames</code> parameter, if multiple policies with the exact same name are deployed, when you press TAB, you will only see 1 of them, if you select it, all of the policies with that name will be removed. If that's not desired, consider using <code>-PolicyIDs</code> parameter instead.</p> <p>Note</p> <p>The auto-completion in these 2 parameters are smart. E.g., if there are 10 policies deployed on the system, you can press Tab to select 5 of them by IDs, but when you try to select the other 5 by their names, the name of the policies that you already selected by IDs don't show up anymore. This greatly reduces user error and simplifies the workflow for end user.</p>"},{"location":"WDACConfig%20Module/Remove-WDACConfig/#parameters_1","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Remove-WDACConfig/#-policyids","title":"-PolicyIDs","text":"<p>The submitted values are verified against the currently deployed policies and if they match, the policies are removed.</p> <p>Just press TAB key and it will autofill the values for you based on the deployed policies. If you want to select multiple names, after each one, enter a comma <code>,</code> and then press TAB again to choose another name.</p> Type: String[] Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Remove-WDACConfig/#-policynames","title":"-PolicyNames","text":"<p>The submitted values are verified against the currently deployed policies and if they match, the policies are removed.</p> <p>Just press TAB key and it will autofill the values for you based on the deployed policies. If you want to select multiple IDs, after each one, enter a comma <code>,</code> and then press TAB again to choose another ID.</p> Type: String[] Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Set-CommonWDACConfig/","title":"Set-CommonWDACConfig available parameters","text":""},{"location":"WDACConfig%20Module/Set-CommonWDACConfig/#syntax","title":"Syntax","text":"<pre><code>Set-CommonWDACConfig\n    [[-CertCN] &lt;String&gt;]\n    [[-CertPath] &lt;FileInfo&gt;]\n    [[-SignToolPath] &lt;FileInfo&gt;]\n    [[-UnsignedPolicyPath] &lt;FileInfo&gt;]\n    [[-SignedPolicyPath] &lt;FileInfo&gt;]\n    [[-StrictKernelPolicyGUID] &lt;Guid&gt;]\n    [[-StrictKernelNoFlightRootsPolicyGUID] &lt;Guid&gt;]\n    [[-LastUpdateCheck] &lt;DateTime&gt;]\n    [[-StrictKernelModePolicyTimeOfDeployment] &lt;DateTime&gt;]\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Set-CommonWDACConfig/#description","title":"Description","text":"<p>Use this cmdlet to store the values for common and frequently used parameters so that you won't have to specify them again every time.</p> <p>All of the applicable cmdlets of the module automatically check the User Configuration file for any available input, if you don't specify values for their parameters. Learn more about the User Configuration file here.</p> <p></p>"},{"location":"WDACConfig%20Module/Set-CommonWDACConfig/#an-example","title":"An Example","text":"<p>Instead of specifying all of the parameters for <code>Edit-SignedWDACConfig</code> cmdlet like this:</p> <pre><code>Edit-SignedWDACConfig -AllowNewApps -SuppPolicyName \"App 1\" -CertPath \"Path To Certificate.cer\" -PolicyPaths \"Path To Policy.xml\" -CertCN \"Certificate Common Name\"\n</code></pre> <p>You can just run this</p> <pre><code>Edit-SignedWDACConfig -AllowNewApps -SuppPolicyName \"App 1\"\n</code></pre> <p>If correct and valid values for the missing parameters exist in User Configuration file, the cmdlet will automatically detect and use them seamlessly.</p>"},{"location":"WDACConfig%20Module/Set-CommonWDACConfig/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Set-CommonWDACConfig/#-certcn","title":"-CertCN","text":"<p>Common Name of an installed certificate. Supports argument completion so you don't have to manually enter the Certificate's CN, just make sure the certificate is installed in the personal store of the user certificates, then press TAB to auto complete the name. You can however enter it manually if you want to.</p> Type: String Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Set-CommonWDACConfig/#-certpath","title":"-CertPath","text":"<p>Path to the certificate <code>.cer</code> file. Press TAB to open the file picker GUI and browse for a <code>.cer</code> file.</p> Type: FileInfo Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Set-CommonWDACConfig/#-signtoolpath","title":"-SignToolPath","text":"<p>Press TAB to open the file picker GUI and browse for SignTool.exe</p> Type: FileInfo Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Set-CommonWDACConfig/#-unsignedpolicypath","title":"-UnSignedPolicyPath","text":"<p>Path to the xml file of an Unsigned policy. Supports file picker GUI.</p> Type: FileInfo Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Set-CommonWDACConfig/#-signedpolicypath","title":"-SignedPolicyPath","text":"<p>Path to the xml file of a Signed policy. Supports file picker GUI.</p> Type: FileInfo Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Test-CiPolicy/","title":"Test-CiPolicy available parameters","text":""},{"location":"WDACConfig%20Module/Test-CiPolicy/#syntax","title":"Syntax","text":"<pre><code>Test-CiPolicy\n    -XmlFile &lt;FileInfo&gt;\n    -CipFile &lt;FileInfo&gt;\n    [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"WDACConfig%20Module/Test-CiPolicy/#description","title":"Description","text":"<p>Tests a Code Integrity (WDAC) Policy XML file against the Schema file located at:</p> <pre><code>$Env:SystemDrive\\Windows\\schemas\\CodeIntegrity\\cipolicy.xsd\n</code></pre> <p>It returns a boolean value indicating whether the XML file is valid or not.</p> <p>It can also be used to display the signer certificates used to sign a <code>.CIP</code> binary file.</p>"},{"location":"WDACConfig%20Module/Test-CiPolicy/#parameters","title":"Parameters","text":""},{"location":"WDACConfig%20Module/Test-CiPolicy/#-xmlfile","title":"-XmlFile","text":"<p>The Code Integrity Policy XML file to test. Supports file picker GUI.</p> Type: FileInfo Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/Test-CiPolicy/#-cipfile","title":"-CipFile","text":"<p>The binary Code Integrity Policy file to test for signers. Supports file picker GUI.</p> Type: FileInfo Position: Named Default value: None Required: False Accept pipeline input: False Accept wildcard characters: False <p></p>"},{"location":"WDACConfig%20Module/WDACConfig/","title":"WDACConfig (Windows Defender Application Control) Module","text":"<p>WDACConfig is an advanced PowerShell module designed with the aim of automating Application and File whitelisting in Windows using Windows Defender Application Control (App Control for Business Policies). You can always find its source code on GitHub and Install it from PowerShell Gallery.</p> <p>This page is also available on my website.</p> <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/WDACConfig/#requirements","title":"Requirements","text":"<ul> <li> <p> PowerShell Core latest version</p> <ul> <li> Install from GitHub or Microsoft Store</li> </ul> </li> <li> <p> Windows 11 latest version</p> </li> <li> Administrator Privileges</li> <li> Internet Connection (for periodic update checks)</li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/WDACConfig/#features","title":"Features","text":"<ul> <li> <p> Uses the official documented methods of the ConfigCI module.</p> </li> <li> <p> Checks for new version periodically and updates itself automatically when necessary.</p> <ul> <li> Update check can be skipped with <code>-SkipVersionCheck</code>.</li> </ul> </li> <li> <p> Actively trying to design it with Microsoft Security Development Lifecycle (SDL) guidelines in mind.</p> </li> <li> <p> The module goes through Extended Validation before each update is released to make sure everything works perfectly.</p> </li> <li> <p> The module can be used for managing both local systems and systems in Azure VMs.</p> </li> <li> <p> Use <code>-Verbose</code> common parameter with each cmdlet of the WDACConfig module to see extra details and what's happening under the hood.</p> </li> </ul> <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/WDACConfig/#install-the-module","title":"Install The Module","text":"<pre><code>Install-Module -Name 'WDACConfig' -Scope 'AllUsers' -Force\n</code></pre>"},{"location":"WDACConfig%20Module/WDACConfig/#wdacconfig-modules-table-of-content","title":"WDACConfig Module's Table of Content","text":"Cmdlet Guide Usage PowerShell Console Help New-WDACConfig Mainly for creating and deploying WDAC policies <code>Get-Help New-WDACConfig</code> New-SupplementalWDACConfig To create and deploy Supplemental policies <code>Get-Help New-SupplementalWDACConfig</code> Remove-WDACConfig To remove deployed WDAC policies <code>Get-Help Remove-WDACConfig</code> Edit-WDACConfig To edit deployed unsigned WDAC policies <code>Get-Help Edit-WDACConfig</code> Edit-SignedWDACConfig To edit deployed signed WDAC policies <code>Get-Help Edit-SignedWDACConfig</code> Deploy-SignedWDACConfig To sign and deploy WDAC policies <code>Get-Help Deploy-SignedWDACConfig</code> Confirm-WDACConfig To confirm deployment and check the status of WDAC policies <code>Get-Help Confirm-WDACConfig</code> New-DenyWDACConfig To create a deny mode WDAC policy <code>Get-Help New-DenyWDACConfig</code> Set-CommonWDACConfig To add or edit user configurations for common WDACConfig parameters <code>Get-Help Set-CommonWDACConfig</code> New-KernelModeWDACConfig To create a Strict Kernel mode WDAC policy for total BYOVD protection <code>Get-Help New-KernelModeWDACConfig</code> Get-CommonWDACConfig To display or fetch user configurations for common WDACConfig parameters <code>Get-Help Get-CommonWDACConfig</code> Invoke-WDACSimulation To simulate a WDAC policy deployment quickly <code>Get-Help Invoke-WDACSimulation</code> Remove-CommonWDACConfig To remove user configurations for common WDACConfig parameters <code>Get-Help Remove-CommonWDACConfig</code> Assert-WDACConfigIntegrity To ascertain that the files in your local WDACConfig folder are identical to the ones in the cloud <code>Get-Help Assert-WDACConfigIntegrity</code> Build-WDACCertificate To create proper code signing certificates for WDAC policy signing <code>Get-Help Build-WDACCertificate</code> Test-CiPolicy Tests a Code Integrity (WDAC) Policy XML file against the Schema and shows the signers in a signed <code>.CIP</code> files <code>Get-Help Test-CiPolicy</code>"},{"location":"WDACConfig%20Module/WDACConfig/#user-configurations-directory","title":"User Configurations Directory","text":"<p>The module stores user configurations and all of the outputs only in the following directory:</p> <pre><code>C:\\Program Files\\WDACConfig\n</code></pre> <p>It's an Admin-protected path that provides security against non-elevated users and processes.</p> <p></p>"},{"location":"WDACConfig%20Module/WDACConfig/#the-temporary-files-are-stored-in-the-following-directory","title":"The Temporary Files Are Stored in the Following Directory","text":"<pre><code>C:\\Program Files\\WDACConfig\\StagingArea\n</code></pre> <p>Each cmdlet of the module creates a subdirectory in the StagingArea to store its temporary files. The subdirectory is named after the cmdlet's name. At the end of the cmdlet's execution, the temporary subdirectory is deleted, unless the <code>-Debug</code> parameter is used.</p> <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/WDACConfig/#about-automatic-parameters","title":"About Automatic Parameters","text":"<p>A parameter with an Automatic value of True in the description means that the module will use its default value set by the Set-CommonWDACConfig cmdlet. This simplifies the process and avoids redundancy. However, if an Automatic parameter has no value in User Configurations and you do not specify one in the command line, you will encounter an error requesting a value. Specifying a value for an Automatic parameter in the command line supersedes its default value in User Configurations, so the module will disregard the value of that parameter in the User Configurations file.</p> <p></p>"},{"location":"WDACConfig%20Module/WDACConfig/#the-logic-behind-the-signtoolpath-parameter-in-the-module","title":"The Logic Behind The -SignToolPath Parameter in the Module","text":"<ol> <li> <p>If Windows SDK Signing Tools for Desktop Apps components is installed in the default location <code>C:\\Program Files (x86)\\Windows Kits</code>, then specifying <code>-SignToolPath</code> parameter isn't necessary as the SignTool.exe will be detected automatically.</p> </li> <li> <p>If Windows SDK Signing Tools for Desktop Apps components is not installed in the default location or you want to manually browse for the signtool.exe, then make sure you either specify its path using <code>Set-CommonWDACConfig -SignToolPath</code> or use the <code>-SignToolPath</code> parameter.</p> </li> <li> <p>If SignTool.exe path is available in user configurations then it will be automatically used.</p> </li> <li> <p>Specifying <code>-SignToolPath</code> parameter explicitly on the command line takes priority over auto detection and value in the user configurations.</p> </li> <li> <p>If SignTool.exe cannot be auto-detected and the user didn't specify it on the command line, you will receive a prompt to authorize the automatic download of the most recent SignTool.exe version from the official Microsoft servers. Upon confirmation, it will be saved in your user configurations and utilized by the cmdlet.</p> </li> </ol> <p></p> <p></p> <p></p>"},{"location":"WDACConfig%20Module/WDACConfig/#video-guides","title":"Video Guides","text":""},{"location":"WDACConfig%20Module/WDACConfig/#feedback-and-feature-request","title":"Feedback and Feature Request","text":"<p>If there are any feedback or feature requests regarding this module, please open a new discussion/issue on GitHub.</p> <p></p>"}]}